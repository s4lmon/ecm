

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Dec  4 11:28:57 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 2.00
    56                           ; Generated 27/05/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4331 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     _INTCONbits	set	4082
    90  0000                     _PIE1bits	set	3997
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _LATB	set	3978
    97  0000                     _PTPERH	set	3962
    98  0000                     _PTPERL	set	3963
    99  0000                     _PWMCON1	set	3950
   100  0000                     _PWMCON0	set	3951
   101  0000                     _PTCON1	set	3966
   102  0000                     _PTCON0	set	3967
   103  0000                     _TRISB	set	3987
   104  0000                     _TMR0H	set	4055
   105  0000                     _TMR0L	set	4054
   106  0000                     _T0CONbits	set	4053
   107  0000                     _CAP1BUFL	set	3944
   108  0000                     _CAP1BUFH	set	3945
   109  0000                     _CAP2BUFL	set	3942
   110  0000                     _CAP2BUFH	set	3943
   111  0000                     _DFLTCON	set	3936
   112  0000                     _CAP2CON	set	3938
   113  0000                     _CAP1CON	set	3939
   114  0000                     _T5CONbits	set	4023
   115  0000                     _T5CON	set	4023
   116  0000                     _OSCCONbits	set	4051
   117  0000                     _OSCCON	set	4051
   118  0000                     _ANSEL1	set	4025
   119  0000                     _ANSEL0	set	4024
   120  0000                     _INTCON3bits	set	4080
   121  0000                     _RCREG	set	4014
   122  0000                     _PIR1bits	set	3998
   123  0000                     _TRISD	set	3989
   124  0000                     _TRISC	set	3988
   125  0000                     _TRISA	set	3986
   126  0000                     _LATD	set	3980
   127  0000                     _LATC	set	3979
   128  0000                     _LATA	set	3977
   129  0000                     _PORTAbits	set	3968
   130  0000                     _PORTDbits	set	3971
   131  0000                     _PORTCbits	set	3970
   132  0000                     _PDC1H	set	3958
   133  0000                     _PDC1L	set	3959
   134  0000                     _PDC0H	set	3960
   135  0000                     _PDC0L	set	3961
   136                           
   137                           	psect	smallconst
   138  000300                     __psmallconst:
   139                           	opt stack 0
   140  000300  00                 	db	0
   141  000301  43                 	db	67	;'C'
   142  000302  53                 	db	83	;'S'
   143  000303  20                 	db	32
   144  000304  49                 	db	73	;'I'
   145  000305  4E                 	db	78	;'N'
   146  000306  43                 	db	67	;'C'
   147  000307  4F                 	db	79	;'O'
   148  000308  52                 	db	82	;'R'
   149  000309  52                 	db	82	;'R'
   150  00030A  45                 	db	69	;'E'
   151  00030B  43                 	db	67	;'C'
   152  00030C  54                 	db	84	;'T'
   153  00030D  20                 	db	32
   154  00030E  25                 	db	37
   155  00030F  64                 	db	100	;'d'
   156  000310  00                 	db	0
   157  000311  43                 	db	67	;'C'
   158  000312  53                 	db	83	;'S'
   159  000313  20                 	db	32
   160  000314  43                 	db	67	;'C'
   161  000315  4F                 	db	79	;'O'
   162  000316  52                 	db	82	;'R'
   163  000317  52                 	db	82	;'R'
   164  000318  45                 	db	69	;'E'
   165  000319  43                 	db	67	;'C'
   166  00031A  54                 	db	84	;'T'
   167  00031B  20                 	db	32
   168  00031C  25                 	db	37
   169  00031D  64                 	db	100	;'d'
   170  00031E  00                 	db	0
   171  00031F                     STR_2:
   172  00031F  52                 	db	82	;'R'
   173  000320  69                 	db	105	;'i'
   174  000321  67                 	db	103	;'g'
   175  000322  68                 	db	104	;'h'
   176  000323  74                 	db	116	;'t'
   177  000324  3A                 	db	58	;':'
   178  000325  20                 	db	32
   179  000326  25                 	db	37
   180  000327  75                 	db	117	;'u'
   181  000328  00                 	db	0
   182  000329                     STR_1:
   183  000329  4C                 	db	76	;'L'
   184  00032A  65                 	db	101	;'e'
   185  00032B  66                 	db	102	;'f'
   186  00032C  74                 	db	116	;'t'
   187  00032D  3A                 	db	58	;':'
   188  00032E  20                 	db	32
   189  00032F  25                 	db	37
   190  000330  75                 	db	117	;'u'
   191  000331  00                 	db	0
   192                           
   193                           ; #config settings
   194  000332  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  001B1E                     __pcinit:
   198                           	opt stack 0
   199  001B1E                     start_initialization:
   200                           	opt stack 0
   201  001B1E                     __initialization:
   202                           	opt stack 0
   203                           
   204                           ; Clear objects allocated to BANK0 (54 bytes)
   205  001B1E  EE00  F0BA         	lfsr	0,__pbssBANK0
   206  001B22  0E36               	movlw	54
   207  001B24                     clear_0:
   208  001B24  6AEE               	clrf	postinc0,c
   209  001B26  06E8               	decf	wreg,f,c
   210  001B28  E1FD               	bnz	clear_0
   211                           
   212                           ; Clear objects allocated to COMRAM (5 bytes)
   213  001B2A  6A59               	clrf	(__pbssCOMRAM+4)& (0+255),c
   214  001B2C  6A58               	clrf	(__pbssCOMRAM+3)& (0+255),c
   215  001B2E  6A57               	clrf	(__pbssCOMRAM+2)& (0+255),c
   216  001B30  6A56               	clrf	(__pbssCOMRAM+1)& (0+255),c
   217  001B32  6A55               	clrf	__pbssCOMRAM& (0+255),c
   218  001B34                     end_of_initialization:
   219                           	opt stack 0
   220  001B34                     __end_of__initialization:
   221                           	opt stack 0
   222  001B34  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   223  001B36  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   224  001B38  0E00               	movlw	low (__Lsmallconst shr (0+16))
   225  001B3A  6EF8               	movwf	tblptru,c
   226  001B3C  0E03               	movlw	high __Lsmallconst
   227  001B3E  6EF7               	movwf	tblptrh,c
   228  001B40  0100               	movlb	0
   229  001B42  EF9A  F001         	goto	_main	;jump to C main() function
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           
   235                           	psect	bssCOMRAM
   236  000055                     __pbssCOMRAM:
   237                           	opt stack 0
   238  000055                     _prec:
   239                           	opt stack 0
   240  000055                     	ds	2
   241  000057                     _flags:
   242                           	opt stack 0
   243  000057                     	ds	2
   244  000059                     InterruptHandlerHigh@count:
   245                           	opt stack 0
   246  000059                     	ds	1
   247                           tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           
   252                           	psect	bssBANK0
   253  0000BA                     __pbssBANK0:
   254                           	opt stack 0
   255  0000BA                     _nout:
   256                           	opt stack 0
   257  0000BA                     	ds	2
   258  0000BC                     _width:
   259                           	opt stack 0
   260  0000BC                     	ds	2
   261  0000BE                     _card_read:
   262                           	opt stack 0
   263  0000BE                     	ds	1
   264  0000BF                     _dbuf:
   265                           	opt stack 0
   266  0000BF                     	ds	32
   267  0000DF                     _string_rfid:
   268                           	opt stack 0
   269  0000DF                     	ds	17
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           
   275                           	psect	cstackBANK0
   276  000060                     __pcstackBANK0:
   277                           	opt stack 0
   278  000060                     vfpfcnvrt@ll:
   279                           	opt stack 0
   280                           
   281                           ; 8 bytes @ 0x0
   282  000060                     	ds	8
   283  000068                     vfpfcnvrt@llu:
   284                           	opt stack 0
   285                           
   286                           ; 8 bytes @ 0x8
   287  000068                     	ds	8
   288  000070                     vfprintf@cfmt:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x10
   292  000070                     	ds	2
   293  000072                     ?_sprintf:
   294                           	opt stack 0
   295  000072                     sprintf@s:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x12
   299  000072                     	ds	2
   300  000074                     sprintf@fmt:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x14
   304  000074                     	ds	4
   305  000078                     sprintf@ret:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x18
   309  000078                     	ds	2
   310  00007A                     sprintf@ap:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x1A
   314  00007A                     	ds	2
   315  00007C                     sprintf@f:
   316                           	opt stack 0
   317                           
   318                           ; 6 bytes @ 0x1C
   319  00007C                     	ds	6
   320  000082                     print_IR@Values:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x22
   324  000082                     	ds	2
   325  000084                     ??_print_IR:
   326                           
   327                           ; 1 bytes @ 0x24
   328  000084                     	ds	1
   329  000085                     print_IR@buf:
   330                           	opt stack 0
   331                           
   332                           ; 16 bytes @ 0x25
   333  000085                     	ds	16
   334  000095                     ??_main:
   335                           
   336                           ; 1 bytes @ 0x35
   337  000095                     	ds	3
   338  000098                     main@PWMcycle:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x38
   342  000098                     	ds	2
   343  00009A                     main@diff:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x3A
   347  00009A                     	ds	2
   348  00009C                     main@threshold:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x3C
   352  00009C                     	ds	2
   353  00009E                     main@direction:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x3E
   357  00009E                     	ds	2
   358  0000A0                     main@Values:
   359                           	opt stack 0
   360                           
   361                           ; 8 bytes @ 0x40
   362  0000A0                     	ds	8
   363  0000A8                     main@mL:
   364                           	opt stack 0
   365                           
   366                           ; 9 bytes @ 0x48
   367  0000A8                     	ds	9
   368  0000B1                     main@mR:
   369                           	opt stack 0
   370                           
   371                           ; 9 bytes @ 0x51
   372  0000B1                     	ds	9
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           
   378                           	psect	cstackCOMRAM
   379  000001                     __pcstackCOMRAM:
   380                           	opt stack 0
   381  000001                     ??_InterruptHandlerHigh:
   382  000001                     
   383                           ; 1 bytes @ 0x0
   384  000001                     	ds	4
   385  000005                     InterruptHandlerHigh@rx_char:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x4
   389  000005                     	ds	1
   390  000006                     ??_LCD_out:
   391  000006                     ?_strlen:
   392                           	opt stack 0
   393  000006                     ?___wmul:
   394                           	opt stack 0
   395  000006                     ?___aodiv:
   396                           	opt stack 0
   397  000006                     ?___aomod:
   398                           	opt stack 0
   399  000006                     ?___lodiv:
   400                           	opt stack 0
   401  000006                     ?___lomod:
   402                           	opt stack 0
   403  000006                     read_IR@Values:
   404                           	opt stack 0
   405  000006                     ___wmul@multiplier:
   406                           	opt stack 0
   407  000006                     fputc@c:
   408                           	opt stack 0
   409  000006                     strlen@s:
   410                           	opt stack 0
   411  000006                     ___aodiv@dividend:
   412                           	opt stack 0
   413  000006                     ___aomod@dividend:
   414                           	opt stack 0
   415  000006                     ___lodiv@dividend:
   416                           	opt stack 0
   417  000006                     ___lomod@dividend:
   418                           	opt stack 0
   419                           
   420                           ; 8 bytes @ 0x5
   421  000006                     	ds	1
   422  000007                     LCD_out@number:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x6
   426  000007                     	ds	1
   427  000008                     ??_read_IR:
   428  000008                     ??_strlen:
   429  000008                     LCD_send@type:
   430                           	opt stack 0
   431  000008                     ___wmul@multiplicand:
   432                           	opt stack 0
   433  000008                     fputc@fp:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x7
   437  000008                     	ds	1
   438  000009                     LCD_send@Byte:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x8
   442  000009                     	ds	1
   443  00000A                     ??_fputc:
   444  00000A                     ??_LCD_init:
   445  00000A                     ??_LCD_clear:
   446  00000A                     LCD_line@line:
   447                           	opt stack 0
   448  00000A                     LCD_string@string:
   449                           	opt stack 0
   450  00000A                     ___wmul@product:
   451                           	opt stack 0
   452  00000A                     strlen@a:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x9
   456  00000A                     	ds	1
   457  00000B                     print_RFID@pa:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0xA
   461  00000B                     	ds	1
   462  00000C                     ?___awdiv:
   463                           	opt stack 0
   464  00000C                     ___awdiv@dividend:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0xB
   468  00000C                     	ds	1
   469  00000D                     print_RFID@dis:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0xC
   473  00000D                     	ds	1
   474  00000E                     ___awdiv@divisor:
   475                           	opt stack 0
   476  00000E                     ___aodiv@divisor:
   477                           	opt stack 0
   478  00000E                     ___aomod@divisor:
   479                           	opt stack 0
   480  00000E                     ___lodiv@divisor:
   481                           	opt stack 0
   482  00000E                     ___lomod@divisor:
   483                           	opt stack 0
   484                           
   485                           ; 8 bytes @ 0xD
   486  00000E                     	ds	1
   487  00000F                     ??_print_RFID:
   488  00000F                     fputs@s:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0xE
   492  00000F                     	ds	1
   493  000010                     ___awdiv@counter:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0xF
   497  000010                     	ds	1
   498  000011                     ___awdiv@sign:
   499                           	opt stack 0
   500  000011                     fputs@fp:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x10
   504  000011                     	ds	1
   505  000012                     ___awdiv@quotient:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x11
   509  000012                     	ds	1
   510  000013                     fputs@c:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x12
   514  000013                     	ds	1
   515  000014                     setMotorPWM@m:
   516                           	opt stack 0
   517  000014                     fputs@i:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x13
   521  000014                     	ds	2
   522  000016                     ??_setMotorPWM:
   523  000016                     ?_pad:
   524                           	opt stack 0
   525  000016                     ___aodiv@counter:
   526                           	opt stack 0
   527  000016                     ___aomod@counter:
   528                           	opt stack 0
   529  000016                     ___lomod@counter:
   530                           	opt stack 0
   531  000016                     pad@fp:
   532                           	opt stack 0
   533  000016                     ___lodiv@quotient:
   534                           	opt stack 0
   535                           
   536                           ; 8 bytes @ 0x15
   537  000016                     	ds	1
   538  000017                     ___aodiv@sign:
   539                           	opt stack 0
   540  000017                     ___aomod@sign:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x16
   544  000017                     	ds	1
   545  000018                     ?_abs:
   546                           	opt stack 0
   547  000018                     pad@buf:
   548                           	opt stack 0
   549  000018                     abs@a:
   550                           	opt stack 0
   551  000018                     ___aodiv@quotient:
   552                           	opt stack 0
   553                           
   554                           ; 8 bytes @ 0x17
   555  000018                     	ds	1
   556  000019                     setMotorPWM@PWMduty:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x18
   560  000019                     	ds	1
   561  00001A                     ??_abs:
   562  00001A                     pad@p:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x19
   566  00001A                     	ds	1
   567  00001B                     stop@mL:
   568                           	opt stack 0
   569  00001B                     turnLeft@mL:
   570                           	opt stack 0
   571  00001B                     turnRight@mL:
   572                           	opt stack 0
   573  00001B                     turnRightSlow@mL:
   574                           	opt stack 0
   575  00001B                     forwards@mL:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x1A
   579  00001B                     	ds	1
   580  00001C                     ??_pad:
   581                           
   582                           ; 1 bytes @ 0x1B
   583  00001C                     	ds	1
   584  00001D                     stop@mR:
   585                           	opt stack 0
   586  00001D                     turnLeft@mR:
   587                           	opt stack 0
   588  00001D                     turnRight@mR:
   589                           	opt stack 0
   590  00001D                     turnRightSlow@mR:
   591                           	opt stack 0
   592  00001D                     forwards@mR:
   593                           	opt stack 0
   594  00001D                     pad@i:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x1C
   598  00001D                     	ds	1
   599  00001E                     ___lodiv@counter:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x1D
   603  00001E                     	ds	1
   604  00001F                     ??_stop:
   605  00001F                     ??_turnLeft:
   606  00001F                     ??_turnRight:
   607  00001F                     ??_forwards:
   608  00001F                     ??_turnRightSlow:
   609  00001F                     pad@w:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x1E
   613  00001F                     	ds	2
   614  000021                     ?_dtoa:
   615                           	opt stack 0
   616  000021                     ?_utoa:
   617                           	opt stack 0
   618  000021                     dtoa@fp:
   619                           	opt stack 0
   620  000021                     utoa@fp:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x20
   624  000021                     	ds	2
   625  000023                     dtoa@d:
   626                           	opt stack 0
   627  000023                     utoa@d:
   628                           	opt stack 0
   629                           
   630                           ; 8 bytes @ 0x22
   631  000023                     	ds	8
   632  00002B                     ??_dtoa:
   633  00002B                     ??_utoa:
   634                           
   635                           ; 1 bytes @ 0x2A
   636  00002B                     	ds	8
   637  000033                     _dtoa$1257:
   638                           	opt stack 0
   639  000033                     utoa@p:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x32
   643  000033                     	ds	2
   644  000035                     dtoa@p:
   645                           	opt stack 0
   646  000035                     utoa@w:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x34
   650  000035                     	ds	2
   651  000037                     dtoa@w:
   652                           	opt stack 0
   653  000037                     utoa@n:
   654                           	opt stack 0
   655                           
   656                           ; 8 bytes @ 0x36
   657  000037                     	ds	2
   658  000039                     dtoa@s:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x38
   662  000039                     	ds	2
   663  00003B                     dtoa@n:
   664                           	opt stack 0
   665                           
   666                           ; 8 bytes @ 0x3A
   667  00003B                     	ds	4
   668  00003F                     utoa@i:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x3E
   672  00003F                     	ds	4
   673  000043                     dtoa@i:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x42
   677  000043                     	ds	2
   678  000045                     ?_vfpfcnvrt:
   679                           	opt stack 0
   680  000045                     vfpfcnvrt@fp:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x44
   684  000045                     	ds	2
   685  000047                     vfpfcnvrt@fmt:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x46
   689  000047                     	ds	2
   690  000049                     vfpfcnvrt@ap:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x48
   694  000049                     	ds	2
   695  00004B                     ??_vfpfcnvrt:
   696                           
   697                           ; 1 bytes @ 0x4A
   698  00004B                     	ds	4
   699  00004F                     ?_vfprintf:
   700                           	opt stack 0
   701  00004F                     vfprintf@fp:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x4E
   705  00004F                     	ds	2
   706  000051                     vfprintf@fmt:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x50
   710  000051                     	ds	2
   711  000053                     vfprintf@ap:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x52
   715  000053                     	ds	2
   716  000055                     tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           
   721                           ; 1 bytes @ 0x54
   722 ;;
   723 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   724 ;;
   725 ;; *************** function _main *****************
   726 ;; Defined at:
   727 ;;		line 51 in file "main.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  threshold       2   60[BANK0 ] int 
   732 ;;  diff            2   58[BANK0 ] int 
   733 ;;  direction       2   62[BANK0 ] int 
   734 ;;  mR              9   81[BANK0 ] struct Motor
   735 ;;  mL              9   72[BANK0 ] struct Motor
   736 ;;  Values          8   64[BANK0 ] struct Sensor_ir
   737 ;;  PWMcycle        2   56[BANK0 ] int 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  2  135[None  ] int 
   740 ;; Registers used:
   741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   747 ;;      Params:         0       0       0       0
   748 ;;      Locals:         0      34       0       0
   749 ;;      Temps:          0       3       0       0
   750 ;;      Totals:         0      37       0       0
   751 ;;Total ram usage:       37 bytes
   752 ;; Hardware stack levels required when called:   10
   753 ;; This function calls:
   754 ;;		_LCD_init
   755 ;;		_forwards
   756 ;;		_initPWM
   757 ;;		_init_RFID
   758 ;;		_init_TIMER5
   759 ;;		_init_capture
   760 ;;		_interrupt_EUSART
   761 ;;		_print_IR
   762 ;;		_print_RFID
   763 ;;		_read_IR
   764 ;;		_stop
   765 ;;		_turnLeft
   766 ;;		_turnRight
   767 ;;		_turnRightSlow
   768 ;; This function is called by:
   769 ;;		Startup code after reset
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text0
   774  000334                     __ptext0:
   775                           	opt stack 0
   776  000334                     _main:
   777                           	opt stack 21
   778                           
   779                           ;main.c: 52:     ANSEL0 = 0;
   780                           
   781                           ;incstack = 0
   782  000334  0E00               	movlw	0
   783  000336  6EB8               	movwf	4024,c	;volatile
   784                           
   785                           ;main.c: 53:     ANSEL1 = 0;
   786  000338  0E00               	movlw	0
   787  00033A  6EB9               	movwf	4025,c	;volatile
   788                           
   789                           ;main.c: 54:     OSCCON = 0x72;
   790  00033C  0E72               	movlw	114
   791  00033E  6ED3               	movwf	4051,c	;volatile
   792  000340  A4D3               	btfss	4051,2,c	;volatile
   793  000342  D7FE               	goto	l137
   794                           
   795                           ;main.c: 57:     LCD_init();
   796  000344  ECED  F007         	call	_LCD_init	;wreg free
   797                           
   798                           ;main.c: 59:     init_TIMER5();
   799  000348  ECE0  F00D         	call	_init_TIMER5	;wreg free
   800                           
   801                           ;main.c: 60:     initPWM();
   802  00034C  ECB6  F00D         	call	_initPWM	;wreg free
   803                           
   804                           ;main.c: 61:     init_capture();
   805  000350  ECD3  F00D         	call	_init_capture	;wreg free
   806                           
   807                           ;main.c: 62:     init_RFID();
   808  000354  ECED  F00D         	call	_init_RFID	;wreg free
   809                           
   810                           ;main.c: 66:     interrupt_EUSART();
   811  000358  EC05  F00E         	call	_interrupt_EUSART	;wreg free
   812                           
   813                           ;main.c: 67:     struct Sensor_ir Values;;main.c: 68:     struct Motor mL, mR;;main.c: 6
      +                          9:     int PWMcycle = 199;
   814  00035C  0E00               	movlw	0
   815  00035E  0100               	movlb	0	; () banked
   816  000360  6F99               	movwf	(main@PWMcycle+1)& (0+255),b
   817  000362  0EC7               	movlw	199
   818  000364  6F98               	movwf	main@PWMcycle& (0+255),b
   819                           
   820                           ; BSR set to: 0
   821                           ;main.c: 70:     mL.power = 0;
   822  000366  0E00               	movlw	0
   823  000368  6FA8               	movwf	main@mL& (0+255),b
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 71:     mL.direction = 1;
   827  00036A  0E01               	movlw	1
   828  00036C  6FA9               	movwf	(main@mL+1)& (0+255),b
   829                           
   830                           ; BSR set to: 0
   831                           ;main.c: 72:     mL.duty_low = (unsigned char *) (&PDC0L);
   832  00036E  0E79               	movlw	121
   833  000370  6FAA               	movwf	(main@mL+2)& (0+255),b
   834  000372  0E0F               	movlw	15
   835  000374  6FAB               	movwf	(main@mL+3)& (0+255),b
   836                           
   837                           ; BSR set to: 0
   838                           ;main.c: 73:     mL.duty_high = (unsigned char *) (&PDC0H);
   839  000376  0E78               	movlw	120
   840  000378  6FAC               	movwf	(main@mL+4)& (0+255),b
   841  00037A  0E0F               	movlw	15
   842  00037C  6FAD               	movwf	(main@mL+5)& (0+255),b
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 74:     mL.dir_pin = 0;
   846  00037E  0E00               	movlw	0
   847  000380  6FAE               	movwf	(main@mL+6)& (0+255),b
   848                           
   849                           ; BSR set to: 0
   850                           ;main.c: 75:     mL.period = PWMcycle;
   851  000382  C098  F0AF         	movff	main@PWMcycle,main@mL+7
   852  000386  C099  F0B0         	movff	main@PWMcycle+1,main@mL+8
   853                           
   854                           ; BSR set to: 0
   855                           ;main.c: 78:     mR.power = 0;
   856  00038A  0E00               	movlw	0
   857  00038C  6FB1               	movwf	main@mR& (0+255),b
   858                           
   859                           ; BSR set to: 0
   860                           ;main.c: 79:     mR.direction = 1;
   861  00038E  0E01               	movlw	1
   862  000390  6FB2               	movwf	(main@mR+1)& (0+255),b
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 80:     mR.duty_low = (unsigned char *) (&PDC1L);
   866  000392  0E77               	movlw	119
   867  000394  6FB3               	movwf	(main@mR+2)& (0+255),b
   868  000396  0E0F               	movlw	15
   869  000398  6FB4               	movwf	(main@mR+3)& (0+255),b
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 81:     mR.duty_high = (unsigned char *) (&PDC1H);
   873  00039A  0E76               	movlw	118
   874  00039C  6FB5               	movwf	(main@mR+4)& (0+255),b
   875  00039E  0E0F               	movlw	15
   876  0003A0  6FB6               	movwf	(main@mR+5)& (0+255),b
   877                           
   878                           ; BSR set to: 0
   879                           ;main.c: 82:     mR.dir_pin = 2;
   880  0003A2  0E02               	movlw	2
   881  0003A4  6FB7               	movwf	(main@mR+6)& (0+255),b
   882                           
   883                           ; BSR set to: 0
   884                           ;main.c: 83:     mR.period = PWMcycle;
   885  0003A6  C098  F0B8         	movff	main@PWMcycle,main@mR+7
   886  0003AA  C099  F0B9         	movff	main@PWMcycle+1,main@mR+8
   887                           
   888                           ; BSR set to: 0
   889                           
   890                           ;main.c: 85:     while (1) {
   891  0003AE  D0BF               	goto	l151
   892  0003B0                     
   893                           ; BSR set to: 0
   894                           ;main.c: 91:             read_IR(&Values);
   895                           
   896                           ; BSR set to: 0
   897  0003B0  0EA0               	movlw	low main@Values
   898  0003B2  6E06               	movwf	read_IR@Values,c
   899  0003B4  0E00               	movlw	high main@Values
   900  0003B6  6E07               	movwf	read_IR@Values+1,c
   901  0003B8  EC2A  F009         	call	_read_IR	;wreg free
   902                           
   903                           ;main.c: 95:             print_IR(&Values);
   904  0003BC  0EA0               	movlw	low main@Values
   905  0003BE  0100               	movlb	0	; () banked
   906  0003C0  6F82               	movwf	print_IR@Values& (0+255),b
   907  0003C2  0E00               	movlw	high main@Values
   908  0003C4  6F83               	movwf	(print_IR@Values+1)& (0+255),b
   909  0003C6  ECC9  F008         	call	_print_IR	;wreg free
   910                           
   911                           ;main.c: 96:             int threshold = 50;
   912  0003CA  0E00               	movlw	0
   913  0003CC  0100               	movlb	0	; () banked
   914  0003CE  6F9D               	movwf	(main@threshold+1)& (0+255),b
   915  0003D0  0E32               	movlw	50
   916  0003D2  6F9C               	movwf	main@threshold& (0+255),b
   917                           
   918                           ; BSR set to: 0
   919                           ;main.c: 97:             int diff = Values.left - Values.right;
   920  0003D4  EE20  F0A2         	lfsr	2,main@Values+2
   921  0003D8  CFDE F095          	movff	postinc2,??_main
   922  0003DC  CFDD F096          	movff	postdec2,??_main+1
   923  0003E0  1F95               	comf	??_main& (0+255),f,b
   924  0003E2  1F96               	comf	(??_main+1)& (0+255),f,b
   925  0003E4  4B95               	infsnz	??_main& (0+255),f,b
   926  0003E6  2B96               	incf	(??_main+1)& (0+255),f,b
   927  0003E8  51A0               	movf	main@Values& (0+255),w,b
   928  0003EA  2595               	addwf	??_main& (0+255),w,b
   929  0003EC  6F9A               	movwf	main@diff& (0+255),b
   930  0003EE  51A1               	movf	(main@Values+1)& (0+255),w,b
   931  0003F0  2196               	addwfc	(??_main+1)& (0+255),w,b
   932  0003F2  6F9B               	movwf	(main@diff+1)& (0+255),b
   933                           
   934                           ; BSR set to: 0
   935                           ;main.c: 98:             if (Values.left > 256 | Values.right > 256) {
   936  0003F4  05A0               	decf	main@Values& (0+255),w,b
   937  0003F6  0E01               	movlw	1
   938  0003F8  59A1               	subwfb	(main@Values+1)& (0+255),w,b
   939  0003FA  B0D8               	btfsc	status,0,c
   940  0003FC  D005               	goto	u3110
   941                           
   942                           ; BSR set to: 0
   943  0003FE  05A2               	decf	(main@Values+2)& (0+255),w,b
   944  000400  0E01               	movlw	1
   945  000402  59A3               	subwfb	(main@Values+3)& (0+255),w,b
   946  000404  A0D8               	btfss	status,0,c
   947  000406  D004               	goto	l142
   948  000408                     u3110:
   949                           
   950                           ; BSR set to: 0
   951                           ;main.c: 99:                 threshold = 50;
   952                           
   953                           ; BSR set to: 0
   954  000408  0E00               	movlw	0
   955  00040A  6F9D               	movwf	(main@threshold+1)& (0+255),b
   956  00040C  0E32               	movlw	50
   957  00040E  D003               	goto	L2
   958  000410                     l142:
   959                           
   960                           ; BSR set to: 0
   961                           ;main.c: 101:                 threshold = 20;
   962                           
   963                           ; BSR set to: 0
   964  000410  0E00               	movlw	0
   965  000412  6F9D               	movwf	(main@threshold+1)& (0+255),b
   966  000414  0E14               	movlw	20
   967  000416                     L2:
   968  000416  6F9C               	movwf	main@threshold& (0+255),b
   969                           
   970                           ; BSR set to: 0
   971                           ;main.c: 104:             if (diff < -threshold) {
   972                           
   973                           ; BSR set to: 0
   974                           
   975                           ;main.c: 102:             }
   976  000418  C09C  F095         	movff	main@threshold,??_main
   977  00041C  C09D  F096         	movff	main@threshold+1,??_main+1
   978  000420  1F95               	comf	??_main& (0+255),f,b
   979  000422  1F96               	comf	(??_main+1)& (0+255),f,b
   980  000424  4B95               	infsnz	??_main& (0+255),f,b
   981  000426  2B96               	incf	(??_main+1)& (0+255),f,b
   982  000428  5195               	movf	??_main& (0+255),w,b
   983  00042A  5D9A               	subwf	main@diff& (0+255),w,b
   984  00042C  519B               	movf	(main@diff+1)& (0+255),w,b
   985  00042E  0A80               	xorlw	128
   986  000430  6F97               	movwf	(??_main+2)& (0+255),b
   987  000432  5196               	movf	(??_main+1)& (0+255),w,b
   988  000434  0A80               	xorlw	128
   989  000436  5997               	subwfb	(??_main+2)& (0+255),w,b
   990  000438  B0D8               	btfsc	status,0,c
   991  00043A  D026               	goto	l146
   992                           
   993                           ; BSR set to: 0
   994                           ;main.c: 106:                 stop(&mL, &mR);
   995  00043C  0EA8               	movlw	low main@mL
   996  00043E  6E1B               	movwf	stop@mL,c
   997  000440  0E00               	movlw	high main@mL
   998  000442  6E1C               	movwf	stop@mL+1,c
   999  000444  0EB1               	movlw	low main@mR
  1000  000446  6E1D               	movwf	stop@mR,c
  1001  000448  0E00               	movlw	high main@mR
  1002  00044A  6E1E               	movwf	stop@mR+1,c
  1003  00044C  EC64  F00C         	call	_stop	;wreg free
  1004                           
  1005                           ;main.c: 107:                 turnLeft(&mL, &mR);
  1006  000450  0EA8               	movlw	low main@mL
  1007  000452  6E1B               	movwf	turnLeft@mL,c
  1008  000454  0E00               	movlw	high main@mL
  1009  000456  6E1C               	movwf	turnLeft@mL+1,c
  1010  000458  0EB1               	movlw	low main@mR
  1011  00045A  6E1D               	movwf	turnLeft@mR,c
  1012  00045C  0E00               	movlw	high main@mR
  1013  00045E  6E1E               	movwf	turnLeft@mR+1,c
  1014  000460  ECC7  F00A         	call	_turnLeft	;wreg free
  1015                           
  1016                           ;main.c: 108:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  1017  000464  0E02               	movlw	2
  1018  000466  0100               	movlb	0	; () banked
  1019  000468  6F96               	movwf	(??_main+1)& (0+255),b
  1020  00046A  0E04               	movlw	4
  1021  00046C  6F95               	movwf	??_main& (0+255),b
  1022  00046E  0EBA               	movlw	186
  1023  000470                     u3267:
  1024  000470  2EE8               	decfsz	wreg,f,c
  1025  000472  D7FE               	bra	u3267
  1026  000474  2F95               	decfsz	??_main& (0+255),f,b
  1027  000476  D7FC               	bra	u3267
  1028  000478  2F96               	decfsz	(??_main+1)& (0+255),f,b
  1029  00047A  D7FA               	bra	u3267
  1030  00047C  F000               	nop	
  1031                           
  1032                           ;main.c: 112:                 direction = 1;
  1033  00047E  0E00               	movlw	0
  1034  000480  0100               	movlb	0	; () banked
  1035  000482  6F9F               	movwf	(main@direction+1)& (0+255),b
  1036  000484  0E01               	movlw	1
  1037  000486  D057               	goto	L3
  1038  000488                     l146:
  1039                           
  1040                           ; BSR set to: 0
  1041                           
  1042                           ; BSR set to: 0
  1043  000488  519A               	movf	main@diff& (0+255),w,b
  1044  00048A  5D9C               	subwf	main@threshold& (0+255),w,b
  1045  00048C  519D               	movf	(main@threshold+1)& (0+255),w,b
  1046  00048E  0A80               	xorlw	128
  1047  000490  6F95               	movwf	??_main& (0+255),b
  1048  000492  519B               	movf	(main@diff+1)& (0+255),w,b
  1049  000494  0A80               	xorlw	128
  1050  000496  5995               	subwfb	??_main& (0+255),w,b
  1051  000498  B0D8               	btfsc	status,0,c
  1052  00049A  D025               	goto	l148
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;main.c: 116:                 stop(&mL, &mR);
  1056  00049C  0EA8               	movlw	low main@mL
  1057  00049E  6E1B               	movwf	stop@mL,c
  1058  0004A0  0E00               	movlw	high main@mL
  1059  0004A2  6E1C               	movwf	stop@mL+1,c
  1060  0004A4  0EB1               	movlw	low main@mR
  1061  0004A6  6E1D               	movwf	stop@mR,c
  1062  0004A8  0E00               	movlw	high main@mR
  1063  0004AA  6E1E               	movwf	stop@mR+1,c
  1064  0004AC  EC64  F00C         	call	_stop	;wreg free
  1065                           
  1066                           ;main.c: 117:                 turnRight(&mL, &mR);
  1067  0004B0  0EA8               	movlw	low main@mL
  1068  0004B2  6E1B               	movwf	turnRight@mL,c
  1069  0004B4  0E00               	movlw	high main@mL
  1070  0004B6  6E1C               	movwf	turnRight@mL+1,c
  1071  0004B8  0EB1               	movlw	low main@mR
  1072  0004BA  6E1D               	movwf	turnRight@mR,c
  1073  0004BC  0E00               	movlw	high main@mR
  1074  0004BE  6E1E               	movwf	turnRight@mR+1,c
  1075  0004C0  EC7C  F00A         	call	_turnRight	;wreg free
  1076                           
  1077                           ;main.c: 118:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  1078  0004C4  0E02               	movlw	2
  1079  0004C6  0100               	movlb	0	; () banked
  1080  0004C8  6F96               	movwf	(??_main+1)& (0+255),b
  1081  0004CA  0E04               	movlw	4
  1082  0004CC  6F95               	movwf	??_main& (0+255),b
  1083  0004CE  0EBA               	movlw	186
  1084  0004D0                     u3277:
  1085  0004D0  2EE8               	decfsz	wreg,f,c
  1086  0004D2  D7FE               	bra	u3277
  1087  0004D4  2F95               	decfsz	??_main& (0+255),f,b
  1088  0004D6  D7FC               	bra	u3277
  1089  0004D8  2F96               	decfsz	(??_main+1)& (0+255),f,b
  1090  0004DA  D7FA               	bra	u3277
  1091  0004DC  F000               	nop	
  1092                           
  1093                           ;main.c: 121:                 direction = -1;
  1094  0004DE  0100               	movlb	0	; () banked
  1095  0004E0  699E               	setf	main@direction& (0+255),b
  1096  0004E2  699F               	setf	(main@direction+1)& (0+255),b
  1097                           
  1098                           ;main.c: 122:             } else {
  1099  0004E4  D052               	goto	l153
  1100  0004E6                     l148:
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;main.c: 123:                 if ((Values.left > 100) && (Values.right > 100)) {
  1104                           
  1105                           ; BSR set to: 0
  1106  0004E6  51A1               	movf	(main@Values+1)& (0+255),w,b
  1107  0004E8  E104               	bnz	u3140
  1108  0004EA  0E65               	movlw	101
  1109  0004EC  5DA0               	subwf	main@Values& (0+255),w,b
  1110  0004EE  A0D8               	btfss	status,0,c
  1111  0004F0  D024               	goto	l150
  1112  0004F2                     u3140:
  1113                           
  1114                           ; BSR set to: 0
  1115  0004F2  51A3               	movf	(main@Values+3)& (0+255),w,b
  1116  0004F4  E104               	bnz	u3150
  1117  0004F6  0E65               	movlw	101
  1118  0004F8  5DA2               	subwf	(main@Values+2)& (0+255),w,b
  1119  0004FA  A0D8               	btfss	status,0,c
  1120  0004FC  D01E               	goto	l150
  1121  0004FE                     u3150:
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;main.c: 124:                     if (direction != 0) {
  1125  0004FE  519E               	movf	main@direction& (0+255),w,b
  1126  000500  119F               	iorwf	(main@direction+1)& (0+255),w,b
  1127  000502  B4D8               	btfsc	status,2,c
  1128  000504  D014               	goto	l151
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;main.c: 125:                         stop(&mL, &mR);
  1132  000506  0EA8               	movlw	low main@mL
  1133  000508  6E1B               	movwf	stop@mL,c
  1134  00050A  0E00               	movlw	high main@mL
  1135  00050C  6E1C               	movwf	stop@mL+1,c
  1136  00050E  0EB1               	movlw	low main@mR
  1137  000510  6E1D               	movwf	stop@mR,c
  1138  000512  0E00               	movlw	high main@mR
  1139  000514  6E1E               	movwf	stop@mR+1,c
  1140  000516  EC64  F00C         	call	_stop	;wreg free
  1141                           
  1142                           ;main.c: 126:                         forwards(&mL, &mR);
  1143  00051A  0EA8               	movlw	low main@mL
  1144  00051C  6E1B               	movwf	forwards@mL,c
  1145  00051E  0E00               	movlw	high main@mL
  1146  000520  6E1C               	movwf	forwards@mL+1,c
  1147  000522  0EB1               	movlw	low main@mR
  1148  000524  6E1D               	movwf	forwards@mR,c
  1149  000526  0E00               	movlw	high main@mR
  1150  000528  6E1E               	movwf	forwards@mR+1,c
  1151  00052A  EC5D  F00B         	call	_forwards	;wreg free
  1152  00052E                     l151:
  1153                           
  1154                           ;main.c: 130:                     direction = 0;
  1155  00052E  0E00               	movlw	0
  1156  000530  0100               	movlb	0	; () banked
  1157  000532  6F9F               	movwf	(main@direction+1)& (0+255),b
  1158  000534  0E00               	movlw	0
  1159  000536                     L3:
  1160  000536  6F9E               	movwf	main@direction& (0+255),b
  1161                           
  1162                           ;main.c: 131:                 } else {
  1163  000538  D028               	goto	l153
  1164  00053A                     l150:
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;main.c: 132:                     if (direction != 1) {
  1168                           
  1169                           ; BSR set to: 0
  1170  00053A  059E               	decf	main@direction& (0+255),w,b
  1171  00053C  119F               	iorwf	(main@direction+1)& (0+255),w,b
  1172  00053E  B4D8               	btfsc	status,2,c
  1173  000540  D024               	goto	l153
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;main.c: 134:                         turnRightSlow(&mL, &mR);
  1177  000542  0EA8               	movlw	low main@mL
  1178  000544  6E1B               	movwf	turnRightSlow@mL,c
  1179  000546  0E00               	movlw	high main@mL
  1180  000548  6E1C               	movwf	turnRightSlow@mL+1,c
  1181  00054A  0EB1               	movlw	low main@mR
  1182  00054C  6E1D               	movwf	turnRightSlow@mR,c
  1183  00054E  0E00               	movlw	high main@mR
  1184  000550  6E1E               	movwf	turnRightSlow@mR+1,c
  1185  000552  EC31  F00A         	call	_turnRightSlow	;wreg free
  1186                           
  1187                           ;main.c: 135:                         stop(&mL, &mR);
  1188  000556  0EA8               	movlw	low main@mL
  1189  000558  6E1B               	movwf	stop@mL,c
  1190  00055A  0E00               	movlw	high main@mL
  1191  00055C  6E1C               	movwf	stop@mL+1,c
  1192  00055E  0EB1               	movlw	low main@mR
  1193  000560  6E1D               	movwf	stop@mR,c
  1194  000562  0E00               	movlw	high main@mR
  1195  000564  6E1E               	movwf	stop@mR+1,c
  1196  000566  EC64  F00C         	call	_stop	;wreg free
  1197                           
  1198                           ;main.c: 136:                         direction = -1;
  1199  00056A  0100               	movlb	0	; () banked
  1200  00056C  699E               	setf	main@direction& (0+255),b
  1201  00056E  699F               	setf	(main@direction+1)& (0+255),b
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;main.c: 137:                         _delay((unsigned long)((100)*(8000000/4000.0)));
  1205  000570  0E02               	movlw	2
  1206  000572  0100               	movlb	0	; () banked
  1207  000574  6F96               	movwf	(??_main+1)& (0+255),b
  1208  000576  0E04               	movlw	4
  1209  000578  6F95               	movwf	??_main& (0+255),b
  1210  00057A  0EBA               	movlw	186
  1211  00057C                     u3287:
  1212  00057C  2EE8               	decfsz	wreg,f,c
  1213  00057E  D7FE               	bra	u3287
  1214  000580  2F95               	decfsz	??_main& (0+255),f,b
  1215  000582  D7FC               	bra	u3287
  1216  000584  2F96               	decfsz	(??_main+1)& (0+255),f,b
  1217  000586  D7FA               	bra	u3287
  1218  000588  F000               	nop	
  1219  00058A                     l153:
  1220                           
  1221                           ;main.c: 90:         while (card_read == 0) {
  1222                           
  1223                           ;main.c: 145:         }
  1224                           
  1225                           ;main.c: 142:             }
  1226                           
  1227                           ;main.c: 141:                 }
  1228  00058A  0100               	movlb	0	; () banked
  1229  00058C  51BE               	movf	_card_read& (0+255),w,b	;volatile
  1230  00058E  B4D8               	btfsc	status,2,c
  1231  000590  D70F               	goto	l141
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 150:         if (card_read == 1) {
  1235                           
  1236                           ; BSR set to: 0
  1237  000592  05BE               	decf	_card_read& (0+255),w,b	;volatile
  1238  000594  A4D8               	btfss	status,2,c
  1239  000596  D7CB               	goto	l151
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;main.c: 152:             print_RFID(&string_rfid[0], &string_rfid[0]);
  1243  000598  0EDF               	movlw	low _string_rfid
  1244  00059A  6E0B               	movwf	print_RFID@pa,c
  1245  00059C  0E00               	movlw	high _string_rfid
  1246  00059E  6E0C               	movwf	print_RFID@pa+1,c
  1247  0005A0  0EDF               	movlw	low _string_rfid
  1248  0005A2  6E0D               	movwf	print_RFID@dis,c
  1249  0005A4  0E00               	movlw	high _string_rfid
  1250  0005A6  6E0E               	movwf	print_RFID@dis+1,c
  1251  0005A8  ECEA  F00B         	call	_print_RFID	;wreg free
  1252                           
  1253                           ;main.c: 153:             _delay((unsigned long)((10)*(8000000/4000.0)));
  1254  0005AC  0E1A               	movlw	26
  1255  0005AE  0100               	movlb	0	; () banked
  1256  0005B0  6F95               	movwf	??_main& (0+255),b
  1257  0005B2  0EF8               	movlw	248
  1258  0005B4                     u3297:
  1259  0005B4  2EE8               	decfsz	wreg,f,c
  1260  0005B6  D7FE               	bra	u3297
  1261  0005B8  2F95               	decfsz	??_main& (0+255),f,b
  1262  0005BA  D7FC               	bra	u3297
  1263  0005BC  F000               	nop	
  1264                           
  1265                           ;main.c: 154:             return 0;;	Return value of _main is never used
  1266  0005BE  EF3F  F000         	goto	start
  1267  0005C2                     __end_of_main:
  1268                           	opt stack 0
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           postinc0	equ	0xFEE
  1272                           wreg	equ	0xFE8
  1273                           postinc2	equ	0xFDE
  1274                           postdec2	equ	0xFDD
  1275                           status	equ	0xFD8
  1276                           
  1277 ;; *************** function _turnRightSlow *****************
  1278 ;; Defined at:
  1279 ;;		line 124 in file "motor.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  mL              2   26[COMRAM] PTR struct Motor
  1282 ;;		 -> main@mL(9), 
  1283 ;;  mR              2   28[COMRAM] PTR struct Motor
  1284 ;;		 -> main@mR(9), 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;		None
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1296 ;;      Params:         4       0       0       0
  1297 ;;      Locals:         0       0       0       0
  1298 ;;      Temps:          1       0       0       0
  1299 ;;      Totals:         5       0       0       0
  1300 ;;Total ram usage:        5 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; Hardware stack levels required when called:    3
  1303 ;; This function calls:
  1304 ;;		_setMotorPWM
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text1
  1311  001462                     __ptext1:
  1312                           	opt stack 0
  1313  001462                     _turnRightSlow:
  1314                           	opt stack 27
  1315                           
  1316                           ;motor.c: 127:     mL->direction = 1;
  1317                           
  1318                           ;incstack = 0
  1319  001462  EE20 F001          	lfsr	2,1
  1320  001466  501B               	movf	turnRightSlow@mL,w,c
  1321  001468  26D9               	addwf	fsr2l,f,c
  1322  00146A  501C               	movf	turnRightSlow@mL+1,w,c
  1323  00146C  22DA               	addwfc	fsr2h,f,c
  1324  00146E  0E01               	movlw	1
  1325  001470  6EDF               	movwf	indf2,c
  1326                           
  1327                           ;motor.c: 128:     mR->direction = 0;
  1328  001472  EE20 F001          	lfsr	2,1
  1329  001476  501D               	movf	turnRightSlow@mR,w,c
  1330  001478  26D9               	addwf	fsr2l,f,c
  1331  00147A  501E               	movf	turnRightSlow@mR+1,w,c
  1332  00147C  22DA               	addwfc	fsr2h,f,c
  1333  00147E  0E00               	movlw	0
  1334  001480  6EDF               	movwf	indf2,c
  1335                           
  1336                           ;motor.c: 129:     while (mL->power < 50 || mR->power < 50) {
  1337  001482  D02B               	goto	l267
  1338  001484                     
  1339                           ;motor.c: 130:         if (mL->power < 50) {
  1340  001484  C01B  FFD9         	movff	turnRightSlow@mL,fsr2l
  1341  001488  C01C  FFDA         	movff	turnRightSlow@mL+1,fsr2h
  1342  00148C  0E32               	movlw	50
  1343  00148E  60DF               	cpfslt	indf2,c
  1344  001490  D005               	goto	l269
  1345                           
  1346                           ;motor.c: 131:             mL->power++;
  1347  001492  C01B  FFD9         	movff	turnRightSlow@mL,fsr2l
  1348  001496  C01C  FFDA         	movff	turnRightSlow@mL+1,fsr2h
  1349  00149A  2ADF               	incf	indf2,f,c
  1350  00149C                     l269:
  1351                           
  1352                           ;motor.c: 133:         if (mR->power < 50
  1353  00149C  C01D  FFD9         	movff	turnRightSlow@mR,fsr2l
  1354  0014A0  C01E  FFDA         	movff	turnRightSlow@mR+1,fsr2h
  1355  0014A4  0E32               	movlw	50
  1356  0014A6  60DF               	cpfslt	indf2,c
  1357  0014A8  D005               	goto	l270
  1358                           
  1359                           ;motor.c: 134:                 ) {;motor.c: 135:             mR->power++;
  1360  0014AA  C01D  FFD9         	movff	turnRightSlow@mR,fsr2l
  1361  0014AE  C01E  FFDA         	movff	turnRightSlow@mR+1,fsr2h
  1362  0014B2  2ADF               	incf	indf2,f,c
  1363  0014B4                     l270:
  1364                           
  1365                           ;motor.c: 137:         setMotorPWM(mL);
  1366  0014B4  C01B  F014         	movff	turnRightSlow@mL,setMotorPWM@m
  1367  0014B8  C01C  F015         	movff	turnRightSlow@mL+1,setMotorPWM@m+1
  1368  0014BC  ECF6  F005         	call	_setMotorPWM	;wreg free
  1369                           
  1370                           ;motor.c: 138:         setMotorPWM(mR);
  1371  0014C0  C01D  F014         	movff	turnRightSlow@mR,setMotorPWM@m
  1372  0014C4  C01E  F015         	movff	turnRightSlow@mR+1,setMotorPWM@m+1
  1373  0014C8  ECF6  F005         	call	_setMotorPWM	;wreg free
  1374                           
  1375                           ;motor.c: 139:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1376  0014CC  0E0D               	movlw	13
  1377  0014CE  6E1F               	movwf	??_turnRightSlow& (0+255),c
  1378  0014D0  0EFC               	movlw	252
  1379  0014D2                     u3307:
  1380  0014D2  2EE8               	decfsz	wreg,f,c
  1381  0014D4  D7FE               	bra	u3307
  1382  0014D6  2E1F               	decfsz	??_turnRightSlow& (0+255),f,c
  1383  0014D8  D7FC               	bra	u3307
  1384  0014DA                     l267:
  1385                           
  1386                           ;motor.c: 129:     while (mL->power < 50 || mR->power < 50) {
  1387  0014DA  C01B  FFD9         	movff	turnRightSlow@mL,fsr2l
  1388  0014DE  C01C  FFDA         	movff	turnRightSlow@mL+1,fsr2h
  1389  0014E2  0E31               	movlw	49
  1390  0014E4  64DF               	cpfsgt	indf2,c
  1391  0014E6  D7CE               	goto	l268
  1392  0014E8  C01D  FFD9         	movff	turnRightSlow@mR,fsr2l
  1393  0014EC  C01E  FFDA         	movff	turnRightSlow@mR+1,fsr2h
  1394  0014F0  0E31               	movlw	49
  1395  0014F2  64DF               	cpfsgt	indf2,c
  1396  0014F4  D7C7               	goto	l268
  1397  0014F6  0012               	return	
  1398  0014F8                     __end_of_turnRightSlow:
  1399                           	opt stack 0
  1400                           tblptru	equ	0xFF8
  1401                           tblptrh	equ	0xFF7
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           indf2	equ	0xFDF
  1405                           postinc2	equ	0xFDE
  1406                           postdec2	equ	0xFDD
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8
  1410                           
  1411 ;; *************** function _turnRight *****************
  1412 ;; Defined at:
  1413 ;;		line 107 in file "motor.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;  mL              2   26[COMRAM] PTR struct Motor
  1416 ;;		 -> main@mL(9), 
  1417 ;;  mR              2   28[COMRAM] PTR struct Motor
  1418 ;;		 -> main@mR(9), 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1430 ;;      Params:         4       0       0       0
  1431 ;;      Locals:         0       0       0       0
  1432 ;;      Temps:          1       0       0       0
  1433 ;;      Totals:         5       0       0       0
  1434 ;;Total ram usage:        5 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    3
  1437 ;; This function calls:
  1438 ;;		_setMotorPWM
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text2
  1445  0014F8                     __ptext2:
  1446                           	opt stack 0
  1447  0014F8                     _turnRight:
  1448                           	opt stack 27
  1449                           
  1450                           ;motor.c: 110:     mL->direction = 1;
  1451                           
  1452                           ;incstack = 0
  1453  0014F8  EE20 F001          	lfsr	2,1
  1454  0014FC  501B               	movf	turnRight@mL,w,c
  1455  0014FE  26D9               	addwf	fsr2l,f,c
  1456  001500  501C               	movf	turnRight@mL+1,w,c
  1457  001502  22DA               	addwfc	fsr2h,f,c
  1458  001504  0E01               	movlw	1
  1459  001506  6EDF               	movwf	indf2,c
  1460                           
  1461                           ;motor.c: 111:     mR->direction = 0;
  1462  001508  EE20 F001          	lfsr	2,1
  1463  00150C  501D               	movf	turnRight@mR,w,c
  1464  00150E  26D9               	addwf	fsr2l,f,c
  1465  001510  501E               	movf	turnRight@mR+1,w,c
  1466  001512  22DA               	addwfc	fsr2h,f,c
  1467  001514  0E00               	movlw	0
  1468  001516  6EDF               	movwf	indf2,c
  1469                           
  1470                           ;motor.c: 112:     while (mL->power < 50 || mR->power < 50) {
  1471  001518  D02B               	goto	l259
  1472  00151A                     
  1473                           ;motor.c: 113:         if (mL->power < 50) {
  1474  00151A  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1475  00151E  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1476  001522  0E32               	movlw	50
  1477  001524  60DF               	cpfslt	indf2,c
  1478  001526  D005               	goto	l261
  1479                           
  1480                           ;motor.c: 114:             mL->power++;
  1481  001528  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1482  00152C  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1483  001530  2ADF               	incf	indf2,f,c
  1484  001532                     l261:
  1485                           
  1486                           ;motor.c: 116:         if (mR->power < 50) {
  1487  001532  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1488  001536  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1489  00153A  0E32               	movlw	50
  1490  00153C  60DF               	cpfslt	indf2,c
  1491  00153E  D005               	goto	l262
  1492                           
  1493                           ;motor.c: 117:             mR->power++;
  1494  001540  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1495  001544  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1496  001548  2ADF               	incf	indf2,f,c
  1497  00154A                     l262:
  1498                           
  1499                           ;motor.c: 119:         setMotorPWM(mL);
  1500  00154A  C01B  F014         	movff	turnRight@mL,setMotorPWM@m
  1501  00154E  C01C  F015         	movff	turnRight@mL+1,setMotorPWM@m+1
  1502  001552  ECF6  F005         	call	_setMotorPWM	;wreg free
  1503                           
  1504                           ;motor.c: 120:         setMotorPWM(mR);
  1505  001556  C01D  F014         	movff	turnRight@mR,setMotorPWM@m
  1506  00155A  C01E  F015         	movff	turnRight@mR+1,setMotorPWM@m+1
  1507  00155E  ECF6  F005         	call	_setMotorPWM	;wreg free
  1508                           
  1509                           ;motor.c: 121:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1510  001562  0E0D               	movlw	13
  1511  001564  6E1F               	movwf	??_turnRight& (0+255),c
  1512  001566  0EFC               	movlw	252
  1513  001568                     u3317:
  1514  001568  2EE8               	decfsz	wreg,f,c
  1515  00156A  D7FE               	bra	u3317
  1516  00156C  2E1F               	decfsz	??_turnRight& (0+255),f,c
  1517  00156E  D7FC               	bra	u3317
  1518  001570                     l259:
  1519                           
  1520                           ;motor.c: 112:     while (mL->power < 50 || mR->power < 50) {
  1521  001570  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1522  001574  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1523  001578  0E31               	movlw	49
  1524  00157A  64DF               	cpfsgt	indf2,c
  1525  00157C  D7CE               	goto	l260
  1526  00157E  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1527  001582  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1528  001586  0E31               	movlw	49
  1529  001588  64DF               	cpfsgt	indf2,c
  1530  00158A  D7C7               	goto	l260
  1531  00158C  0012               	return	
  1532  00158E                     __end_of_turnRight:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           indf2	equ	0xFDF
  1539                           postinc2	equ	0xFDE
  1540                           postdec2	equ	0xFDD
  1541                           fsr2h	equ	0xFDA
  1542                           fsr2l	equ	0xFD9
  1543                           status	equ	0xFD8
  1544                           
  1545 ;; *************** function _turnLeft *****************
  1546 ;; Defined at:
  1547 ;;		line 89 in file "motor.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  mL              2   26[COMRAM] PTR struct Motor
  1550 ;;		 -> main@mL(9), 
  1551 ;;  mR              2   28[COMRAM] PTR struct Motor
  1552 ;;		 -> main@mR(9), 
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;		None
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      void 
  1557 ;; Registers used:
  1558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1564 ;;      Params:         4       0       0       0
  1565 ;;      Locals:         0       0       0       0
  1566 ;;      Temps:          1       0       0       0
  1567 ;;      Totals:         5       0       0       0
  1568 ;;Total ram usage:        5 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    3
  1571 ;; This function calls:
  1572 ;;		_setMotorPWM
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text3
  1579  00158E                     __ptext3:
  1580                           	opt stack 0
  1581  00158E                     _turnLeft:
  1582                           	opt stack 27
  1583                           
  1584                           ;motor.c: 92:     mL->direction = 0;
  1585                           
  1586                           ;incstack = 0
  1587  00158E  EE20 F001          	lfsr	2,1
  1588  001592  501B               	movf	turnLeft@mL,w,c
  1589  001594  26D9               	addwf	fsr2l,f,c
  1590  001596  501C               	movf	turnLeft@mL+1,w,c
  1591  001598  22DA               	addwfc	fsr2h,f,c
  1592  00159A  0E00               	movlw	0
  1593  00159C  6EDF               	movwf	indf2,c
  1594                           
  1595                           ;motor.c: 93:     mR->direction = 1;
  1596  00159E  EE20 F001          	lfsr	2,1
  1597  0015A2  501D               	movf	turnLeft@mR,w,c
  1598  0015A4  26D9               	addwf	fsr2l,f,c
  1599  0015A6  501E               	movf	turnLeft@mR+1,w,c
  1600  0015A8  22DA               	addwfc	fsr2h,f,c
  1601  0015AA  0E01               	movlw	1
  1602  0015AC  6EDF               	movwf	indf2,c
  1603                           
  1604                           ;motor.c: 94:     while (mL->power < 50 || mR->power < 50) {
  1605  0015AE  D02B               	goto	l251
  1606  0015B0                     
  1607                           ;motor.c: 95:         if (mL->power < 50) {
  1608  0015B0  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1609  0015B4  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1610  0015B8  0E32               	movlw	50
  1611  0015BA  60DF               	cpfslt	indf2,c
  1612  0015BC  D005               	goto	l253
  1613                           
  1614                           ;motor.c: 96:             mL->power++;
  1615  0015BE  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1616  0015C2  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1617  0015C6  2ADF               	incf	indf2,f,c
  1618  0015C8                     l253:
  1619                           
  1620                           ;motor.c: 98:         if (mR->power < 50) {
  1621  0015C8  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1622  0015CC  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1623  0015D0  0E32               	movlw	50
  1624  0015D2  60DF               	cpfslt	indf2,c
  1625  0015D4  D005               	goto	l254
  1626                           
  1627                           ;motor.c: 99:             mR->power++;
  1628  0015D6  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1629  0015DA  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1630  0015DE  2ADF               	incf	indf2,f,c
  1631  0015E0                     l254:
  1632                           
  1633                           ;motor.c: 101:         setMotorPWM(mL);
  1634  0015E0  C01B  F014         	movff	turnLeft@mL,setMotorPWM@m
  1635  0015E4  C01C  F015         	movff	turnLeft@mL+1,setMotorPWM@m+1
  1636  0015E8  ECF6  F005         	call	_setMotorPWM	;wreg free
  1637                           
  1638                           ;motor.c: 102:         setMotorPWM(mR);
  1639  0015EC  C01D  F014         	movff	turnLeft@mR,setMotorPWM@m
  1640  0015F0  C01E  F015         	movff	turnLeft@mR+1,setMotorPWM@m+1
  1641  0015F4  ECF6  F005         	call	_setMotorPWM	;wreg free
  1642                           
  1643                           ;motor.c: 103:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1644  0015F8  0E0D               	movlw	13
  1645  0015FA  6E1F               	movwf	??_turnLeft& (0+255),c
  1646  0015FC  0EFC               	movlw	252
  1647  0015FE                     u3327:
  1648  0015FE  2EE8               	decfsz	wreg,f,c
  1649  001600  D7FE               	bra	u3327
  1650  001602  2E1F               	decfsz	??_turnLeft& (0+255),f,c
  1651  001604  D7FC               	bra	u3327
  1652  001606                     l251:
  1653                           
  1654                           ;motor.c: 94:     while (mL->power < 50 || mR->power < 50) {
  1655  001606  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1656  00160A  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1657  00160E  0E31               	movlw	49
  1658  001610  64DF               	cpfsgt	indf2,c
  1659  001612  D7CE               	goto	l252
  1660  001614  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1661  001618  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1662  00161C  0E31               	movlw	49
  1663  00161E  64DF               	cpfsgt	indf2,c
  1664  001620  D7C7               	goto	l252
  1665  001622  0012               	return	
  1666  001624                     __end_of_turnLeft:
  1667                           	opt stack 0
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           indf2	equ	0xFDF
  1673                           postinc2	equ	0xFDE
  1674                           postdec2	equ	0xFDD
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _stop *****************
  1680 ;; Defined at:
  1681 ;;		line 73 in file "motor.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  mL              2   26[COMRAM] PTR struct Motor
  1684 ;;		 -> main@mL(9), 
  1685 ;;  mR              2   28[COMRAM] PTR struct Motor
  1686 ;;		 -> main@mR(9), 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1698 ;;      Params:         4       0       0       0
  1699 ;;      Locals:         0       0       0       0
  1700 ;;      Temps:          1       0       0       0
  1701 ;;      Totals:         5       0       0       0
  1702 ;;Total ram usage:        5 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    3
  1705 ;; This function calls:
  1706 ;;		_setMotorPWM
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text4
  1713  0018C8                     __ptext4:
  1714                           	opt stack 0
  1715  0018C8                     _stop:
  1716                           	opt stack 27
  1717                           
  1718                           ;motor.c: 76:     while (mL->power > 0 || mR->power > 0) {
  1719                           
  1720                           ;incstack = 0
  1721  0018C8  D02B               	goto	l243
  1722  0018CA                     
  1723                           ;motor.c: 77:         if (mL->power > 0) {
  1724  0018CA  C01B  FFD9         	movff	stop@mL,fsr2l
  1725  0018CE  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1726  0018D2  50DF               	movf	indf2,w,c
  1727  0018D4  B4D8               	btfsc	status,2,c
  1728  0018D6  D005               	goto	l245
  1729                           
  1730                           ;motor.c: 78:             mL->power--;
  1731  0018D8  C01B  FFD9         	movff	stop@mL,fsr2l
  1732  0018DC  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1733  0018E0  06DF               	decf	indf2,f,c
  1734  0018E2                     l245:
  1735                           
  1736                           ;motor.c: 80:         if (mR->power > 0) {
  1737  0018E2  C01D  FFD9         	movff	stop@mR,fsr2l
  1738  0018E6  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1739  0018EA  50DF               	movf	indf2,w,c
  1740  0018EC  B4D8               	btfsc	status,2,c
  1741  0018EE  D005               	goto	l246
  1742                           
  1743                           ;motor.c: 81:             mR->power--;
  1744  0018F0  C01D  FFD9         	movff	stop@mR,fsr2l
  1745  0018F4  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1746  0018F8  06DF               	decf	indf2,f,c
  1747  0018FA                     l246:
  1748                           
  1749                           ;motor.c: 83:         setMotorPWM(mL);
  1750  0018FA  C01B  F014         	movff	stop@mL,setMotorPWM@m
  1751  0018FE  C01C  F015         	movff	stop@mL+1,setMotorPWM@m+1
  1752  001902  ECF6  F005         	call	_setMotorPWM	;wreg free
  1753                           
  1754                           ;motor.c: 84:         setMotorPWM(mR);
  1755  001906  C01D  F014         	movff	stop@mR,setMotorPWM@m
  1756  00190A  C01E  F015         	movff	stop@mR+1,setMotorPWM@m+1
  1757  00190E  ECF6  F005         	call	_setMotorPWM	;wreg free
  1758                           
  1759                           ;motor.c: 85:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1760  001912  0E0D               	movlw	13
  1761  001914  6E1F               	movwf	??_stop& (0+255),c
  1762  001916  0EFC               	movlw	252
  1763  001918                     u3337:
  1764  001918  2EE8               	decfsz	wreg,f,c
  1765  00191A  D7FE               	bra	u3337
  1766  00191C  2E1F               	decfsz	??_stop& (0+255),f,c
  1767  00191E  D7FC               	bra	u3337
  1768  001920                     l243:
  1769                           
  1770                           ;motor.c: 76:     while (mL->power > 0 || mR->power > 0) {
  1771  001920  C01B  FFD9         	movff	stop@mL,fsr2l
  1772  001924  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1773  001928  50DF               	movf	indf2,w,c
  1774  00192A  A4D8               	btfss	status,2,c
  1775  00192C  D7CE               	goto	l244
  1776  00192E  C01D  FFD9         	movff	stop@mR,fsr2l
  1777  001932  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1778  001936  50DF               	movf	indf2,w,c
  1779  001938  B4D8               	btfsc	status,2,c
  1780  00193A  0012               	return	
  1781  00193C  D7C6               	goto	l244
  1782  00193E                     __end_of_stop:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           indf2	equ	0xFDF
  1789                           postinc2	equ	0xFDE
  1790                           postdec2	equ	0xFDD
  1791                           fsr2h	equ	0xFDA
  1792                           fsr2l	equ	0xFD9
  1793                           status	equ	0xFD8
  1794                           
  1795 ;; *************** function _read_IR *****************
  1796 ;; Defined at:
  1797 ;;		line 38 in file "ir.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;  Values          2    5[COMRAM] PTR struct Sensor_ir
  1800 ;;		 -> main@Values(8), 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1812 ;;      Params:         2       0       0       0
  1813 ;;      Locals:         0       0       0       0
  1814 ;;      Temps:          3       0       0       0
  1815 ;;      Totals:         5       0       0       0
  1816 ;;Total ram usage:        5 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    1
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_main
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text5
  1827  001254                     __ptext5:
  1828                           	opt stack 0
  1829  001254                     _read_IR:
  1830                           	opt stack 29
  1831                           
  1832                           ;ir.c: 41:     Values->left = ((CAP2BUFH << 8) | (CAP2BUFL));
  1833                           
  1834                           ;incstack = 0
  1835  001254  5066               	movf	3942,w,c	;volatile
  1836  001256  CF67 F008          	movff	3943,??_read_IR	;volatile
  1837  00125A  6A09               	clrf	(??_read_IR+1)& (0+255),c
  1838  00125C  C008  F009         	movff	??_read_IR,??_read_IR+1
  1839  001260  6A08               	clrf	??_read_IR,c
  1840  001262  1208               	iorwf	??_read_IR,f,c
  1841  001264  0E00               	movlw	0
  1842  001266  1209               	iorwf	??_read_IR+1,f,c
  1843  001268  C006  FFD9         	movff	read_IR@Values,fsr2l
  1844  00126C  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1845  001270  C008  FFDE         	movff	??_read_IR,postinc2
  1846  001274  C009  FFDD         	movff	??_read_IR+1,postdec2
  1847                           
  1848                           ;ir.c: 42:     Values->right = ((CAP1BUFH << 8) | (CAP1BUFL));
  1849  001278  5068               	movf	3944,w,c	;volatile
  1850  00127A  CF69 F008          	movff	3945,??_read_IR	;volatile
  1851  00127E  6A09               	clrf	(??_read_IR+1)& (0+255),c
  1852  001280  C008  F009         	movff	??_read_IR,??_read_IR+1
  1853  001284  6A08               	clrf	??_read_IR,c
  1854  001286  1208               	iorwf	??_read_IR,f,c
  1855  001288  0E00               	movlw	0
  1856  00128A  1209               	iorwf	??_read_IR+1,f,c
  1857  00128C  EE20 F002          	lfsr	2,2
  1858  001290  5006               	movf	read_IR@Values,w,c
  1859  001292  26D9               	addwf	fsr2l,f,c
  1860  001294  5007               	movf	read_IR@Values+1,w,c
  1861  001296  22DA               	addwfc	fsr2h,f,c
  1862  001298  C008  FFDE         	movff	??_read_IR,postinc2
  1863  00129C  C009  FFDD         	movff	??_read_IR+1,postdec2
  1864                           
  1865                           ;ir.c: 44:     Values->left = Values->left / 64;
  1866  0012A0  C006  FFD9         	movff	read_IR@Values,fsr2l
  1867  0012A4  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1868  0012A8  CFDE F008          	movff	postinc2,??_read_IR
  1869  0012AC  CFDD F009          	movff	postdec2,??_read_IR+1
  1870  0012B0  0E06               	movlw	6
  1871  0012B2  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  1872  0012B4                     u1995:
  1873  0012B4  90D8               	bcf	status,0,c
  1874  0012B6  3209               	rrcf	??_read_IR+1,f,c
  1875  0012B8  3208               	rrcf	??_read_IR,f,c
  1876  0012BA  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  1877  0012BC  D7FB               	goto	u1995
  1878  0012BE  C006  FFD9         	movff	read_IR@Values,fsr2l
  1879  0012C2  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1880  0012C6  C008  FFDE         	movff	??_read_IR,postinc2
  1881  0012CA  C009  FFDD         	movff	??_read_IR+1,postdec2
  1882                           
  1883                           ;ir.c: 45:     Values->right = Values->right / 64;
  1884  0012CE  EE20 F002          	lfsr	2,2
  1885  0012D2  5006               	movf	read_IR@Values,w,c
  1886  0012D4  26D9               	addwf	fsr2l,f,c
  1887  0012D6  5007               	movf	read_IR@Values+1,w,c
  1888  0012D8  22DA               	addwfc	fsr2h,f,c
  1889  0012DA  CFDE F008          	movff	postinc2,??_read_IR
  1890  0012DE  CFDD F009          	movff	postdec2,??_read_IR+1
  1891  0012E2  0E06               	movlw	6
  1892  0012E4  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  1893  0012E6                     u2005:
  1894  0012E6  90D8               	bcf	status,0,c
  1895  0012E8  3209               	rrcf	??_read_IR+1,f,c
  1896  0012EA  3208               	rrcf	??_read_IR,f,c
  1897  0012EC  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  1898  0012EE  D7FB               	goto	u2005
  1899  0012F0  EE20 F002          	lfsr	2,2
  1900  0012F4  5006               	movf	read_IR@Values,w,c
  1901  0012F6  26D9               	addwf	fsr2l,f,c
  1902  0012F8  5007               	movf	read_IR@Values+1,w,c
  1903  0012FA  22DA               	addwfc	fsr2h,f,c
  1904  0012FC  C008  FFDE         	movff	??_read_IR,postinc2
  1905  001300  C009  FFDD         	movff	??_read_IR+1,postdec2
  1906                           
  1907                           ;ir.c: 46:     _delay((unsigned long)((50)*(8000000/4000.0)));
  1908  001304  0E82               	movlw	130
  1909  001306  6E08               	movwf	??_read_IR& (0+255),c
  1910  001308  0EDE               	movlw	222
  1911  00130A                     u3347:
  1912  00130A  2EE8               	decfsz	wreg,f,c
  1913  00130C  D7FE               	bra	u3347
  1914  00130E  2E08               	decfsz	??_read_IR& (0+255),f,c
  1915  001310  D7FC               	bra	u3347
  1916  001312  0012               	return		;funcret
  1917  001314                     __end_of_read_IR:
  1918                           	opt stack 0
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           postdec2	equ	0xFDD
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _print_RFID *****************
  1931 ;; Defined at:
  1932 ;;		line 25 in file "rfid.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  pa              2   10[COMRAM] PTR unsigned char 
  1935 ;;		 -> string_rfid(17), 
  1936 ;;  dis             2   12[COMRAM] PTR unsigned char 
  1937 ;;		 -> string_rfid(17), 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1949 ;;      Params:         4       0       0       0
  1950 ;;      Locals:         0       0       0       0
  1951 ;;      Temps:          6       0       0       0
  1952 ;;      Totals:        10       0       0       0
  1953 ;;Total ram usage:       10 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    5
  1956 ;; This function calls:
  1957 ;;		_LCD_clear
  1958 ;;		_LCD_line
  1959 ;;		_LCD_send
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text6
  1966  0017D4                     __ptext6:
  1967                           	opt stack 0
  1968  0017D4                     _print_RFID:
  1969                           	opt stack 25
  1970                           
  1971                           ;rfid.c: 27:     LCD_clear();
  1972                           
  1973                           ;incstack = 0
  1974  0017D4  ECC5  F00D         	call	_LCD_clear	;wreg free
  1975                           
  1976                           ;rfid.c: 28:     LCD_line(1);
  1977  0017D8  0E01               	movlw	1
  1978  0017DA  EC61  F00D         	call	_LCD_line
  1979                           
  1980                           ;rfid.c: 29:     while (*pa != 0x03) {
  1981  0017DE  D002               	goto	l321
  1982  0017E0                     
  1983                           ;rfid.c: 30:         pa++;
  1984  0017E0  4A0B               	infsnz	print_RFID@pa,f,c
  1985  0017E2  2A0C               	incf	print_RFID@pa+1,f,c
  1986  0017E4                     l321:
  1987                           
  1988                           ;rfid.c: 29:     while (*pa != 0x03) {
  1989  0017E4  C00B  FFD9         	movff	print_RFID@pa,fsr2l
  1990  0017E8  C00C  FFDA         	movff	print_RFID@pa+1,fsr2h
  1991  0017EC  0E03               	movlw	3
  1992  0017EE  18DE               	xorwf	postinc2,w,c
  1993  0017F0  B4D8               	btfsc	status,2,c
  1994  0017F2  D012               	goto	l324
  1995  0017F4  D7F5               	goto	l322
  1996  0017F6                     
  1997                           ;rfid.c: 36:         LCD_send(*(dis + 1), 1);
  1998  0017F6  0E01               	movlw	1
  1999  0017F8  6E08               	movwf	LCD_send@type,c
  2000  0017FA  EE20 F001          	lfsr	2,1
  2001  0017FE  500D               	movf	print_RFID@dis,w,c
  2002  001800  26D9               	addwf	fsr2l,f,c
  2003  001802  500E               	movf	print_RFID@dis+1,w,c
  2004  001804  22DA               	addwfc	fsr2h,f,c
  2005  001806  50DF               	movf	indf2,w,c
  2006  001808  EC79  F00D         	call	_LCD_send
  2007                           
  2008                           ;rfid.c: 37:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  2009  00180C  0E21               	movlw	33
  2010  00180E                     u3357:
  2011  00180E  2EE8               	decfsz	wreg,f,c
  2012  001810  D7FE               	bra	u3357
  2013  001812  F000               	nop	
  2014                           
  2015                           ;rfid.c: 39:         dis++;
  2016  001814  4A0D               	infsnz	print_RFID@dis,f,c
  2017  001816  2A0E               	incf	print_RFID@dis+1,f,c
  2018  001818                     l324:
  2019                           
  2020                           ;rfid.c: 34:     while ((dis + 1) < (pa - 2)) {
  2021  001818  0EFE               	movlw	254
  2022  00181A  6E0F               	movwf	??_print_RFID& (0+255),c
  2023  00181C  0EFF               	movlw	255
  2024  00181E  6E10               	movwf	(??_print_RFID+1)& (0+255),c
  2025  001820  C00B  F011         	movff	print_RFID@pa,??_print_RFID+2
  2026  001824  C00C  F012         	movff	print_RFID@pa+1,??_print_RFID+3
  2027  001828  500F               	movf	??_print_RFID,w,c
  2028  00182A  2611               	addwf	??_print_RFID+2,f,c
  2029  00182C  5010               	movf	??_print_RFID+1,w,c
  2030  00182E  2212               	addwfc	??_print_RFID+3,f,c
  2031  001830  0E01               	movlw	1
  2032  001832  240D               	addwf	print_RFID@dis,w,c
  2033  001834  6E13               	movwf	(??_print_RFID+4)& (0+255),c
  2034  001836  0E00               	movlw	0
  2035  001838  200E               	addwfc	print_RFID@dis+1,w,c
  2036  00183A  6E14               	movwf	(??_print_RFID+5)& (0+255),c
  2037  00183C  5011               	movf	??_print_RFID+2,w,c
  2038  00183E  5C13               	subwf	??_print_RFID+4,w,c
  2039  001840  5012               	movf	??_print_RFID+3,w,c
  2040  001842  5814               	subwfb	??_print_RFID+5,w,c
  2041  001844  A0D8               	btfss	status,0,c
  2042  001846  D7D7               	goto	l325
  2043                           
  2044                           ;rfid.c: 41:     LCD_line(2);
  2045  001848  0E02               	movlw	2
  2046  00184A  EC61  F00D         	call	_LCD_line
  2047  00184E  0012               	return		;funcret
  2048  001850                     __end_of_print_RFID:
  2049                           	opt stack 0
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           indf2	equ	0xFDF
  2055                           postinc2	equ	0xFDE
  2056                           postdec2	equ	0xFDD
  2057                           fsr2h	equ	0xFDA
  2058                           fsr2l	equ	0xFD9
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _print_IR *****************
  2062 ;; Defined at:
  2063 ;;		line 123 in file "lcd.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  Values          2   34[BANK0 ] PTR struct Sensor_ir
  2066 ;;		 -> main@Values(8), 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;  buf            16   37[BANK0 ] unsigned char [16]
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2078 ;;      Params:         0       2       0       0
  2079 ;;      Locals:         0      16       0       0
  2080 ;;      Temps:          0       1       0       0
  2081 ;;      Totals:         0      19       0       0
  2082 ;;Total ram usage:       19 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    9
  2085 ;; This function calls:
  2086 ;;		_LCD_clear
  2087 ;;		_LCD_line
  2088 ;;		_LCD_string
  2089 ;;		_sprintf
  2090 ;; This function is called by:
  2091 ;;		_main
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text7
  2096  001192                     __ptext7:
  2097                           	opt stack 0
  2098  001192                     _print_IR:
  2099                           	opt stack 21
  2100                           
  2101                           ;lcd.c: 124:     LCD_clear();
  2102                           
  2103                           ;incstack = 0
  2104  001192  ECC5  F00D         	call	_LCD_clear	;wreg free
  2105                           
  2106                           ;lcd.c: 125:     char buf[16];;lcd.c: 126:     LCD_line(1);
  2107  001196  0E01               	movlw	1
  2108  001198  EC61  F00D         	call	_LCD_line
  2109                           
  2110                           ;lcd.c: 127:     sprintf(buf, "Left: %u", Values->left);
  2111  00119C  0E85               	movlw	low print_IR@buf
  2112  00119E  0100               	movlb	0	; () banked
  2113  0011A0  6F72               	movwf	sprintf@s& (0+255),b
  2114  0011A2  0E00               	movlw	high print_IR@buf
  2115  0011A4  6F73               	movwf	(sprintf@s+1)& (0+255),b
  2116  0011A6  0E29               	movlw	low STR_1
  2117  0011A8  6F74               	movwf	sprintf@fmt& (0+255),b
  2118  0011AA  0E03               	movlw	high STR_1
  2119  0011AC  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2120  0011AE  C082  FFD9         	movff	print_IR@Values,fsr2l
  2121  0011B2  C083  FFDA         	movff	print_IR@Values+1,fsr2h
  2122  0011B6  CFDE F076          	movff	postinc2,?_sprintf+4
  2123  0011BA  CFDD F077          	movff	postdec2,?_sprintf+5
  2124  0011BE  EC9F  F00C         	call	_sprintf	;wreg free
  2125                           
  2126                           ;lcd.c: 128:     LCD_string(buf);
  2127  0011C2  0E85               	movlw	low print_IR@buf
  2128  0011C4  6E0A               	movwf	LCD_string@string,c
  2129  0011C6  0E00               	movlw	high print_IR@buf
  2130  0011C8  6E0B               	movwf	LCD_string@string+1,c
  2131  0011CA  EC49  F00D         	call	_LCD_string	;wreg free
  2132                           
  2133                           ;lcd.c: 129:     LCD_line(2);
  2134  0011CE  0E02               	movlw	2
  2135  0011D0  EC61  F00D         	call	_LCD_line
  2136                           
  2137                           ;lcd.c: 130:     sprintf(buf, "Right: %u", Values->right);
  2138  0011D4  0E85               	movlw	low print_IR@buf
  2139  0011D6  0100               	movlb	0	; () banked
  2140  0011D8  6F72               	movwf	sprintf@s& (0+255),b
  2141  0011DA  0E00               	movlw	high print_IR@buf
  2142  0011DC  6F73               	movwf	(sprintf@s+1)& (0+255),b
  2143  0011DE  0E1F               	movlw	low STR_2
  2144  0011E0  6F74               	movwf	sprintf@fmt& (0+255),b
  2145  0011E2  0E03               	movlw	high STR_2
  2146  0011E4  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2147  0011E6  EE20 F002          	lfsr	2,2
  2148  0011EA  5182               	movf	print_IR@Values& (0+255),w,b
  2149  0011EC  26D9               	addwf	fsr2l,f,c
  2150  0011EE  5183               	movf	(print_IR@Values+1)& (0+255),w,b
  2151  0011F0  22DA               	addwfc	fsr2h,f,c
  2152  0011F2  CFDE F076          	movff	postinc2,?_sprintf+4
  2153  0011F6  CFDD F077          	movff	postdec2,?_sprintf+5
  2154  0011FA  EC9F  F00C         	call	_sprintf	;wreg free
  2155                           
  2156                           ;lcd.c: 131:     LCD_string(buf);
  2157  0011FE  0E85               	movlw	low print_IR@buf
  2158  001200  6E0A               	movwf	LCD_string@string,c
  2159  001202  0E00               	movlw	high print_IR@buf
  2160  001204  6E0B               	movwf	LCD_string@string+1,c
  2161  001206  EC49  F00D         	call	_LCD_string	;wreg free
  2162                           
  2163                           ;lcd.c: 132:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2164  00120A  0E82               	movlw	130
  2165  00120C  0100               	movlb	0	; () banked
  2166  00120E  6F84               	movwf	??_print_IR& (0+255),b
  2167  001210  0EDD               	movlw	221
  2168  001212                     u3367:
  2169  001212  2EE8               	decfsz	wreg,f,c
  2170  001214  D7FE               	bra	u3367
  2171  001216  2F84               	decfsz	??_print_IR& (0+255),f,b
  2172  001218  D7FC               	bra	u3367
  2173  00121A  D000               	nop2	
  2174                           
  2175                           ;lcd.c: 133:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2176  00121C  0E82               	movlw	130
  2177  00121E  0100               	movlb	0	; () banked
  2178  001220  6F84               	movwf	??_print_IR& (0+255),b
  2179  001222  0EDD               	movlw	221
  2180  001224                     u3377:
  2181  001224  2EE8               	decfsz	wreg,f,c
  2182  001226  D7FE               	bra	u3377
  2183  001228  2F84               	decfsz	??_print_IR& (0+255),f,b
  2184  00122A  D7FC               	bra	u3377
  2185  00122C  D000               	nop2	
  2186                           
  2187                           ;lcd.c: 134:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2188  00122E  0E82               	movlw	130
  2189  001230  0100               	movlb	0	; () banked
  2190  001232  6F84               	movwf	??_print_IR& (0+255),b
  2191  001234  0EDD               	movlw	221
  2192  001236                     u3387:
  2193  001236  2EE8               	decfsz	wreg,f,c
  2194  001238  D7FE               	bra	u3387
  2195  00123A  2F84               	decfsz	??_print_IR& (0+255),f,b
  2196  00123C  D7FC               	bra	u3387
  2197  00123E  D000               	nop2	
  2198                           
  2199                           ;lcd.c: 135:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2200  001240  0E82               	movlw	130
  2201  001242  0100               	movlb	0	; () banked
  2202  001244  6F84               	movwf	??_print_IR& (0+255),b
  2203  001246  0EDD               	movlw	221
  2204  001248                     u3397:
  2205  001248  2EE8               	decfsz	wreg,f,c
  2206  00124A  D7FE               	bra	u3397
  2207  00124C  2F84               	decfsz	??_print_IR& (0+255),f,b
  2208  00124E  D7FC               	bra	u3397
  2209  001250  D000               	nop2	
  2210  001252  0012               	return		;funcret
  2211  001254                     __end_of_print_IR:
  2212                           	opt stack 0
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           postinc0	equ	0xFEE
  2216                           wreg	equ	0xFE8
  2217                           indf2	equ	0xFDF
  2218                           postinc2	equ	0xFDE
  2219                           postdec2	equ	0xFDD
  2220                           fsr2h	equ	0xFDA
  2221                           fsr2l	equ	0xFD9
  2222                           status	equ	0xFD8
  2223                           
  2224 ;; *************** function _sprintf *****************
  2225 ;; Defined at:
  2226 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/nf_sprintf.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  s               2   18[BANK0 ] PTR unsigned char 
  2229 ;;		 -> check_sum@buf_cs(16), print_IR@buf(16), 
  2230 ;;  fmt             2   20[BANK0 ] PTR const unsigned char 
  2231 ;;		 -> STR_4(16), STR_3(14), STR_2(10), STR_1(9), 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  f               6   28[BANK0 ] struct _IO_FILE
  2234 ;;  ap              2   26[BANK0 ] PTR void [1]
  2235 ;;		 -> ?_sprintf(2), 
  2236 ;;  ret             2   24[BANK0 ] int 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  2   18[BANK0 ] int 
  2239 ;; Registers used:
  2240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2246 ;;      Params:         0       6       0       0
  2247 ;;      Locals:         0      10       0       0
  2248 ;;      Temps:          0       0       0       0
  2249 ;;      Totals:         0      16       0       0
  2250 ;;Total ram usage:       16 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    8
  2253 ;; This function calls:
  2254 ;;		_vfprintf
  2255 ;; This function is called by:
  2256 ;;		_print_IR
  2257 ;;		_check_sum
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text8
  2262  00193E                     __ptext8:
  2263                           	opt stack 0
  2264  00193E                     _sprintf:
  2265                           	opt stack 21
  2266                           
  2267                           ;incstack = 0
  2268  00193E  0E76               	movlw	low (?_sprintf+4)
  2269  001940  0100               	movlb	0	; () banked
  2270  001942  6F7A               	movwf	sprintf@ap& (0+255),b
  2271  001944  0E00               	movlw	high (?_sprintf+4)
  2272  001946  6F7B               	movwf	(sprintf@ap+1)& (0+255),b
  2273  001948  C072  F07C         	movff	sprintf@s,sprintf@f
  2274  00194C  C073  F07D         	movff	sprintf@s+1,sprintf@f+1
  2275                           
  2276                           ; BSR set to: 0
  2277  001950  0E00               	movlw	0
  2278  001952  6F7F               	movwf	(sprintf@f+3)& (0+255),b
  2279  001954  0E00               	movlw	0
  2280  001956  6F7E               	movwf	(sprintf@f+2)& (0+255),b
  2281                           
  2282                           ; BSR set to: 0
  2283  001958  0E00               	movlw	0
  2284  00195A  6F81               	movwf	(sprintf@f+5)& (0+255),b
  2285  00195C  0E00               	movlw	0
  2286  00195E  6F80               	movwf	(sprintf@f+4)& (0+255),b
  2287                           
  2288                           ; BSR set to: 0
  2289  001960  0E7C               	movlw	low sprintf@f
  2290  001962  6E4F               	movwf	vfprintf@fp,c
  2291  001964  0E00               	movlw	high sprintf@f
  2292  001966  6E50               	movwf	vfprintf@fp+1,c
  2293  001968  C074  F051         	movff	sprintf@fmt,vfprintf@fmt
  2294  00196C  C075  F052         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2295  001970  0E7A               	movlw	low sprintf@ap
  2296  001972  6E53               	movwf	vfprintf@ap,c
  2297  001974  0E00               	movlw	high sprintf@ap
  2298  001976  6E54               	movwf	vfprintf@ap+1,c
  2299  001978  ECCC  F00C         	call	_vfprintf	;wreg free
  2300  00197C  C04F  F078         	movff	?_vfprintf,sprintf@ret
  2301  001980  C050  F079         	movff	?_vfprintf+1,sprintf@ret+1
  2302  001984  0100               	movlb	0	; () banked
  2303  001986  517E               	movf	(sprintf@f+2)& (0+255),w,b
  2304  001988  2572               	addwf	sprintf@s& (0+255),w,b
  2305  00198A  6ED9               	movwf	fsr2l,c
  2306  00198C  517F               	movf	(sprintf@f+3)& (0+255),w,b
  2307  00198E  2173               	addwfc	(sprintf@s+1)& (0+255),w,b
  2308  001990  6EDA               	movwf	fsr2h,c
  2309  001992  0E00               	movlw	0
  2310  001994  6EDF               	movwf	indf2,c
  2311  001996  0012               	return	
  2312  001998                     __end_of_sprintf:
  2313                           	opt stack 0
  2314                           tblptru	equ	0xFF8
  2315                           tblptrh	equ	0xFF7
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           indf2	equ	0xFDF
  2319                           postinc2	equ	0xFDE
  2320                           postdec2	equ	0xFDD
  2321                           fsr2h	equ	0xFDA
  2322                           fsr2l	equ	0xFD9
  2323                           status	equ	0xFD8
  2324                           
  2325 ;; *************** function _vfprintf *****************
  2326 ;; Defined at:
  2327 ;;		line 1368 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  2330 ;;		 -> sprintf@f(6), 
  2331 ;;  fmt             2   80[COMRAM] PTR const unsigned char 
  2332 ;;		 -> STR_4(16), STR_3(14), STR_2(10), STR_1(9), 
  2333 ;;  ap              2   82[COMRAM] PTR PTR void 
  2334 ;;		 -> sprintf@ap(2), 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  cfmt            2   16[BANK0 ] PTR unsigned char 
  2337 ;;		 -> STR_4(16), STR_3(14), STR_2(10), STR_1(9), 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  2   78[COMRAM] int 
  2340 ;; Registers used:
  2341 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2347 ;;      Params:         6       0       0       0
  2348 ;;      Locals:         0       2       0       0
  2349 ;;      Temps:          0       0       0       0
  2350 ;;      Totals:         6       2       0       0
  2351 ;;Total ram usage:        8 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    7
  2354 ;; This function calls:
  2355 ;;		_vfpfcnvrt
  2356 ;; This function is called by:
  2357 ;;		_sprintf
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text9
  2362  001998                     __ptext9:
  2363                           	opt stack 0
  2364  001998                     _vfprintf:
  2365                           	opt stack 21
  2366                           
  2367                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.00/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;incstack = 0
  2371  001998  C051  F070         	movff	vfprintf@fmt,vfprintf@cfmt
  2372  00199C  C052  F071         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2373                           
  2374                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  2375  0019A0  0E00               	movlw	0
  2376  0019A2  0100               	movlb	0	; () banked
  2377  0019A4  6FBB               	movwf	(_nout+1)& (0+255),b
  2378  0019A6  0E00               	movlw	0
  2379  0019A8  6FBA               	movwf	_nout& (0+255),b
  2380                           
  2381                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2382  0019AA  D013               	goto	l424
  2383  0019AC                     
  2384                           ; BSR set to: 0
  2385                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  2386                           
  2387                           ; BSR set to: 0
  2388  0019AC  C04F  F045         	movff	vfprintf@fp,vfpfcnvrt@fp
  2389  0019B0  C050  F046         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2390  0019B4  0E70               	movlw	low vfprintf@cfmt
  2391  0019B6  6E47               	movwf	vfpfcnvrt@fmt,c
  2392  0019B8  0E00               	movlw	high vfprintf@cfmt
  2393  0019BA  6E48               	movwf	vfpfcnvrt@fmt+1,c
  2394  0019BC  C053  F049         	movff	vfprintf@ap,vfpfcnvrt@ap
  2395  0019C0  C054  F04A         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2396  0019C4  EC07  F004         	call	_vfpfcnvrt	;wreg free
  2397  0019C8  5045               	movf	?_vfpfcnvrt,w,c
  2398  0019CA  0100               	movlb	0	; () banked
  2399  0019CC  27BA               	addwf	_nout& (0+255),f,b
  2400  0019CE  5046               	movf	?_vfpfcnvrt+1,w,c
  2401  0019D0  23BB               	addwfc	(_nout+1)& (0+255),f,b
  2402  0019D2                     l424:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2406                           
  2407                           ; BSR set to: 0
  2408  0019D2  C070  FFF6         	movff	vfprintf@cfmt,tblptrl
  2409  0019D6  C071  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2410  0019DA                     	if	0	;tblptru may be non-zero
  2411  0019DA                     	endif
  2412  0019DA                     	if	0	;tblptru may be non-zero
  2413  0019DA                     	endif
  2414  0019DA  0008               	tblrd		*
  2415  0019DC  50F5               	movf	tablat,w,c
  2416  0019DE  0900               	iorlw	0
  2417  0019E0  A4D8               	btfss	status,2,c
  2418  0019E2  D7E4               	goto	l425
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  2422  0019E4  C0BA  F04F         	movff	_nout,?_vfprintf
  2423  0019E8  C0BB  F050         	movff	_nout+1,?_vfprintf+1
  2424                           
  2425                           ; BSR set to: 0
  2426  0019EC  0012               	return		;funcret
  2427  0019EE                     __end_of_vfprintf:
  2428                           	opt stack 0
  2429                           tblptru	equ	0xFF8
  2430                           tblptrh	equ	0xFF7
  2431                           tblptrl	equ	0xFF6
  2432                           tablat	equ	0xFF5
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf2	equ	0xFDF
  2436                           postinc2	equ	0xFDE
  2437                           postdec2	equ	0xFDD
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _vfpfcnvrt *****************
  2443 ;; Defined at:
  2444 ;;		line 670 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  fp              2   68[COMRAM] PTR struct _IO_FILE
  2447 ;;		 -> sprintf@f(6), 
  2448 ;;  fmt             2   70[COMRAM] PTR PTR unsigned char 
  2449 ;;		 -> vfprintf@cfmt(2), 
  2450 ;;  ap              2   72[COMRAM] PTR PTR void 
  2451 ;;		 -> sprintf@ap(2), 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  llu             8    8[BANK0 ] unsigned long long 
  2454 ;;  ll              8    0[BANK0 ] long long 
  2455 ;;  f               4    0        long long 
  2456 ;;  vp              3    0        PTR void 
  2457 ;;  ct              3    0        unsigned char [3]
  2458 ;;  cp              3    0        PTR unsigned char 
  2459 ;;  i               2    0        int 
  2460 ;;  done            2    0        int 
  2461 ;;  c               1    0        unsigned char 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  2   68[COMRAM] int 
  2464 ;; Registers used:
  2465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2471 ;;      Params:         6       0       0       0
  2472 ;;      Locals:         0      16       0       0
  2473 ;;      Temps:          4       0       0       0
  2474 ;;      Totals:        10      16       0       0
  2475 ;;Total ram usage:       26 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    6
  2478 ;; This function calls:
  2479 ;;		_dtoa
  2480 ;;		_fputc
  2481 ;;		_utoa
  2482 ;; This function is called by:
  2483 ;;		_vfprintf
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text10
  2488  00080E                     __ptext10:
  2489                           	opt stack 0
  2490  00080E                     _vfpfcnvrt:
  2491                           	opt stack 21
  2492                           
  2493                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.00/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.00/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.00/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.00/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;incstack = 0
  2497  00080E  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2498  000812  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2499  000816  CFDE FFF6          	movff	postinc2,tblptrl
  2500  00081A  CFDD FFF7          	movff	postdec2,tblptrh
  2501  00081E                     	if	0	;tblptru may be non-zero
  2502  00081E                     	endif
  2503  00081E                     	if	0	;tblptru may be non-zero
  2504  00081E                     	endif
  2505  00081E  0008               	tblrd		*
  2506  000820  50F5               	movf	tablat,w,c
  2507  000822  0A25               	xorlw	37
  2508  000824  A4D8               	btfss	status,2,c
  2509  000826  D0E8               	goto	l415
  2510                           
  2511                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  2512  000828  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2513  00082C  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2514  000830  2ADE               	incf	postinc2,f,c
  2515  000832  0E00               	movlw	0
  2516  000834  22DD               	addwfc	postdec2,f,c
  2517                           
  2518                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  2519  000836  0E00               	movlw	0
  2520  000838  0100               	movlb	0	; () banked
  2521  00083A  6FBD               	movwf	(_width+1)& (0+255),b
  2522  00083C  0E00               	movlw	0
  2523  00083E  6FBC               	movwf	_width& (0+255),b
  2524  000840  C0BC  F057         	movff	_width,_flags
  2525  000844  C0BD  F058         	movff	_width+1,_flags+1
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  2529  000848  6855               	setf	_prec,c
  2530  00084A  6856               	setf	_prec+1,c
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2534  00084C  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2535  000850  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2536  000854  CFDE FFF6          	movff	postinc2,tblptrl
  2537  000858  CFDD FFF7          	movff	postdec2,tblptrh
  2538  00085C                     	if	0	;tblptru may be non-zero
  2539  00085C                     	endif
  2540  00085C                     	if	0	;tblptru may be non-zero
  2541  00085C                     	endif
  2542  00085C  0008               	tblrd		*
  2543  00085E  50F5               	movf	tablat,w,c
  2544  000860  0A64               	xorlw	100
  2545  000862  B4D8               	btfsc	status,2,c
  2546  000864  D00D               	goto	u3050
  2547                           
  2548                           ; BSR set to: 0
  2549  000866  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2550  00086A  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2551  00086E  CFDE FFF6          	movff	postinc2,tblptrl
  2552  000872  CFDD FFF7          	movff	postdec2,tblptrh
  2553  000876                     	if	0	;tblptru may be non-zero
  2554  000876                     	endif
  2555  000876                     	if	0	;tblptru may be non-zero
  2556  000876                     	endif
  2557  000876  0008               	tblrd		*
  2558  000878  50F5               	movf	tablat,w,c
  2559  00087A  0A69               	xorlw	105
  2560  00087C  A4D8               	btfss	status,2,c
  2561  00087E  D03F               	goto	l416
  2562  000880                     u3050:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2566                           
  2567                           ; BSR set to: 0
  2568  000880  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2569  000884  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2570  000888  2ADE               	incf	postinc2,f,c
  2571  00088A  0E00               	movlw	0
  2572  00088C  22DD               	addwfc	postdec2,f,c
  2573                           
  2574                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2575  00088E  C049  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2576  000892  C04A  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2577  000896  CFDF F04B          	movff	indf2,??_vfpfcnvrt
  2578  00089A  0E02               	movlw	2
  2579  00089C  26DE               	addwf	postinc2,f,c
  2580  00089E  CFDF F04C          	movff	indf2,??_vfpfcnvrt+1
  2581  0008A2  0E00               	movlw	0
  2582  0008A4  22DD               	addwfc	postdec2,f,c
  2583  0008A6  C04B  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2584  0008AA  C04C  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2585  0008AE  CFDE F060          	movff	postinc2,vfpfcnvrt@ll
  2586  0008B2  CFDD F061          	movff	postdec2,vfpfcnvrt@ll+1
  2587  0008B6  0E00               	movlw	0
  2588  0008B8  BF61               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  2589  0008BA  0EFF               	movlw	-1
  2590  0008BC  6F62               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  2591  0008BE  6F63               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  2592  0008C0  6F64               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  2593  0008C2  6F65               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  2594  0008C4  6F66               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  2595  0008C6  6F67               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2599  0008C8  C045  F021         	movff	vfpfcnvrt@fp,dtoa@fp
  2600  0008CC  C046  F022         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2601  0008D0  C060  F023         	movff	vfpfcnvrt@ll,dtoa@d
  2602  0008D4  C061  F024         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2603  0008D8  C062  F025         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2604  0008DC  C063  F026         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2605  0008E0  C064  F027         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2606  0008E4  C065  F028         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2607  0008E8  C066  F029         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2608  0008EC  C067  F02A         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2609  0008F0  ECE1  F002         	call	_dtoa	;wreg free
  2610  0008F4  C021  F045         	movff	?_dtoa,?_vfpfcnvrt
  2611  0008F8  C022  F046         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2612  0008FC  0012               	return	
  2613  0008FE                     l416:
  2614                           
  2615                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1182:         if (*f
      +                          mt[0] == 'u') {
  2616  0008FE  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2617  000902  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2618  000906  CFDE FFF6          	movff	postinc2,tblptrl
  2619  00090A  CFDD FFF7          	movff	postdec2,tblptrh
  2620  00090E                     	if	0	;tblptru may be non-zero
  2621  00090E                     	endif
  2622  00090E                     	if	0	;tblptru may be non-zero
  2623  00090E                     	endif
  2624  00090E  0008               	tblrd		*
  2625  000910  50F5               	movf	tablat,w,c
  2626  000912  0A75               	xorlw	117
  2627  000914  A4D8               	btfss	status,2,c
  2628  000916  D041               	goto	l420
  2629                           
  2630                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1184:             ++
      +                          *fmt;
  2631  000918  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2632  00091C  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2633  000920  2ADE               	incf	postinc2,f,c
  2634  000922  0E00               	movlw	0
  2635  000924  22DD               	addwfc	postdec2,f,c
  2636                           
  2637                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1185:             ll
      +                          u = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0
      +                          ));
  2638  000926  C049  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2639  00092A  C04A  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2640  00092E  CFDF F04B          	movff	indf2,??_vfpfcnvrt
  2641  000932  0E02               	movlw	2
  2642  000934  26DE               	addwf	postinc2,f,c
  2643  000936  CFDF F04C          	movff	indf2,??_vfpfcnvrt+1
  2644  00093A  0E00               	movlw	0
  2645  00093C  22DD               	addwfc	postdec2,f,c
  2646  00093E  C04B  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2647  000942  C04C  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2648  000946  CFDE F04D          	movff	postinc2,??_vfpfcnvrt+2
  2649  00094A  CFDD F04E          	movff	postdec2,??_vfpfcnvrt+3
  2650  00094E  C04D  F068         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  2651  000952  C04E  F069         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  2652  000956  0100               	movlb	0	; () banked
  2653  000958  6B6A               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  2654  00095A  6B6B               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  2655  00095C  6B6C               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  2656  00095E  6B6D               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  2657  000960  6B6E               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  2658  000962  6B6F               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1187:             re
      +                          turn utoa(fp, llu);
  2662  000964  C045  F021         	movff	vfpfcnvrt@fp,utoa@fp
  2663  000968  C046  F022         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  2664  00096C  C068  F023         	movff	vfpfcnvrt@llu,utoa@d
  2665  000970  C069  F024         	movff	vfpfcnvrt@llu+1,utoa@d+1
  2666  000974  C06A  F025         	movff	vfpfcnvrt@llu+2,utoa@d+2
  2667  000978  C06B  F026         	movff	vfpfcnvrt@llu+3,utoa@d+3
  2668  00097C  C06C  F027         	movff	vfpfcnvrt@llu+4,utoa@d+4
  2669  000980  C06D  F028         	movff	vfpfcnvrt@llu+5,utoa@d+5
  2670  000984  C06E  F029         	movff	vfpfcnvrt@llu+6,utoa@d+6
  2671  000988  C06F  F02A         	movff	vfpfcnvrt@llu+7,utoa@d+7
  2672  00098C  EC1A  F005         	call	_utoa	;wreg free
  2673  000990  C021  F045         	movff	?_utoa,?_vfpfcnvrt
  2674  000994  C022  F046         	movff	?_utoa+1,?_vfpfcnvrt+1
  2675  000998  0012               	return	
  2676  00099A                     l420:
  2677                           
  2678                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2679  00099A  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2680  00099E  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2681  0009A2  CFDE FFF6          	movff	postinc2,tblptrl
  2682  0009A6  CFDD FFF7          	movff	postdec2,tblptrh
  2683  0009AA                     	if	0	;tblptru may be non-zero
  2684  0009AA                     	endif
  2685  0009AA                     	if	0	;tblptru may be non-zero
  2686  0009AA                     	endif
  2687  0009AA  0008               	tblrd		*
  2688  0009AC  50F5               	movf	tablat,w,c
  2689  0009AE  0A25               	xorlw	37
  2690  0009B0  A4D8               	btfss	status,2,c
  2691  0009B2  D016               	goto	l421
  2692                           
  2693                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2694  0009B4  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2695  0009B8  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2696  0009BC  2ADE               	incf	postinc2,f,c
  2697  0009BE  0E00               	movlw	0
  2698  0009C0  22DD               	addwfc	postdec2,f,c
  2699                           
  2700                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2701  0009C2  0E00               	movlw	0
  2702  0009C4  6E07               	movwf	fputc@c+1,c
  2703  0009C6  0E25               	movlw	37
  2704  0009C8  6E06               	movwf	fputc@c,c
  2705  0009CA  C045  F008         	movff	vfpfcnvrt@fp,fputc@fp
  2706  0009CE  C046  F009         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2707  0009D2  ECE1  F009         	call	_fputc	;wreg free
  2708                           
  2709                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2710  0009D6  0E00               	movlw	0
  2711  0009D8  6E46               	movwf	?_vfpfcnvrt+1,c
  2712  0009DA  0E01               	movlw	1
  2713  0009DC  6E45               	movwf	?_vfpfcnvrt,c
  2714  0009DE  0012               	return	
  2715  0009E0                     l421:
  2716                           
  2717                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2718  0009E0  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2719  0009E4  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2720  0009E8  2ADE               	incf	postinc2,f,c
  2721  0009EA  0E00               	movlw	0
  2722  0009EC  22DD               	addwfc	postdec2,f,c
  2723                           
  2724                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2725  0009EE  0E00               	movlw	0
  2726  0009F0  6E46               	movwf	?_vfpfcnvrt+1,c
  2727  0009F2  0E00               	movlw	0
  2728  0009F4  6E45               	movwf	?_vfpfcnvrt,c
  2729  0009F6  0012               	return	
  2730  0009F8                     l415:
  2731                           
  2732                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2733  0009F8  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2734  0009FC  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2735  000A00  CFDE FFF6          	movff	postinc2,tblptrl
  2736  000A04  CFDD FFF7          	movff	postdec2,tblptrh
  2737  000A08                     	if	0	;tblptru may be non-zero
  2738  000A08                     	endif
  2739  000A08                     	if	0	;tblptru may be non-zero
  2740  000A08                     	endif
  2741  000A08  0008               	tblrd		*
  2742  000A0A  50F5               	movf	tablat,w,c
  2743  000A0C  6E06               	movwf	fputc@c,c
  2744  000A0E  6A07               	clrf	fputc@c+1,c
  2745  000A10  C045  F008         	movff	vfpfcnvrt@fp,fputc@fp
  2746  000A14  C046  F009         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2747  000A18  ECE1  F009         	call	_fputc	;wreg free
  2748                           
  2749                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2750  000A1C  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2751  000A20  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2752  000A24  2ADE               	incf	postinc2,f,c
  2753  000A26  0E00               	movlw	0
  2754  000A28  22DD               	addwfc	postdec2,f,c
  2755                           
  2756                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1364:     return 1;
  2757  000A2A  0E00               	movlw	0
  2758  000A2C  6E46               	movwf	?_vfpfcnvrt+1,c
  2759  000A2E  0E01               	movlw	1
  2760  000A30  6E45               	movwf	?_vfpfcnvrt,c
  2761  000A32  0012               	return	
  2762  000A34                     __end_of_vfpfcnvrt:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _utoa *****************
  2778 ;; Defined at:
  2779 ;;		line 593 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  fp              2   32[COMRAM] PTR struct _IO_FILE
  2782 ;;		 -> sprintf@f(6), 
  2783 ;;  d               8   34[COMRAM] unsigned long long 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  n               8   54[COMRAM] unsigned long long 
  2786 ;;  i               2   62[COMRAM] int 
  2787 ;;  w               2   52[COMRAM] int 
  2788 ;;  p               2   50[COMRAM] int 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  2   32[COMRAM] int 
  2791 ;; Registers used:
  2792 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2798 ;;      Params:        10       0       0       0
  2799 ;;      Locals:        14       0       0       0
  2800 ;;      Temps:          8       0       0       0
  2801 ;;      Totals:        32       0       0       0
  2802 ;;Total ram usage:       32 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    5
  2805 ;; This function calls:
  2806 ;;		___lodiv
  2807 ;;		___lomod
  2808 ;;		_pad
  2809 ;; This function is called by:
  2810 ;;		_vfpfcnvrt
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text11
  2815  000A34                     __ptext11:
  2816                           	opt stack 0
  2817  000A34                     _utoa:
  2818                           	opt stack 21
  2819                           
  2820                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 593: static int utoa
      +                          (FILE *fp, unsigned long long d);/Applications/microchip/xc8/v2.00/pic/sources/c99/commo
      +                          n/doprnt.c: 594: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 59
      +                          5:     int i, p, w;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 5
      +                          96:     unsigned long long n;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/d
      +                          oprnt.c: 599:     if (!(prec < 0)) {
  2821                           
  2822                           ;incstack = 0
  2823  000A34  AE56               	btfss	_prec+1,7,c
  2824                           
  2825                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 600:         flags &
      +                          = ~(1 << 1);
  2826  000A36  9257               	bcf	_flags,1,c
  2827                           
  2828                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 602:     p = (0 < pr
      +                          ec) ? prec : 1;
  2829                           
  2830                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 601:     }
  2831  000A38  BE56               	btfsc	_prec+1,7,c
  2832  000A3A  D005               	goto	u2970
  2833  000A3C  5056               	movf	_prec+1,w,c
  2834  000A3E  E108               	bnz	l402
  2835  000A40  0455               	decf	_prec,w,c
  2836  000A42  B0D8               	btfsc	status,0,c
  2837  000A44  D005               	goto	l402
  2838  000A46                     u2970:
  2839  000A46  0E00               	movlw	0
  2840  000A48  6E34               	movwf	utoa@p+1,c
  2841  000A4A  0E01               	movlw	1
  2842  000A4C  6E33               	movwf	utoa@p,c
  2843  000A4E  D004               	goto	l404
  2844  000A50                     l402:
  2845  000A50  C055  F033         	movff	_prec,utoa@p
  2846  000A54  C056  F034         	movff	_prec+1,utoa@p+1
  2847  000A58                     l404:
  2848                           
  2849                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 603:     w = width;
  2850  000A58  C0BC  F035         	movff	_width,utoa@w
  2851  000A5C  C0BD  F036         	movff	_width+1,utoa@w+1
  2852                           
  2853                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 606:     n = d;
  2854  000A60  C023  F037         	movff	utoa@d,utoa@n
  2855  000A64  C024  F038         	movff	utoa@d+1,utoa@n+1
  2856  000A68  C025  F039         	movff	utoa@d+2,utoa@n+2
  2857  000A6C  C026  F03A         	movff	utoa@d+3,utoa@n+3
  2858  000A70  C027  F03B         	movff	utoa@d+4,utoa@n+4
  2859  000A74  C028  F03C         	movff	utoa@d+5,utoa@n+5
  2860  000A78  C029  F03D         	movff	utoa@d+6,utoa@n+6
  2861  000A7C  C02A  F03E         	movff	utoa@d+7,utoa@n+7
  2862                           
  2863                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 607:     i = sizeof(
      +                          dbuf) - 1;
  2864  000A80  0E00               	movlw	0
  2865  000A82  6E40               	movwf	utoa@i+1,c
  2866  000A84  0E1F               	movlw	31
  2867  000A86  6E3F               	movwf	utoa@i,c
  2868                           
  2869                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 608:     dbuf[i] = '
      +                          \0';
  2870  000A88  0EBF               	movlw	low _dbuf
  2871  000A8A  243F               	addwf	utoa@i,w,c
  2872  000A8C  6ED9               	movwf	fsr2l,c
  2873  000A8E  0E00               	movlw	high _dbuf
  2874  000A90  2040               	addwfc	utoa@i+1,w,c
  2875  000A92  6EDA               	movwf	fsr2h,c
  2876  000A94  0E00               	movlw	0
  2877  000A96  6EDF               	movwf	indf2,c
  2878                           
  2879                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 609:     while (i &&
      +                           (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2880  000A98  D076               	goto	l405
  2881  000A9A                     
  2882                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 610:         --i;
  2883  000A9A  063F               	decf	utoa@i,f,c
  2884  000A9C  A0D8               	btfss	status,0,c
  2885  000A9E  0640               	decf	utoa@i+1,f,c
  2886                           
  2887                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 611:         dbuf[i]
      +                           = '0' + (n % 10);
  2888  000AA0  0EBF               	movlw	low _dbuf
  2889  000AA2  243F               	addwf	utoa@i,w,c
  2890  000AA4  6ED9               	movwf	fsr2l,c
  2891  000AA6  0E00               	movlw	high _dbuf
  2892  000AA8  2040               	addwfc	utoa@i+1,w,c
  2893  000AAA  6EDA               	movwf	fsr2h,c
  2894  000AAC  C037  F006         	movff	utoa@n,___lomod@dividend
  2895  000AB0  C038  F007         	movff	utoa@n+1,___lomod@dividend+1
  2896  000AB4  C039  F008         	movff	utoa@n+2,___lomod@dividend+2
  2897  000AB8  C03A  F009         	movff	utoa@n+3,___lomod@dividend+3
  2898  000ABC  C03B  F00A         	movff	utoa@n+4,___lomod@dividend+4
  2899  000AC0  C03C  F00B         	movff	utoa@n+5,___lomod@dividend+5
  2900  000AC4  C03D  F00C         	movff	utoa@n+6,___lomod@dividend+6
  2901  000AC8  C03E  F00D         	movff	utoa@n+7,___lomod@dividend+7
  2902  000ACC  0E0A               	movlw	10
  2903  000ACE  6E0E               	movwf	___lomod@divisor,c
  2904  000AD0  0E00               	movlw	0
  2905  000AD2  6E0F               	movwf	___lomod@divisor+1,c
  2906  000AD4  0E00               	movlw	0
  2907  000AD6  6E10               	movwf	___lomod@divisor+2,c
  2908  000AD8  0E00               	movlw	0
  2909  000ADA  6E11               	movwf	___lomod@divisor+3,c
  2910  000ADC  0E00               	movlw	0
  2911  000ADE  6E12               	movwf	___lomod@divisor+4,c
  2912  000AE0  0E00               	movlw	0
  2913  000AE2  6E13               	movwf	___lomod@divisor+5,c
  2914  000AE4  0E00               	movlw	0
  2915  000AE6  6E14               	movwf	___lomod@divisor+6,c
  2916  000AE8  0E00               	movlw	0
  2917  000AEA  6E15               	movwf	___lomod@divisor+7,c
  2918  000AEC  EC8A  F009         	call	___lomod	;wreg free
  2919  000AF0  C006  F02B         	movff	?___lomod,??_utoa
  2920  000AF4  C007  F02C         	movff	?___lomod+1,??_utoa+1
  2921  000AF8  C008  F02D         	movff	?___lomod+2,??_utoa+2
  2922  000AFC  C009  F02E         	movff	?___lomod+3,??_utoa+3
  2923  000B00  C00A  F02F         	movff	?___lomod+4,??_utoa+4
  2924  000B04  C00B  F030         	movff	?___lomod+5,??_utoa+5
  2925  000B08  C00C  F031         	movff	?___lomod+6,??_utoa+6
  2926  000B0C  C00D  F032         	movff	?___lomod+7,??_utoa+7
  2927  000B10  502B               	movf	??_utoa,w,c
  2928  000B12  0F30               	addlw	48
  2929  000B14  6EDF               	movwf	indf2,c
  2930                           
  2931                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 612:         --p;
  2932  000B16  0633               	decf	utoa@p,f,c
  2933  000B18  A0D8               	btfss	status,0,c
  2934  000B1A  0634               	decf	utoa@p+1,f,c
  2935                           
  2936                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 613:         --w;
  2937  000B1C  0635               	decf	utoa@w,f,c
  2938  000B1E  A0D8               	btfss	status,0,c
  2939  000B20  0636               	decf	utoa@w+1,f,c
  2940                           
  2941                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 614:         n = n /
      +                           10;
  2942  000B22  C037  F006         	movff	utoa@n,___lodiv@dividend
  2943  000B26  C038  F007         	movff	utoa@n+1,___lodiv@dividend+1
  2944  000B2A  C039  F008         	movff	utoa@n+2,___lodiv@dividend+2
  2945  000B2E  C03A  F009         	movff	utoa@n+3,___lodiv@dividend+3
  2946  000B32  C03B  F00A         	movff	utoa@n+4,___lodiv@dividend+4
  2947  000B36  C03C  F00B         	movff	utoa@n+5,___lodiv@dividend+5
  2948  000B3A  C03D  F00C         	movff	utoa@n+6,___lodiv@dividend+6
  2949  000B3E  C03E  F00D         	movff	utoa@n+7,___lodiv@dividend+7
  2950  000B42  0E0A               	movlw	10
  2951  000B44  6E0E               	movwf	___lodiv@divisor,c
  2952  000B46  0E00               	movlw	0
  2953  000B48  6E0F               	movwf	___lodiv@divisor+1,c
  2954  000B4A  0E00               	movlw	0
  2955  000B4C  6E10               	movwf	___lodiv@divisor+2,c
  2956  000B4E  0E00               	movlw	0
  2957  000B50  6E11               	movwf	___lodiv@divisor+3,c
  2958  000B52  0E00               	movlw	0
  2959  000B54  6E12               	movwf	___lodiv@divisor+4,c
  2960  000B56  0E00               	movlw	0
  2961  000B58  6E13               	movwf	___lodiv@divisor+5,c
  2962  000B5A  0E00               	movlw	0
  2963  000B5C  6E14               	movwf	___lodiv@divisor+6,c
  2964  000B5E  0E00               	movlw	0
  2965  000B60  6E15               	movwf	___lodiv@divisor+7,c
  2966  000B62  EC62  F008         	call	___lodiv	;wreg free
  2967  000B66  C006  F037         	movff	?___lodiv,utoa@n
  2968  000B6A  C007  F038         	movff	?___lodiv+1,utoa@n+1
  2969  000B6E  C008  F039         	movff	?___lodiv+2,utoa@n+2
  2970  000B72  C009  F03A         	movff	?___lodiv+3,utoa@n+3
  2971  000B76  C00A  F03B         	movff	?___lodiv+4,utoa@n+4
  2972  000B7A  C00B  F03C         	movff	?___lodiv+5,utoa@n+5
  2973  000B7E  C00C  F03D         	movff	?___lodiv+6,utoa@n+6
  2974  000B82  C00D  F03E         	movff	?___lodiv+7,utoa@n+7
  2975  000B86                     l405:
  2976                           
  2977                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 609:     while (i &&
      +                           (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2978  000B86  503F               	movf	utoa@i,w,c
  2979  000B88  1040               	iorwf	utoa@i+1,w,c
  2980  000B8A  B4D8               	btfsc	status,2,c
  2981  000B8C  D01A               	goto	u3020
  2982  000B8E  5037               	movf	utoa@n,w,c
  2983  000B90  1038               	iorwf	utoa@n+1,w,c
  2984  000B92  1039               	iorwf	utoa@n+2,w,c
  2985  000B94  103A               	iorwf	utoa@n+3,w,c
  2986  000B96  103B               	iorwf	utoa@n+4,w,c
  2987  000B98  103C               	iorwf	utoa@n+5,w,c
  2988  000B9A  103D               	iorwf	utoa@n+6,w,c
  2989  000B9C  103E               	iorwf	utoa@n+7,w,c
  2990  000B9E  A4D8               	btfss	status,2,c
  2991  000BA0  D77C               	goto	l406
  2992  000BA2  BE34               	btfsc	utoa@p+1,7,c
  2993  000BA4  D005               	goto	u3000
  2994  000BA6  5034               	movf	utoa@p+1,w,c
  2995  000BA8  E102               	bnz	u3001
  2996  000BAA  0433               	decf	utoa@p,w,c
  2997  000BAC  B0D8               	btfsc	status,0,c
  2998  000BAE                     u3001:
  2999  000BAE  D775               	goto	l406
  3000  000BB0                     u3000:
  3001  000BB0  BE36               	btfsc	utoa@w+1,7,c
  3002  000BB2  D007               	goto	u3020
  3003  000BB4  5036               	movf	utoa@w+1,w,c
  3004  000BB6  E103               	bnz	u3010
  3005  000BB8  0435               	decf	utoa@w,w,c
  3006  000BBA  A0D8               	btfss	status,0,c
  3007  000BBC  D002               	goto	u3020
  3008  000BBE                     u3010:
  3009  000BBE  B257               	btfsc	_flags,1,c
  3010  000BC0  D76C               	goto	l406
  3011  000BC2                     u3020:
  3012                           
  3013                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 618:     return pad(
      +                          fp, &dbuf[i], w);
  3014  000BC2  C021  F016         	movff	utoa@fp,pad@fp
  3015  000BC6  C022  F017         	movff	utoa@fp+1,pad@fp+1
  3016  000BCA  0EBF               	movlw	low _dbuf
  3017  000BCC  243F               	addwf	utoa@i,w,c
  3018  000BCE  6E18               	movwf	pad@buf,c
  3019  000BD0  0E00               	movlw	high _dbuf
  3020  000BD2  2040               	addwfc	utoa@i+1,w,c
  3021  000BD4  6E19               	movwf	pad@buf+1,c
  3022  000BD6  C035  F01A         	movff	utoa@w,pad@p
  3023  000BDA  C036  F01B         	movff	utoa@w+1,pad@p+1
  3024  000BDE  EC12  F00B         	call	_pad	;wreg free
  3025  000BE2  C016  F021         	movff	?_pad,?_utoa
  3026  000BE6  C017  F022         	movff	?_pad+1,?_utoa+1
  3027  000BEA  0012               	return	
  3028  000BEC                     __end_of_utoa:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function ___lomod *****************
  3044 ;; Defined at:
  3045 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/lomod.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  dividend        8    5[COMRAM] unsigned long long 
  3048 ;;  divisor         8   13[COMRAM] unsigned long long 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  counter         1   21[COMRAM] unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  8    5[COMRAM] unsigned long long 
  3053 ;; Registers used:
  3054 ;;		wreg, status,2, status,0
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3060 ;;      Params:        16       0       0       0
  3061 ;;      Locals:         1       0       0       0
  3062 ;;      Temps:          0       0       0       0
  3063 ;;      Totals:        17       0       0       0
  3064 ;;Total ram usage:       17 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    1
  3067 ;; This function calls:
  3068 ;;		Nothing
  3069 ;; This function is called by:
  3070 ;;		_utoa
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text12
  3075  001314                     __ptext12:
  3076                           	opt stack 0
  3077  001314                     ___lomod:
  3078                           	opt stack 24
  3079                           
  3080                           ;incstack = 0
  3081  001314  500E               	movf	___lomod@divisor,w,c
  3082  001316  100F               	iorwf	___lomod@divisor+1,w,c
  3083  001318  1010               	iorwf	___lomod@divisor+2,w,c
  3084  00131A  1011               	iorwf	___lomod@divisor+3,w,c
  3085  00131C  1012               	iorwf	___lomod@divisor+4,w,c
  3086  00131E  1013               	iorwf	___lomod@divisor+5,w,c
  3087  001320  1014               	iorwf	___lomod@divisor+6,w,c
  3088  001322  1015               	iorwf	___lomod@divisor+7,w,c
  3089  001324  B4D8               	btfsc	status,2,c
  3090  001326  D03C               	goto	l884
  3091  001328  0E01               	movlw	1
  3092  00132A  6E16               	movwf	___lomod@counter,c
  3093  00132C  D00A               	goto	l879
  3094  00132E  90D8               	bcf	status,0,c
  3095  001330  360E               	rlcf	___lomod@divisor,f,c
  3096  001332  360F               	rlcf	___lomod@divisor+1,f,c
  3097  001334  3610               	rlcf	___lomod@divisor+2,f,c
  3098  001336  3611               	rlcf	___lomod@divisor+3,f,c
  3099  001338  3612               	rlcf	___lomod@divisor+4,f,c
  3100  00133A  3613               	rlcf	___lomod@divisor+5,f,c
  3101  00133C  3614               	rlcf	___lomod@divisor+6,f,c
  3102  00133E  3615               	rlcf	___lomod@divisor+7,f,c
  3103  001340  2A16               	incf	___lomod@counter,f,c
  3104  001342                     l879:
  3105  001342  AE15               	btfss	___lomod@divisor+7,7,c
  3106  001344  D7F4               	goto	l880
  3107  001346                     u2790:
  3108  001346  500E               	movf	___lomod@divisor,w,c
  3109  001348  5C06               	subwf	___lomod@dividend,w,c
  3110  00134A  500F               	movf	___lomod@divisor+1,w,c
  3111  00134C  5807               	subwfb	___lomod@dividend+1,w,c
  3112  00134E  5010               	movf	___lomod@divisor+2,w,c
  3113  001350  5808               	subwfb	___lomod@dividend+2,w,c
  3114  001352  5011               	movf	___lomod@divisor+3,w,c
  3115  001354  5809               	subwfb	___lomod@dividend+3,w,c
  3116  001356  5012               	movf	___lomod@divisor+4,w,c
  3117  001358  580A               	subwfb	___lomod@dividend+4,w,c
  3118  00135A  5013               	movf	___lomod@divisor+5,w,c
  3119  00135C  580B               	subwfb	___lomod@dividend+5,w,c
  3120  00135E  5014               	movf	___lomod@divisor+6,w,c
  3121  001360  580C               	subwfb	___lomod@dividend+6,w,c
  3122  001362  5015               	movf	___lomod@divisor+7,w,c
  3123  001364  580D               	subwfb	___lomod@dividend+7,w,c
  3124  001366  A0D8               	btfss	status,0,c
  3125  001368  D010               	goto	l883
  3126  00136A  500E               	movf	___lomod@divisor,w,c
  3127  00136C  5E06               	subwf	___lomod@dividend,f,c
  3128  00136E  500F               	movf	___lomod@divisor+1,w,c
  3129  001370  5A07               	subwfb	___lomod@dividend+1,f,c
  3130  001372  5010               	movf	___lomod@divisor+2,w,c
  3131  001374  5A08               	subwfb	___lomod@dividend+2,f,c
  3132  001376  5011               	movf	___lomod@divisor+3,w,c
  3133  001378  5A09               	subwfb	___lomod@dividend+3,f,c
  3134  00137A  5012               	movf	___lomod@divisor+4,w,c
  3135  00137C  5A0A               	subwfb	___lomod@dividend+4,f,c
  3136  00137E  5013               	movf	___lomod@divisor+5,w,c
  3137  001380  5A0B               	subwfb	___lomod@dividend+5,f,c
  3138  001382  5014               	movf	___lomod@divisor+6,w,c
  3139  001384  5A0C               	subwfb	___lomod@dividend+6,f,c
  3140  001386  5015               	movf	___lomod@divisor+7,w,c
  3141  001388  5A0D               	subwfb	___lomod@dividend+7,f,c
  3142  00138A                     l883:
  3143  00138A  90D8               	bcf	status,0,c
  3144  00138C  3215               	rrcf	___lomod@divisor+7,f,c
  3145  00138E  3214               	rrcf	___lomod@divisor+6,f,c
  3146  001390  3213               	rrcf	___lomod@divisor+5,f,c
  3147  001392  3212               	rrcf	___lomod@divisor+4,f,c
  3148  001394  3211               	rrcf	___lomod@divisor+3,f,c
  3149  001396  3210               	rrcf	___lomod@divisor+2,f,c
  3150  001398  320F               	rrcf	___lomod@divisor+1,f,c
  3151  00139A  320E               	rrcf	___lomod@divisor,f,c
  3152  00139C  2E16               	decfsz	___lomod@counter,f,c
  3153  00139E  D7D3               	goto	u2790
  3154  0013A0                     l884:
  3155  0013A0  C006  F006         	movff	___lomod@dividend,?___lomod
  3156  0013A4  C007  F007         	movff	___lomod@dividend+1,?___lomod+1
  3157  0013A8  C008  F008         	movff	___lomod@dividend+2,?___lomod+2
  3158  0013AC  C009  F009         	movff	___lomod@dividend+3,?___lomod+3
  3159  0013B0  C00A  F00A         	movff	___lomod@dividend+4,?___lomod+4
  3160  0013B4  C00B  F00B         	movff	___lomod@dividend+5,?___lomod+5
  3161  0013B8  C00C  F00C         	movff	___lomod@dividend+6,?___lomod+6
  3162  0013BC  C00D  F00D         	movff	___lomod@dividend+7,?___lomod+7
  3163  0013C0  0012               	return		;funcret
  3164  0013C2                     __end_of___lomod:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           postinc0	equ	0xFEE
  3171                           wreg	equ	0xFE8
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function ___lodiv *****************
  3180 ;; Defined at:
  3181 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/lodiv.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  dividend        8    5[COMRAM] unsigned long long 
  3184 ;;  divisor         8   13[COMRAM] unsigned long long 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  quotient        8   21[COMRAM] unsigned long long 
  3187 ;;  counter         1   29[COMRAM] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  8    5[COMRAM] unsigned long long 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3197 ;;      Params:        16       0       0       0
  3198 ;;      Locals:         9       0       0       0
  3199 ;;      Temps:          0       0       0       0
  3200 ;;      Totals:        25       0       0       0
  3201 ;;Total ram usage:       25 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    1
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_utoa
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text13
  3212  0010C4                     __ptext13:
  3213                           	opt stack 0
  3214  0010C4                     ___lodiv:
  3215                           	opt stack 24
  3216                           
  3217                           ;incstack = 0
  3218  0010C4  EE20  F016         	lfsr	2,___lodiv@quotient
  3219  0010C8  0E07               	movlw	7
  3220  0010CA                     u2741:
  3221  0010CA  6ADE               	clrf	postinc2,c
  3222  0010CC  06E8               	decf	wreg,f,c
  3223  0010CE  E2FD               	bc	u2741
  3224  0010D0  500E               	movf	___lodiv@divisor,w,c
  3225  0010D2  100F               	iorwf	___lodiv@divisor+1,w,c
  3226  0010D4  1010               	iorwf	___lodiv@divisor+2,w,c
  3227  0010D6  1011               	iorwf	___lodiv@divisor+3,w,c
  3228  0010D8  1012               	iorwf	___lodiv@divisor+4,w,c
  3229  0010DA  1013               	iorwf	___lodiv@divisor+5,w,c
  3230  0010DC  1014               	iorwf	___lodiv@divisor+6,w,c
  3231  0010DE  1015               	iorwf	___lodiv@divisor+7,w,c
  3232  0010E0  B4D8               	btfsc	status,2,c
  3233  0010E2  D046               	goto	l874
  3234  0010E4  0E01               	movlw	1
  3235  0010E6  6E1E               	movwf	___lodiv@counter,c
  3236  0010E8  D00A               	goto	l869
  3237  0010EA  90D8               	bcf	status,0,c
  3238  0010EC  360E               	rlcf	___lodiv@divisor,f,c
  3239  0010EE  360F               	rlcf	___lodiv@divisor+1,f,c
  3240  0010F0  3610               	rlcf	___lodiv@divisor+2,f,c
  3241  0010F2  3611               	rlcf	___lodiv@divisor+3,f,c
  3242  0010F4  3612               	rlcf	___lodiv@divisor+4,f,c
  3243  0010F6  3613               	rlcf	___lodiv@divisor+5,f,c
  3244  0010F8  3614               	rlcf	___lodiv@divisor+6,f,c
  3245  0010FA  3615               	rlcf	___lodiv@divisor+7,f,c
  3246  0010FC  2A1E               	incf	___lodiv@counter,f,c
  3247  0010FE                     l869:
  3248  0010FE  AE15               	btfss	___lodiv@divisor+7,7,c
  3249  001100  D7F4               	goto	l870
  3250  001102                     u2760:
  3251  001102  90D8               	bcf	status,0,c
  3252  001104  3616               	rlcf	___lodiv@quotient,f,c
  3253  001106  3617               	rlcf	___lodiv@quotient+1,f,c
  3254  001108  3618               	rlcf	___lodiv@quotient+2,f,c
  3255  00110A  3619               	rlcf	___lodiv@quotient+3,f,c
  3256  00110C  361A               	rlcf	___lodiv@quotient+4,f,c
  3257  00110E  361B               	rlcf	___lodiv@quotient+5,f,c
  3258  001110  361C               	rlcf	___lodiv@quotient+6,f,c
  3259  001112  361D               	rlcf	___lodiv@quotient+7,f,c
  3260  001114  500E               	movf	___lodiv@divisor,w,c
  3261  001116  5C06               	subwf	___lodiv@dividend,w,c
  3262  001118  500F               	movf	___lodiv@divisor+1,w,c
  3263  00111A  5807               	subwfb	___lodiv@dividend+1,w,c
  3264  00111C  5010               	movf	___lodiv@divisor+2,w,c
  3265  00111E  5808               	subwfb	___lodiv@dividend+2,w,c
  3266  001120  5011               	movf	___lodiv@divisor+3,w,c
  3267  001122  5809               	subwfb	___lodiv@dividend+3,w,c
  3268  001124  5012               	movf	___lodiv@divisor+4,w,c
  3269  001126  580A               	subwfb	___lodiv@dividend+4,w,c
  3270  001128  5013               	movf	___lodiv@divisor+5,w,c
  3271  00112A  580B               	subwfb	___lodiv@dividend+5,w,c
  3272  00112C  5014               	movf	___lodiv@divisor+6,w,c
  3273  00112E  580C               	subwfb	___lodiv@dividend+6,w,c
  3274  001130  5015               	movf	___lodiv@divisor+7,w,c
  3275  001132  580D               	subwfb	___lodiv@dividend+7,w,c
  3276  001134  A0D8               	btfss	status,0,c
  3277  001136  D011               	goto	l873
  3278  001138  500E               	movf	___lodiv@divisor,w,c
  3279  00113A  5E06               	subwf	___lodiv@dividend,f,c
  3280  00113C  500F               	movf	___lodiv@divisor+1,w,c
  3281  00113E  5A07               	subwfb	___lodiv@dividend+1,f,c
  3282  001140  5010               	movf	___lodiv@divisor+2,w,c
  3283  001142  5A08               	subwfb	___lodiv@dividend+2,f,c
  3284  001144  5011               	movf	___lodiv@divisor+3,w,c
  3285  001146  5A09               	subwfb	___lodiv@dividend+3,f,c
  3286  001148  5012               	movf	___lodiv@divisor+4,w,c
  3287  00114A  5A0A               	subwfb	___lodiv@dividend+4,f,c
  3288  00114C  5013               	movf	___lodiv@divisor+5,w,c
  3289  00114E  5A0B               	subwfb	___lodiv@dividend+5,f,c
  3290  001150  5014               	movf	___lodiv@divisor+6,w,c
  3291  001152  5A0C               	subwfb	___lodiv@dividend+6,f,c
  3292  001154  5015               	movf	___lodiv@divisor+7,w,c
  3293  001156  5A0D               	subwfb	___lodiv@dividend+7,f,c
  3294  001158  8016               	bsf	___lodiv@quotient,0,c
  3295  00115A                     l873:
  3296  00115A  90D8               	bcf	status,0,c
  3297  00115C  3215               	rrcf	___lodiv@divisor+7,f,c
  3298  00115E  3214               	rrcf	___lodiv@divisor+6,f,c
  3299  001160  3213               	rrcf	___lodiv@divisor+5,f,c
  3300  001162  3212               	rrcf	___lodiv@divisor+4,f,c
  3301  001164  3211               	rrcf	___lodiv@divisor+3,f,c
  3302  001166  3210               	rrcf	___lodiv@divisor+2,f,c
  3303  001168  320F               	rrcf	___lodiv@divisor+1,f,c
  3304  00116A  320E               	rrcf	___lodiv@divisor,f,c
  3305  00116C  2E1E               	decfsz	___lodiv@counter,f,c
  3306  00116E  D7C9               	goto	u2760
  3307  001170                     l874:
  3308  001170  C016  F006         	movff	___lodiv@quotient,?___lodiv
  3309  001174  C017  F007         	movff	___lodiv@quotient+1,?___lodiv+1
  3310  001178  C018  F008         	movff	___lodiv@quotient+2,?___lodiv+2
  3311  00117C  C019  F009         	movff	___lodiv@quotient+3,?___lodiv+3
  3312  001180  C01A  F00A         	movff	___lodiv@quotient+4,?___lodiv+4
  3313  001184  C01B  F00B         	movff	___lodiv@quotient+5,?___lodiv+5
  3314  001188  C01C  F00C         	movff	___lodiv@quotient+6,?___lodiv+6
  3315  00118C  C01D  F00D         	movff	___lodiv@quotient+7,?___lodiv+7
  3316  001190  0012               	return		;funcret
  3317  001192                     __end_of___lodiv:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           indf2	equ	0xFDF
  3326                           postinc2	equ	0xFDE
  3327                           postdec2	equ	0xFDD
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _dtoa *****************
  3333 ;; Defined at:
  3334 ;;		line 274 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  fp              2   32[COMRAM] PTR struct _IO_FILE
  3337 ;;		 -> sprintf@f(6), 
  3338 ;;  d               8   34[COMRAM] long long 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  n               8   58[COMRAM] long long 
  3341 ;;  i               2   66[COMRAM] int 
  3342 ;;  s               2   56[COMRAM] int 
  3343 ;;  w               2   54[COMRAM] int 
  3344 ;;  p               2   52[COMRAM] int 
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  2   32[COMRAM] int 
  3347 ;; Registers used:
  3348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3354 ;;      Params:        10       0       0       0
  3355 ;;      Locals:        18       0       0       0
  3356 ;;      Temps:          8       0       0       0
  3357 ;;      Totals:        36       0       0       0
  3358 ;;Total ram usage:       36 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    5
  3361 ;; This function calls:
  3362 ;;		___aodiv
  3363 ;;		___aomod
  3364 ;;		_abs
  3365 ;;		_pad
  3366 ;; This function is called by:
  3367 ;;		_vfpfcnvrt
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	text14
  3372  0005C2                     __ptext14:
  3373                           	opt stack 0
  3374  0005C2                     _dtoa:
  3375                           	opt stack 21
  3376                           
  3377                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  3378                           
  3379                           ;incstack = 0
  3380  0005C2  C023  F03B         	movff	dtoa@d,dtoa@n
  3381  0005C6  C024  F03C         	movff	dtoa@d+1,dtoa@n+1
  3382  0005CA  C025  F03D         	movff	dtoa@d+2,dtoa@n+2
  3383  0005CE  C026  F03E         	movff	dtoa@d+3,dtoa@n+3
  3384  0005D2  C027  F03F         	movff	dtoa@d+4,dtoa@n+4
  3385  0005D6  C028  F040         	movff	dtoa@d+5,dtoa@n+5
  3386  0005DA  C029  F041         	movff	dtoa@d+6,dtoa@n+6
  3387  0005DE  C02A  F042         	movff	dtoa@d+7,dtoa@n+7
  3388                           
  3389                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  3390  0005E2  AE42               	btfss	dtoa@n+7,7,c
  3391  0005E4  D002               	goto	u2810
  3392  0005E6  0E01               	movlw	1
  3393  0005E8  D001               	goto	u2820
  3394  0005EA                     u2810:
  3395  0005EA  0E00               	movlw	0
  3396  0005EC                     u2820:
  3397  0005EC  6E39               	movwf	dtoa@s,c
  3398  0005EE  6A3A               	clrf	dtoa@s+1,c
  3399                           
  3400                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  3401  0005F0  5039               	movf	dtoa@s,w,c
  3402  0005F2  103A               	iorwf	dtoa@s+1,w,c
  3403  0005F4  B4D8               	btfsc	status,2,c
  3404  0005F6  D010               	goto	l374
  3405                           
  3406                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  3407  0005F8  1E42               	comf	dtoa@n+7,f,c
  3408  0005FA  1E41               	comf	dtoa@n+6,f,c
  3409  0005FC  1E40               	comf	dtoa@n+5,f,c
  3410  0005FE  1E3F               	comf	dtoa@n+4,f,c
  3411  000600  1E3E               	comf	dtoa@n+3,f,c
  3412  000602  1E3D               	comf	dtoa@n+2,f,c
  3413  000604  1E3C               	comf	dtoa@n+1,f,c
  3414  000606  6C3B               	negf	dtoa@n,c
  3415  000608  0E00               	movlw	0
  3416  00060A  223C               	addwfc	dtoa@n+1,f,c
  3417  00060C  223D               	addwfc	dtoa@n+2,f,c
  3418  00060E  223E               	addwfc	dtoa@n+3,f,c
  3419  000610  223F               	addwfc	dtoa@n+4,f,c
  3420  000612  2240               	addwfc	dtoa@n+5,f,c
  3421  000614  2241               	addwfc	dtoa@n+6,f,c
  3422  000616  2242               	addwfc	dtoa@n+7,f,c
  3423  000618                     l374:
  3424                           
  3425                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  3426  000618  AE56               	btfss	_prec+1,7,c
  3427                           
  3428                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  3429  00061A  9257               	bcf	_flags,1,c
  3430                           
  3431                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  3432                           
  3433                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 289:     }
  3434  00061C  BE56               	btfsc	_prec+1,7,c
  3435  00061E  D005               	goto	u2850
  3436  000620  5056               	movf	_prec+1,w,c
  3437  000622  E108               	bnz	l377
  3438  000624  0455               	decf	_prec,w,c
  3439  000626  B0D8               	btfsc	status,0,c
  3440  000628  D005               	goto	l377
  3441  00062A                     u2850:
  3442  00062A  0E00               	movlw	0
  3443  00062C  6E36               	movwf	dtoa@p+1,c
  3444  00062E  0E01               	movlw	1
  3445  000630  6E35               	movwf	dtoa@p,c
  3446  000632  D004               	goto	l379
  3447  000634                     l377:
  3448  000634  C055  F035         	movff	_prec,dtoa@p
  3449  000638  C056  F036         	movff	_prec+1,dtoa@p+1
  3450  00063C                     l379:
  3451                           
  3452                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 291:     w = width;
  3453  00063C  C0BC  F037         	movff	_width,dtoa@w
  3454  000640  C0BD  F038         	movff	_width+1,dtoa@w+1
  3455                           
  3456                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  3457  000644  5039               	movf	dtoa@s,w,c
  3458  000646  103A               	iorwf	dtoa@s+1,w,c
  3459  000648  A4D8               	btfss	status,2,c
  3460  00064A  D002               	goto	u2870
  3461  00064C  A457               	btfss	_flags,2,c
  3462  00064E  D003               	goto	l380
  3463  000650                     u2870:
  3464                           
  3465                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 293:         --w;
  3466  000650  0637               	decf	dtoa@w,f,c
  3467  000652  A0D8               	btfss	status,0,c
  3468  000654  0638               	decf	dtoa@w+1,f,c
  3469  000656                     l380:
  3470                           
  3471                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  3472  000656  0E00               	movlw	0
  3473  000658  6E44               	movwf	dtoa@i+1,c
  3474  00065A  0E1F               	movlw	31
  3475  00065C  6E43               	movwf	dtoa@i,c
  3476                           
  3477                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  3478  00065E  0EBF               	movlw	low _dbuf
  3479  000660  2443               	addwf	dtoa@i,w,c
  3480  000662  6ED9               	movwf	fsr2l,c
  3481  000664  0E00               	movlw	high _dbuf
  3482  000666  2044               	addwfc	dtoa@i+1,w,c
  3483  000668  6EDA               	movwf	fsr2h,c
  3484  00066A  0E00               	movlw	0
  3485  00066C  6EDF               	movwf	indf2,c
  3486                           
  3487                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3488  00066E  D07C               	goto	l383
  3489  000670                     
  3490                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 300:         --i;
  3491  000670  0643               	decf	dtoa@i,f,c
  3492  000672  A0D8               	btfss	status,0,c
  3493  000674  0644               	decf	dtoa@i+1,f,c
  3494                           
  3495                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  3496  000676  0EBF               	movlw	low _dbuf
  3497  000678  2443               	addwf	dtoa@i,w,c
  3498  00067A  6ED9               	movwf	fsr2l,c
  3499  00067C  0E00               	movlw	high _dbuf
  3500  00067E  2044               	addwfc	dtoa@i+1,w,c
  3501  000680  6EDA               	movwf	fsr2h,c
  3502  000682  C03B  F006         	movff	dtoa@n,___aomod@dividend
  3503  000686  C03C  F007         	movff	dtoa@n+1,___aomod@dividend+1
  3504  00068A  C03D  F008         	movff	dtoa@n+2,___aomod@dividend+2
  3505  00068E  C03E  F009         	movff	dtoa@n+3,___aomod@dividend+3
  3506  000692  C03F  F00A         	movff	dtoa@n+4,___aomod@dividend+4
  3507  000696  C040  F00B         	movff	dtoa@n+5,___aomod@dividend+5
  3508  00069A  C041  F00C         	movff	dtoa@n+6,___aomod@dividend+6
  3509  00069E  C042  F00D         	movff	dtoa@n+7,___aomod@dividend+7
  3510  0006A2  0E0A               	movlw	10
  3511  0006A4  6E0E               	movwf	___aomod@divisor,c
  3512  0006A6  0E00               	movlw	0
  3513  0006A8  6E0F               	movwf	___aomod@divisor+1,c
  3514  0006AA  0E00               	movlw	0
  3515  0006AC  6E10               	movwf	___aomod@divisor+2,c
  3516  0006AE  0E00               	movlw	0
  3517  0006B0  6E11               	movwf	___aomod@divisor+3,c
  3518  0006B2  0E00               	movlw	0
  3519  0006B4  6E12               	movwf	___aomod@divisor+4,c
  3520  0006B6  0E00               	movlw	0
  3521  0006B8  6E13               	movwf	___aomod@divisor+5,c
  3522  0006BA  0E00               	movlw	0
  3523  0006BC  6E14               	movwf	___aomod@divisor+6,c
  3524  0006BE  0E00               	movlw	0
  3525  0006C0  6E15               	movwf	___aomod@divisor+7,c
  3526  0006C2  EC5B  F007         	call	___aomod	;wreg free
  3527  0006C6  C006  F02B         	movff	?___aomod,??_dtoa
  3528  0006CA  C007  F02C         	movff	?___aomod+1,??_dtoa+1
  3529  0006CE  C008  F02D         	movff	?___aomod+2,??_dtoa+2
  3530  0006D2  C009  F02E         	movff	?___aomod+3,??_dtoa+3
  3531  0006D6  C00A  F02F         	movff	?___aomod+4,??_dtoa+4
  3532  0006DA  C00B  F030         	movff	?___aomod+5,??_dtoa+5
  3533  0006DE  C00C  F031         	movff	?___aomod+6,??_dtoa+6
  3534  0006E2  C00D  F032         	movff	?___aomod+7,??_dtoa+7
  3535  0006E6  C02B  F018         	movff	??_dtoa,abs@a
  3536  0006EA  C02D  F019         	movff	??_dtoa+2,abs@a+1
  3537  0006EE  EC30  F00D         	call	_abs	;wreg free
  3538  0006F2  5018               	movf	?_abs,w,c
  3539  0006F4  0F30               	addlw	48
  3540  0006F6  6EDF               	movwf	indf2,c
  3541                           
  3542                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 302:         --p;
  3543  0006F8  0635               	decf	dtoa@p,f,c
  3544  0006FA  A0D8               	btfss	status,0,c
  3545  0006FC  0636               	decf	dtoa@p+1,f,c
  3546                           
  3547                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 303:         --w;
  3548  0006FE  0637               	decf	dtoa@w,f,c
  3549  000700  A0D8               	btfss	status,0,c
  3550  000702  0638               	decf	dtoa@w+1,f,c
  3551                           
  3552                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  3553  000704  C03B  F006         	movff	dtoa@n,___aodiv@dividend
  3554  000708  C03C  F007         	movff	dtoa@n+1,___aodiv@dividend+1
  3555  00070C  C03D  F008         	movff	dtoa@n+2,___aodiv@dividend+2
  3556  000710  C03E  F009         	movff	dtoa@n+3,___aodiv@dividend+3
  3557  000714  C03F  F00A         	movff	dtoa@n+4,___aodiv@dividend+4
  3558  000718  C040  F00B         	movff	dtoa@n+5,___aodiv@dividend+5
  3559  00071C  C041  F00C         	movff	dtoa@n+6,___aodiv@dividend+6
  3560  000720  C042  F00D         	movff	dtoa@n+7,___aodiv@dividend+7
  3561  000724  0E0A               	movlw	10
  3562  000726  6E0E               	movwf	___aodiv@divisor,c
  3563  000728  0E00               	movlw	0
  3564  00072A  6E0F               	movwf	___aodiv@divisor+1,c
  3565  00072C  0E00               	movlw	0
  3566  00072E  6E10               	movwf	___aodiv@divisor+2,c
  3567  000730  0E00               	movlw	0
  3568  000732  6E11               	movwf	___aodiv@divisor+3,c
  3569  000734  0E00               	movlw	0
  3570  000736  6E12               	movwf	___aodiv@divisor+4,c
  3571  000738  0E00               	movlw	0
  3572  00073A  6E13               	movwf	___aodiv@divisor+5,c
  3573  00073C  0E00               	movlw	0
  3574  00073E  6E14               	movwf	___aodiv@divisor+6,c
  3575  000740  0E00               	movlw	0
  3576  000742  6E15               	movwf	___aodiv@divisor+7,c
  3577  000744  ECB7  F006         	call	___aodiv	;wreg free
  3578  000748  C006  F03B         	movff	?___aodiv,dtoa@n
  3579  00074C  C007  F03C         	movff	?___aodiv+1,dtoa@n+1
  3580  000750  C008  F03D         	movff	?___aodiv+2,dtoa@n+2
  3581  000754  C009  F03E         	movff	?___aodiv+3,dtoa@n+3
  3582  000758  C00A  F03F         	movff	?___aodiv+4,dtoa@n+4
  3583  00075C  C00B  F040         	movff	?___aodiv+5,dtoa@n+5
  3584  000760  C00C  F041         	movff	?___aodiv+6,dtoa@n+6
  3585  000764  C00D  F042         	movff	?___aodiv+7,dtoa@n+7
  3586  000768                     l383:
  3587                           
  3588                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3589  000768  BE44               	btfsc	dtoa@i+1,7,c
  3590  00076A  D01F               	goto	u2920
  3591  00076C  5044               	movf	dtoa@i+1,w,c
  3592  00076E  E103               	bnz	u2880
  3593  000770  0443               	decf	dtoa@i,w,c
  3594  000772  A0D8               	btfss	status,0,c
  3595  000774  D01A               	goto	u2920
  3596  000776                     u2880:
  3597  000776  503B               	movf	dtoa@n,w,c
  3598  000778  103C               	iorwf	dtoa@n+1,w,c
  3599  00077A  103D               	iorwf	dtoa@n+2,w,c
  3600  00077C  103E               	iorwf	dtoa@n+3,w,c
  3601  00077E  103F               	iorwf	dtoa@n+4,w,c
  3602  000780  1040               	iorwf	dtoa@n+5,w,c
  3603  000782  1041               	iorwf	dtoa@n+6,w,c
  3604  000784  1042               	iorwf	dtoa@n+7,w,c
  3605  000786  A4D8               	btfss	status,2,c
  3606  000788  D773               	goto	l384
  3607  00078A  BE36               	btfsc	dtoa@p+1,7,c
  3608  00078C  D005               	goto	u2900
  3609  00078E  5036               	movf	dtoa@p+1,w,c
  3610  000790  E102               	bnz	u2901
  3611  000792  0435               	decf	dtoa@p,w,c
  3612  000794  B0D8               	btfsc	status,0,c
  3613  000796                     u2901:
  3614  000796  D76C               	goto	l384
  3615  000798                     u2900:
  3616  000798  BE38               	btfsc	dtoa@w+1,7,c
  3617  00079A  D007               	goto	u2920
  3618  00079C  5038               	movf	dtoa@w+1,w,c
  3619  00079E  E103               	bnz	u2910
  3620  0007A0  0437               	decf	dtoa@w,w,c
  3621  0007A2  A0D8               	btfss	status,0,c
  3622  0007A4  D002               	goto	u2920
  3623  0007A6                     u2910:
  3624  0007A6  B257               	btfsc	_flags,1,c
  3625  0007A8  D763               	goto	l384
  3626  0007AA                     u2920:
  3627                           
  3628                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  3629  0007AA  5039               	movf	dtoa@s,w,c
  3630  0007AC  103A               	iorwf	dtoa@s+1,w,c
  3631  0007AE  A4D8               	btfss	status,2,c
  3632  0007B0  D002               	goto	u2940
  3633  0007B2  A457               	btfss	_flags,2,c
  3634  0007B4  D017               	goto	l390
  3635  0007B6                     u2940:
  3636                           
  3637                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 309:         --i;
  3638  0007B6  0643               	decf	dtoa@i,f,c
  3639  0007B8  A0D8               	btfss	status,0,c
  3640  0007BA  0644               	decf	dtoa@i+1,f,c
  3641                           
  3642                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  3643  0007BC  5039               	movf	dtoa@s,w,c
  3644  0007BE  103A               	iorwf	dtoa@s+1,w,c
  3645  0007C0  A4D8               	btfss	status,2,c
  3646  0007C2  D004               	goto	l394
  3647  0007C4  0E00               	movlw	0
  3648  0007C6  6E34               	movwf	_dtoa$1257+1,c
  3649  0007C8  0E2B               	movlw	43
  3650  0007CA  D003               	goto	L4
  3651  0007CC                     l394:
  3652  0007CC  0E00               	movlw	0
  3653  0007CE  6E34               	movwf	_dtoa$1257+1,c
  3654  0007D0  0E2D               	movlw	45
  3655  0007D2                     L4:
  3656  0007D2  6E33               	movwf	_dtoa$1257,c
  3657  0007D4  0EBF               	movlw	low _dbuf
  3658  0007D6  2443               	addwf	dtoa@i,w,c
  3659  0007D8  6ED9               	movwf	fsr2l,c
  3660  0007DA  0E00               	movlw	high _dbuf
  3661  0007DC  2044               	addwfc	dtoa@i+1,w,c
  3662  0007DE  6EDA               	movwf	fsr2h,c
  3663  0007E0  C033  FFDF         	movff	_dtoa$1257,indf2
  3664  0007E4                     l390:
  3665                           
  3666                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  3667  0007E4  C021  F016         	movff	dtoa@fp,pad@fp
  3668  0007E8  C022  F017         	movff	dtoa@fp+1,pad@fp+1
  3669  0007EC  0EBF               	movlw	low _dbuf
  3670  0007EE  2443               	addwf	dtoa@i,w,c
  3671  0007F0  6E18               	movwf	pad@buf,c
  3672  0007F2  0E00               	movlw	high _dbuf
  3673  0007F4  2044               	addwfc	dtoa@i+1,w,c
  3674  0007F6  6E19               	movwf	pad@buf+1,c
  3675  0007F8  C037  F01A         	movff	dtoa@w,pad@p
  3676  0007FC  C038  F01B         	movff	dtoa@w+1,pad@p+1
  3677  000800  EC12  F00B         	call	_pad	;wreg free
  3678  000804  C016  F021         	movff	?_pad,?_dtoa
  3679  000808  C017  F022         	movff	?_pad+1,?_dtoa+1
  3680  00080C  0012               	return	
  3681  00080E                     __end_of_dtoa:
  3682                           	opt stack 0
  3683                           tblptru	equ	0xFF8
  3684                           tblptrh	equ	0xFF7
  3685                           tblptrl	equ	0xFF6
  3686                           tablat	equ	0xFF5
  3687                           postinc0	equ	0xFEE
  3688                           wreg	equ	0xFE8
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _pad *****************
  3697 ;; Defined at:
  3698 ;;		line 72 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  fp              2   21[COMRAM] PTR struct _IO_FILE
  3701 ;;		 -> sprintf@f(6), 
  3702 ;;  buf             2   23[COMRAM] PTR unsigned char 
  3703 ;;		 -> dbuf(32), 
  3704 ;;  p               2   25[COMRAM] int 
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;  w               2   30[COMRAM] int 
  3707 ;;  i               2   28[COMRAM] int 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  2   21[COMRAM] int 
  3710 ;; Registers used:
  3711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3717 ;;      Params:         6       0       0       0
  3718 ;;      Locals:         4       0       0       0
  3719 ;;      Temps:          1       0       0       0
  3720 ;;      Totals:        11       0       0       0
  3721 ;;Total ram usage:       11 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    4
  3724 ;; This function calls:
  3725 ;;		_fputc
  3726 ;;		_fputs
  3727 ;;		_strlen
  3728 ;; This function is called by:
  3729 ;;		_dtoa
  3730 ;;		_utoa
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text15
  3735  001624                     __ptext15:
  3736                           	opt stack 0
  3737  001624                     _pad:
  3738                           	opt stack 21
  3739                           
  3740                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.00/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3741                           
  3742                           ;incstack = 0
  3743  001624  A057               	btfss	_flags,0,c
  3744  001626  D00A               	goto	l362
  3745                           
  3746                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3747  001628  C018  F00F         	movff	pad@buf,fputs@s
  3748  00162C  C019  F010         	movff	pad@buf+1,fputs@s+1
  3749  001630  C016  F011         	movff	pad@fp,fputs@fp
  3750  001634  C017  F012         	movff	pad@fp+1,fputs@fp+1
  3751  001638  EC14  F00D         	call	_fputs	;wreg free
  3752  00163C                     l362:
  3753                           
  3754                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3755  00163C  BE1B               	btfsc	pad@p+1,7,c
  3756  00163E  D005               	goto	l364
  3757  001640  C01A  F01F         	movff	pad@p,pad@w
  3758  001644  C01B  F020         	movff	pad@p+1,pad@w+1
  3759  001648  D004               	goto	l366
  3760  00164A                     l364:
  3761  00164A  0E00               	movlw	0
  3762  00164C  6E20               	movwf	pad@w+1,c
  3763  00164E  0E00               	movlw	0
  3764  001650  6E1F               	movwf	pad@w,c
  3765  001652                     l366:
  3766                           
  3767                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3768  001652  0E00               	movlw	0
  3769  001654  6E1E               	movwf	pad@i+1,c
  3770  001656  0E00               	movlw	0
  3771  001658  6E1D               	movwf	pad@i,c
  3772                           
  3773                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3774  00165A  D00C               	goto	l367
  3775  00165C                     
  3776                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3777  00165C  0E00               	movlw	0
  3778  00165E  6E07               	movwf	fputc@c+1,c
  3779  001660  0E20               	movlw	32
  3780  001662  6E06               	movwf	fputc@c,c
  3781  001664  C016  F008         	movff	pad@fp,fputc@fp
  3782  001668  C017  F009         	movff	pad@fp+1,fputc@fp+1
  3783  00166C  ECE1  F009         	call	_fputc	;wreg free
  3784                           
  3785                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3786  001670  4A1D               	infsnz	pad@i,f,c
  3787  001672  2A1E               	incf	pad@i+1,f,c
  3788  001674                     l367:
  3789                           
  3790                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3791  001674  501F               	movf	pad@w,w,c
  3792  001676  5C1D               	subwf	pad@i,w,c
  3793  001678  501E               	movf	pad@i+1,w,c
  3794  00167A  0A80               	xorlw	128
  3795  00167C  6E1C               	movwf	??_pad& (0+255),c
  3796  00167E  5020               	movf	pad@w+1,w,c
  3797  001680  0A80               	xorlw	128
  3798  001682  581C               	subwfb	??_pad& (0+255),w,c
  3799  001684  A0D8               	btfss	status,0,c
  3800  001686  D7EA               	goto	l368
  3801                           
  3802                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3803  001688  B057               	btfsc	_flags,0,c
  3804  00168A  D00A               	goto	l370
  3805                           
  3806                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3807  00168C  C018  F00F         	movff	pad@buf,fputs@s
  3808  001690  C019  F010         	movff	pad@buf+1,fputs@s+1
  3809  001694  C016  F011         	movff	pad@fp,fputs@fp
  3810  001698  C017  F012         	movff	pad@fp+1,fputs@fp+1
  3811  00169C  EC14  F00D         	call	_fputs	;wreg free
  3812  0016A0                     l370:
  3813                           
  3814                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3815  0016A0  C018  F006         	movff	pad@buf,strlen@s
  3816  0016A4  C019  F007         	movff	pad@buf+1,strlen@s+1
  3817  0016A8  ECF7  F00C         	call	_strlen	;wreg free
  3818  0016AC  501F               	movf	pad@w,w,c
  3819  0016AE  2406               	addwf	?_strlen,w,c
  3820  0016B0  6E16               	movwf	?_pad,c
  3821  0016B2  5020               	movf	pad@w+1,w,c
  3822  0016B4  2007               	addwfc	?_strlen+1,w,c
  3823  0016B6  6E17               	movwf	?_pad+1,c
  3824  0016B8  0012               	return	
  3825  0016BA                     __end_of_pad:
  3826                           	opt stack 0
  3827                           tblptru	equ	0xFF8
  3828                           tblptrh	equ	0xFF7
  3829                           tblptrl	equ	0xFF6
  3830                           tablat	equ	0xFF5
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           indf2	equ	0xFDF
  3834                           postinc2	equ	0xFDE
  3835                           postdec2	equ	0xFDD
  3836                           fsr2h	equ	0xFDA
  3837                           fsr2l	equ	0xFD9
  3838                           status	equ	0xFD8
  3839                           
  3840 ;; *************** function _strlen *****************
  3841 ;; Defined at:
  3842 ;;		line 12 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/strlen.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  s               2    5[COMRAM] PTR const unsigned char 
  3845 ;;		 -> dbuf(32), 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  a               2    9[COMRAM] PTR const unsigned char 
  3848 ;;		 -> dbuf(32), 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  2    5[COMRAM] unsigned int 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3858 ;;      Params:         2       0       0       0
  3859 ;;      Locals:         2       0       0       0
  3860 ;;      Temps:          2       0       0       0
  3861 ;;      Totals:         6       0       0       0
  3862 ;;Total ram usage:        6 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    1
  3865 ;; This function calls:
  3866 ;;		Nothing
  3867 ;; This function is called by:
  3868 ;;		_pad
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text16
  3873  0019EE                     __ptext16:
  3874                           	opt stack 0
  3875  0019EE                     _strlen:
  3876                           	opt stack 23
  3877                           
  3878                           ;incstack = 0
  3879  0019EE  C006  F00A         	movff	strlen@s,strlen@a
  3880  0019F2  C007  F00B         	movff	strlen@s+1,strlen@a+1
  3881  0019F6  D002               	goto	l1141
  3882  0019F8  4A06               	infsnz	strlen@s,f,c
  3883  0019FA  2A07               	incf	strlen@s+1,f,c
  3884  0019FC                     l1141:
  3885  0019FC  C006  FFD9         	movff	strlen@s,fsr2l
  3886  001A00  C007  FFDA         	movff	strlen@s+1,fsr2h
  3887  001A04  50DF               	movf	indf2,w,c
  3888  001A06  A4D8               	btfss	status,2,c
  3889  001A08  D7F7               	goto	l1142
  3890  001A0A  C00A  F008         	movff	strlen@a,??_strlen
  3891  001A0E  C00B  F009         	movff	strlen@a+1,??_strlen+1
  3892  001A12  1E08               	comf	??_strlen,f,c
  3893  001A14  1E09               	comf	??_strlen+1,f,c
  3894  001A16  4A08               	infsnz	??_strlen,f,c
  3895  001A18  2A09               	incf	??_strlen+1,f,c
  3896  001A1A  5006               	movf	strlen@s,w,c
  3897  001A1C  2408               	addwf	??_strlen,w,c
  3898  001A1E  6E06               	movwf	?_strlen,c
  3899  001A20  5007               	movf	strlen@s+1,w,c
  3900  001A22  2009               	addwfc	??_strlen+1,w,c
  3901  001A24  6E07               	movwf	?_strlen+1,c
  3902  001A26  0012               	return	
  3903  001A28                     __end_of_strlen:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           postinc0	equ	0xFEE
  3910                           wreg	equ	0xFE8
  3911                           indf2	equ	0xFDF
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _fputs *****************
  3919 ;; Defined at:
  3920 ;;		line 8 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/nf_fputs.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3923 ;;		 -> dbuf(32), 
  3924 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3925 ;;		 -> sprintf@f(6), 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  i               2   19[COMRAM] int 
  3928 ;;  c               1   18[COMRAM] unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2   14[COMRAM] int 
  3931 ;; Registers used:
  3932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3938 ;;      Params:         4       0       0       0
  3939 ;;      Locals:         3       0       0       0
  3940 ;;      Temps:          0       0       0       0
  3941 ;;      Totals:         7       0       0       0
  3942 ;;Total ram usage:        7 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    3
  3945 ;; This function calls:
  3946 ;;		_fputc
  3947 ;; This function is called by:
  3948 ;;		_pad
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text17
  3953  001A28                     __ptext17:
  3954                           	opt stack 0
  3955  001A28                     _fputs:
  3956                           	opt stack 21
  3957                           
  3958                           ;incstack = 0
  3959  001A28  0E00               	movlw	0
  3960  001A2A  6E15               	movwf	fputs@i+1,c
  3961  001A2C  0E00               	movlw	0
  3962  001A2E  6E14               	movwf	fputs@i,c
  3963  001A30  D00B               	goto	l1125
  3964  001A32  C013  F006         	movff	fputs@c,fputc@c
  3965  001A36  6A07               	clrf	fputc@c+1,c
  3966  001A38  C011  F008         	movff	fputs@fp,fputc@fp
  3967  001A3C  C012  F009         	movff	fputs@fp+1,fputc@fp+1
  3968  001A40  ECE1  F009         	call	_fputc	;wreg free
  3969  001A44  4A14               	infsnz	fputs@i,f,c
  3970  001A46  2A15               	incf	fputs@i+1,f,c
  3971  001A48                     l1125:
  3972  001A48  5014               	movf	fputs@i,w,c
  3973  001A4A  240F               	addwf	fputs@s,w,c
  3974  001A4C  6ED9               	movwf	fsr2l,c
  3975  001A4E  5015               	movf	fputs@i+1,w,c
  3976  001A50  2010               	addwfc	fputs@s+1,w,c
  3977  001A52  6EDA               	movwf	fsr2h,c
  3978  001A54  50DF               	movf	indf2,w,c
  3979  001A56  6E13               	movwf	fputs@c,c
  3980  001A58  5013               	movf	fputs@c,w,c
  3981  001A5A  B4D8               	btfsc	status,2,c
  3982  001A5C  0012               	return	
  3983  001A5E  D7E9               	goto	l1126
  3984  001A60                     __end_of_fputs:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           postdec2	equ	0xFDD
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function _fputc *****************
  4000 ;; Defined at:
  4001 ;;		line 8 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/nf_fputc.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  c               2    5[COMRAM] int 
  4004 ;;  fp              2    7[COMRAM] PTR struct _IO_FILE
  4005 ;;		 -> sprintf@f(6), 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;		None
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  2    5[COMRAM] int 
  4010 ;; Registers used:
  4011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4017 ;;      Params:         4       0       0       0
  4018 ;;      Locals:         0       0       0       0
  4019 ;;      Temps:          5       0       0       0
  4020 ;;      Totals:         9       0       0       0
  4021 ;;Total ram usage:        9 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    2
  4024 ;; This function calls:
  4025 ;;		_putch
  4026 ;; This function is called by:
  4027 ;;		_pad
  4028 ;;		_vfpfcnvrt
  4029 ;;		_fputs
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text18
  4034  0013C2                     __ptext18:
  4035                           	opt stack 0
  4036  0013C2                     _fputc:
  4037                           	opt stack 21
  4038                           
  4039                           ;incstack = 0
  4040  0013C2  5008               	movf	fputc@fp,w,c
  4041  0013C4  1009               	iorwf	fputc@fp+1,w,c
  4042  0013C6  B4D8               	btfsc	status,2,c
  4043  0013C8  D004               	goto	u2510
  4044  0013CA  5008               	movf	fputc@fp,w,c
  4045  0013CC  1009               	iorwf	fputc@fp+1,w,c
  4046  0013CE  A4D8               	btfss	status,2,c
  4047  0013D0  D004               	goto	l1113
  4048  0013D2                     u2510:
  4049  0013D2  5006               	movf	fputc@c,w,c
  4050  0013D4  EC0D  F00E         	call	_putch
  4051  0013D8  0012               	return	
  4052  0013DA                     l1113:
  4053  0013DA  EE20 F004          	lfsr	2,4
  4054  0013DE  5008               	movf	fputc@fp,w,c
  4055  0013E0  26D9               	addwf	fsr2l,f,c
  4056  0013E2  5009               	movf	fputc@fp+1,w,c
  4057  0013E4  22DA               	addwfc	fsr2h,f,c
  4058  0013E6  50DE               	movf	postinc2,w,c
  4059  0013E8  10DE               	iorwf	postinc2,w,c
  4060  0013EA  B4D8               	btfsc	status,2,c
  4061  0013EC  D016               	goto	u2530
  4062  0013EE  EE20 F004          	lfsr	2,4
  4063  0013F2  5008               	movf	fputc@fp,w,c
  4064  0013F4  26D9               	addwf	fsr2l,f,c
  4065  0013F6  5009               	movf	fputc@fp+1,w,c
  4066  0013F8  22DA               	addwfc	fsr2h,f,c
  4067  0013FA  EE10 F002          	lfsr	1,2
  4068  0013FE  5008               	movf	fputc@fp,w,c
  4069  001400  26E1               	addwf	fsr1l,f,c
  4070  001402  5009               	movf	fputc@fp+1,w,c
  4071  001404  22E2               	addwfc	fsr1h,f,c
  4072  001406  50DE               	movf	postinc2,w,c
  4073  001408  5CE6               	subwf	postinc1,w,c
  4074  00140A  50E6               	movf	postinc1,w,c
  4075  00140C  0A80               	xorlw	128
  4076  00140E  6E0E               	movwf	(??_fputc+4)& (0+255),c
  4077  001410  50DE               	movf	postinc2,w,c
  4078  001412  0A80               	xorlw	128
  4079  001414  580E               	subwfb	(??_fputc+4)& (0+255),w,c
  4080  001416  B0D8               	btfsc	status,0,c
  4081  001418  0012               	return	
  4082  00141A                     u2530:
  4083  00141A  EE20 F002          	lfsr	2,2
  4084  00141E  5008               	movf	fputc@fp,w,c
  4085  001420  26D9               	addwf	fsr2l,f,c
  4086  001422  5009               	movf	fputc@fp+1,w,c
  4087  001424  22DA               	addwfc	fsr2h,f,c
  4088  001426  CFDE F00A          	movff	postinc2,??_fputc
  4089  00142A  CFDD F00B          	movff	postdec2,??_fputc+1
  4090  00142E  C008  FFD9         	movff	fputc@fp,fsr2l
  4091  001432  C009  FFDA         	movff	fputc@fp+1,fsr2h
  4092  001436  CFDE F00C          	movff	postinc2,??_fputc+2
  4093  00143A  CFDD F00D          	movff	postdec2,??_fputc+3
  4094  00143E  500A               	movf	??_fputc,w,c
  4095  001440  240C               	addwf	??_fputc+2,w,c
  4096  001442  6ED9               	movwf	fsr2l,c
  4097  001444  500B               	movf	??_fputc+1,w,c
  4098  001446  200D               	addwfc	??_fputc+3,w,c
  4099  001448  6EDA               	movwf	fsr2h,c
  4100  00144A  C006  FFDF         	movff	fputc@c,indf2
  4101  00144E  EE20 F002          	lfsr	2,2
  4102  001452  5008               	movf	fputc@fp,w,c
  4103  001454  26D9               	addwf	fsr2l,f,c
  4104  001456  5009               	movf	fputc@fp+1,w,c
  4105  001458  22DA               	addwfc	fsr2h,f,c
  4106  00145A  2ADE               	incf	postinc2,f,c
  4107  00145C  0E00               	movlw	0
  4108  00145E  22DD               	addwfc	postdec2,f,c
  4109  001460  0012               	return	
  4110  001462                     __end_of_fputc:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postinc1	equ	0xFE6
  4119                           fsr1h	equ	0xFE2
  4120                           fsr1l	equ	0xFE1
  4121                           indf2	equ	0xFDF
  4122                           postinc2	equ	0xFDE
  4123                           postdec2	equ	0xFDD
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _putch *****************
  4129 ;; Defined at:
  4130 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/putch.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  c               1    wreg     unsigned char 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  c               1    0[COMRAM] unsigned char 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4144 ;;      Params:         0       0       0       0
  4145 ;;      Locals:         0       0       0       0
  4146 ;;      Temps:          0       0       0       0
  4147 ;;      Totals:         0       0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    1
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_fputc
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text19
  4159  001C1A                     __ptext19:
  4160                           	opt stack 0
  4161  001C1A                     _putch:
  4162                           	opt stack 21
  4163                           
  4164                           ;incstack = 0
  4165  001C1A  0012               	return		;funcret
  4166  001C1C                     __end_of_putch:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           postinc0	equ	0xFEE
  4173                           wreg	equ	0xFE8
  4174                           postinc1	equ	0xFE6
  4175                           fsr1h	equ	0xFE2
  4176                           fsr1l	equ	0xFE1
  4177                           indf2	equ	0xFDF
  4178                           postinc2	equ	0xFDE
  4179                           postdec2	equ	0xFDD
  4180                           fsr2h	equ	0xFDA
  4181                           fsr2l	equ	0xFD9
  4182                           status	equ	0xFD8
  4183                           
  4184 ;; *************** function _abs *****************
  4185 ;; Defined at:
  4186 ;;		line 1 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/abs.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  a               2   23[COMRAM] int 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;		None
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  2   23[COMRAM] int 
  4193 ;; Registers used:
  4194 ;;		wreg, status,2, status,0
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4200 ;;      Params:         2       0       0       0
  4201 ;;      Locals:         0       0       0       0
  4202 ;;      Temps:          2       0       0       0
  4203 ;;      Totals:         4       0       0       0
  4204 ;;Total ram usage:        4 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    1
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_dtoa
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text20
  4215  001A60                     __ptext20:
  4216                           	opt stack 0
  4217  001A60                     _abs:
  4218                           	opt stack 24
  4219                           
  4220                           ;incstack = 0
  4221  001A60  BE19               	btfsc	abs@a+1,7,c
  4222  001A62  D005               	goto	u2600
  4223  001A64  5019               	movf	abs@a+1,w,c
  4224  001A66  E110               	bnz	l1105
  4225  001A68  0418               	decf	abs@a,w,c
  4226  001A6A  B0D8               	btfsc	status,0,c
  4227  001A6C  D00D               	goto	l1105
  4228  001A6E                     u2600:
  4229  001A6E  C018  F01A         	movff	abs@a,??_abs
  4230  001A72  C019  F01B         	movff	abs@a+1,??_abs+1
  4231  001A76  1E1A               	comf	??_abs,f,c
  4232  001A78  1E1B               	comf	??_abs+1,f,c
  4233  001A7A  4A1A               	infsnz	??_abs,f,c
  4234  001A7C  2A1B               	incf	??_abs+1,f,c
  4235  001A7E  C01A  F018         	movff	??_abs,?_abs
  4236  001A82  C01B  F019         	movff	??_abs+1,?_abs+1
  4237  001A86  0012               	return	
  4238  001A88                     l1105:
  4239  001A88  C018  F018         	movff	abs@a,?_abs
  4240  001A8C  C019  F019         	movff	abs@a+1,?_abs+1
  4241  001A90  0012               	return	
  4242  001A92                     __end_of_abs:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           postinc0	equ	0xFEE
  4249                           wreg	equ	0xFE8
  4250                           postinc1	equ	0xFE6
  4251                           fsr1h	equ	0xFE2
  4252                           fsr1l	equ	0xFE1
  4253                           indf2	equ	0xFDF
  4254                           postinc2	equ	0xFDE
  4255                           postdec2	equ	0xFDD
  4256                           fsr2h	equ	0xFDA
  4257                           fsr2l	equ	0xFD9
  4258                           status	equ	0xFD8
  4259                           
  4260 ;; *************** function ___aomod *****************
  4261 ;; Defined at:
  4262 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/aomod.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  dividend        8    5[COMRAM] long long 
  4265 ;;  divisor         8   13[COMRAM] long long 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  sign            1   22[COMRAM] unsigned char 
  4268 ;;  counter         1   21[COMRAM] unsigned char 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  8    5[COMRAM] long long 
  4271 ;; Registers used:
  4272 ;;		wreg, status,2, status,0
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4278 ;;      Params:        16       0       0       0
  4279 ;;      Locals:         2       0       0       0
  4280 ;;      Temps:          0       0       0       0
  4281 ;;      Totals:        18       0       0       0
  4282 ;;Total ram usage:       18 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    1
  4285 ;; This function calls:
  4286 ;;		Nothing
  4287 ;; This function is called by:
  4288 ;;		_dtoa
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text21
  4293  000EB6                     __ptext21:
  4294                           	opt stack 0
  4295  000EB6                     ___aomod:
  4296                           	opt stack 24
  4297                           
  4298                           ;incstack = 0
  4299  000EB6  0E00               	movlw	0
  4300  000EB8  6E17               	movwf	___aomod@sign,c
  4301  000EBA  AE0D               	btfss	___aomod@dividend+7,7,c
  4302  000EBC  D012               	goto	l547
  4303  000EBE  1E0D               	comf	___aomod@dividend+7,f,c
  4304  000EC0  1E0C               	comf	___aomod@dividend+6,f,c
  4305  000EC2  1E0B               	comf	___aomod@dividend+5,f,c
  4306  000EC4  1E0A               	comf	___aomod@dividend+4,f,c
  4307  000EC6  1E09               	comf	___aomod@dividend+3,f,c
  4308  000EC8  1E08               	comf	___aomod@dividend+2,f,c
  4309  000ECA  1E07               	comf	___aomod@dividend+1,f,c
  4310  000ECC  6C06               	negf	___aomod@dividend,c
  4311  000ECE  0E00               	movlw	0
  4312  000ED0  2207               	addwfc	___aomod@dividend+1,f,c
  4313  000ED2  2208               	addwfc	___aomod@dividend+2,f,c
  4314  000ED4  2209               	addwfc	___aomod@dividend+3,f,c
  4315  000ED6  220A               	addwfc	___aomod@dividend+4,f,c
  4316  000ED8  220B               	addwfc	___aomod@dividend+5,f,c
  4317  000EDA  220C               	addwfc	___aomod@dividend+6,f,c
  4318  000EDC  220D               	addwfc	___aomod@dividend+7,f,c
  4319  000EDE  0E01               	movlw	1
  4320  000EE0  6E17               	movwf	___aomod@sign,c
  4321  000EE2                     l547:
  4322  000EE2  AE15               	btfss	___aomod@divisor+7,7,c
  4323  000EE4  D010               	goto	l548
  4324  000EE6  1E15               	comf	___aomod@divisor+7,f,c
  4325  000EE8  1E14               	comf	___aomod@divisor+6,f,c
  4326  000EEA  1E13               	comf	___aomod@divisor+5,f,c
  4327  000EEC  1E12               	comf	___aomod@divisor+4,f,c
  4328  000EEE  1E11               	comf	___aomod@divisor+3,f,c
  4329  000EF0  1E10               	comf	___aomod@divisor+2,f,c
  4330  000EF2  1E0F               	comf	___aomod@divisor+1,f,c
  4331  000EF4  6C0E               	negf	___aomod@divisor,c
  4332  000EF6  0E00               	movlw	0
  4333  000EF8  220F               	addwfc	___aomod@divisor+1,f,c
  4334  000EFA  2210               	addwfc	___aomod@divisor+2,f,c
  4335  000EFC  2211               	addwfc	___aomod@divisor+3,f,c
  4336  000EFE  2212               	addwfc	___aomod@divisor+4,f,c
  4337  000F00  2213               	addwfc	___aomod@divisor+5,f,c
  4338  000F02  2214               	addwfc	___aomod@divisor+6,f,c
  4339  000F04  2215               	addwfc	___aomod@divisor+7,f,c
  4340  000F06                     l548:
  4341  000F06  500E               	movf	___aomod@divisor,w,c
  4342  000F08  100F               	iorwf	___aomod@divisor+1,w,c
  4343  000F0A  1010               	iorwf	___aomod@divisor+2,w,c
  4344  000F0C  1011               	iorwf	___aomod@divisor+3,w,c
  4345  000F0E  1012               	iorwf	___aomod@divisor+4,w,c
  4346  000F10  1013               	iorwf	___aomod@divisor+5,w,c
  4347  000F12  1014               	iorwf	___aomod@divisor+6,w,c
  4348  000F14  1015               	iorwf	___aomod@divisor+7,w,c
  4349  000F16  B4D8               	btfsc	status,2,c
  4350  000F18  D03C               	goto	l555
  4351  000F1A  0E01               	movlw	1
  4352  000F1C  6E16               	movwf	___aomod@counter,c
  4353  000F1E  D00A               	goto	l550
  4354  000F20  90D8               	bcf	status,0,c
  4355  000F22  360E               	rlcf	___aomod@divisor,f,c
  4356  000F24  360F               	rlcf	___aomod@divisor+1,f,c
  4357  000F26  3610               	rlcf	___aomod@divisor+2,f,c
  4358  000F28  3611               	rlcf	___aomod@divisor+3,f,c
  4359  000F2A  3612               	rlcf	___aomod@divisor+4,f,c
  4360  000F2C  3613               	rlcf	___aomod@divisor+5,f,c
  4361  000F2E  3614               	rlcf	___aomod@divisor+6,f,c
  4362  000F30  3615               	rlcf	___aomod@divisor+7,f,c
  4363  000F32  2A16               	incf	___aomod@counter,f,c
  4364  000F34                     l550:
  4365  000F34  AE15               	btfss	___aomod@divisor+7,7,c
  4366  000F36  D7F4               	goto	l551
  4367  000F38                     u2710:
  4368  000F38  500E               	movf	___aomod@divisor,w,c
  4369  000F3A  5C06               	subwf	___aomod@dividend,w,c
  4370  000F3C  500F               	movf	___aomod@divisor+1,w,c
  4371  000F3E  5807               	subwfb	___aomod@dividend+1,w,c
  4372  000F40  5010               	movf	___aomod@divisor+2,w,c
  4373  000F42  5808               	subwfb	___aomod@dividend+2,w,c
  4374  000F44  5011               	movf	___aomod@divisor+3,w,c
  4375  000F46  5809               	subwfb	___aomod@dividend+3,w,c
  4376  000F48  5012               	movf	___aomod@divisor+4,w,c
  4377  000F4A  580A               	subwfb	___aomod@dividend+4,w,c
  4378  000F4C  5013               	movf	___aomod@divisor+5,w,c
  4379  000F4E  580B               	subwfb	___aomod@dividend+5,w,c
  4380  000F50  5014               	movf	___aomod@divisor+6,w,c
  4381  000F52  580C               	subwfb	___aomod@dividend+6,w,c
  4382  000F54  5015               	movf	___aomod@divisor+7,w,c
  4383  000F56  580D               	subwfb	___aomod@dividend+7,w,c
  4384  000F58  A0D8               	btfss	status,0,c
  4385  000F5A  D010               	goto	l554
  4386  000F5C  500E               	movf	___aomod@divisor,w,c
  4387  000F5E  5E06               	subwf	___aomod@dividend,f,c
  4388  000F60  500F               	movf	___aomod@divisor+1,w,c
  4389  000F62  5A07               	subwfb	___aomod@dividend+1,f,c
  4390  000F64  5010               	movf	___aomod@divisor+2,w,c
  4391  000F66  5A08               	subwfb	___aomod@dividend+2,f,c
  4392  000F68  5011               	movf	___aomod@divisor+3,w,c
  4393  000F6A  5A09               	subwfb	___aomod@dividend+3,f,c
  4394  000F6C  5012               	movf	___aomod@divisor+4,w,c
  4395  000F6E  5A0A               	subwfb	___aomod@dividend+4,f,c
  4396  000F70  5013               	movf	___aomod@divisor+5,w,c
  4397  000F72  5A0B               	subwfb	___aomod@dividend+5,f,c
  4398  000F74  5014               	movf	___aomod@divisor+6,w,c
  4399  000F76  5A0C               	subwfb	___aomod@dividend+6,f,c
  4400  000F78  5015               	movf	___aomod@divisor+7,w,c
  4401  000F7A  5A0D               	subwfb	___aomod@dividend+7,f,c
  4402  000F7C                     l554:
  4403  000F7C  90D8               	bcf	status,0,c
  4404  000F7E  3215               	rrcf	___aomod@divisor+7,f,c
  4405  000F80  3214               	rrcf	___aomod@divisor+6,f,c
  4406  000F82  3213               	rrcf	___aomod@divisor+5,f,c
  4407  000F84  3212               	rrcf	___aomod@divisor+4,f,c
  4408  000F86  3211               	rrcf	___aomod@divisor+3,f,c
  4409  000F88  3210               	rrcf	___aomod@divisor+2,f,c
  4410  000F8A  320F               	rrcf	___aomod@divisor+1,f,c
  4411  000F8C  320E               	rrcf	___aomod@divisor,f,c
  4412  000F8E  2E16               	decfsz	___aomod@counter,f,c
  4413  000F90  D7D3               	goto	u2710
  4414  000F92                     l555:
  4415  000F92  5017               	movf	___aomod@sign,w,c
  4416  000F94  B4D8               	btfsc	status,2,c
  4417  000F96  D010               	goto	l556
  4418  000F98  1E0D               	comf	___aomod@dividend+7,f,c
  4419  000F9A  1E0C               	comf	___aomod@dividend+6,f,c
  4420  000F9C  1E0B               	comf	___aomod@dividend+5,f,c
  4421  000F9E  1E0A               	comf	___aomod@dividend+4,f,c
  4422  000FA0  1E09               	comf	___aomod@dividend+3,f,c
  4423  000FA2  1E08               	comf	___aomod@dividend+2,f,c
  4424  000FA4  1E07               	comf	___aomod@dividend+1,f,c
  4425  000FA6  6C06               	negf	___aomod@dividend,c
  4426  000FA8  0E00               	movlw	0
  4427  000FAA  2207               	addwfc	___aomod@dividend+1,f,c
  4428  000FAC  2208               	addwfc	___aomod@dividend+2,f,c
  4429  000FAE  2209               	addwfc	___aomod@dividend+3,f,c
  4430  000FB0  220A               	addwfc	___aomod@dividend+4,f,c
  4431  000FB2  220B               	addwfc	___aomod@dividend+5,f,c
  4432  000FB4  220C               	addwfc	___aomod@dividend+6,f,c
  4433  000FB6  220D               	addwfc	___aomod@dividend+7,f,c
  4434  000FB8                     l556:
  4435  000FB8  C006  F006         	movff	___aomod@dividend,?___aomod
  4436  000FBC  C007  F007         	movff	___aomod@dividend+1,?___aomod+1
  4437  000FC0  C008  F008         	movff	___aomod@dividend+2,?___aomod+2
  4438  000FC4  C009  F009         	movff	___aomod@dividend+3,?___aomod+3
  4439  000FC8  C00A  F00A         	movff	___aomod@dividend+4,?___aomod+4
  4440  000FCC  C00B  F00B         	movff	___aomod@dividend+5,?___aomod+5
  4441  000FD0  C00C  F00C         	movff	___aomod@dividend+6,?___aomod+6
  4442  000FD4  C00D  F00D         	movff	___aomod@dividend+7,?___aomod+7
  4443  000FD8  0012               	return	
  4444  000FDA                     __end_of___aomod:
  4445                           	opt stack 0
  4446                           tblptru	equ	0xFF8
  4447                           tblptrh	equ	0xFF7
  4448                           tblptrl	equ	0xFF6
  4449                           tablat	equ	0xFF5
  4450                           postinc0	equ	0xFEE
  4451                           wreg	equ	0xFE8
  4452                           postinc1	equ	0xFE6
  4453                           fsr1h	equ	0xFE2
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function ___aodiv *****************
  4463 ;; Defined at:
  4464 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/aodiv.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;  dividend        8    5[COMRAM] long long 
  4467 ;;  divisor         8   13[COMRAM] long long 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  quotient        8   23[COMRAM] long long 
  4470 ;;  sign            1   22[COMRAM] unsigned char 
  4471 ;;  counter         1   21[COMRAM] unsigned char 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  8    5[COMRAM] long long 
  4474 ;; Registers used:
  4475 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4481 ;;      Params:        16       0       0       0
  4482 ;;      Locals:        10       0       0       0
  4483 ;;      Temps:          0       0       0       0
  4484 ;;      Totals:        26       0       0       0
  4485 ;;Total ram usage:       26 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    1
  4488 ;; This function calls:
  4489 ;;		Nothing
  4490 ;; This function is called by:
  4491 ;;		_dtoa
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text22
  4496  000D6E                     __ptext22:
  4497                           	opt stack 0
  4498  000D6E                     ___aodiv:
  4499                           	opt stack 24
  4500                           
  4501                           ;incstack = 0
  4502  000D6E  0E00               	movlw	0
  4503  000D70  6E17               	movwf	___aodiv@sign,c
  4504  000D72  AE15               	btfss	___aodiv@divisor+7,7,c
  4505  000D74  D012               	goto	l534
  4506  000D76  1E15               	comf	___aodiv@divisor+7,f,c
  4507  000D78  1E14               	comf	___aodiv@divisor+6,f,c
  4508  000D7A  1E13               	comf	___aodiv@divisor+5,f,c
  4509  000D7C  1E12               	comf	___aodiv@divisor+4,f,c
  4510  000D7E  1E11               	comf	___aodiv@divisor+3,f,c
  4511  000D80  1E10               	comf	___aodiv@divisor+2,f,c
  4512  000D82  1E0F               	comf	___aodiv@divisor+1,f,c
  4513  000D84  6C0E               	negf	___aodiv@divisor,c
  4514  000D86  0E00               	movlw	0
  4515  000D88  220F               	addwfc	___aodiv@divisor+1,f,c
  4516  000D8A  2210               	addwfc	___aodiv@divisor+2,f,c
  4517  000D8C  2211               	addwfc	___aodiv@divisor+3,f,c
  4518  000D8E  2212               	addwfc	___aodiv@divisor+4,f,c
  4519  000D90  2213               	addwfc	___aodiv@divisor+5,f,c
  4520  000D92  2214               	addwfc	___aodiv@divisor+6,f,c
  4521  000D94  2215               	addwfc	___aodiv@divisor+7,f,c
  4522  000D96  0E01               	movlw	1
  4523  000D98  6E17               	movwf	___aodiv@sign,c
  4524  000D9A                     l534:
  4525  000D9A  AE0D               	btfss	___aodiv@dividend+7,7,c
  4526  000D9C  D012               	goto	l535
  4527  000D9E  1E0D               	comf	___aodiv@dividend+7,f,c
  4528  000DA0  1E0C               	comf	___aodiv@dividend+6,f,c
  4529  000DA2  1E0B               	comf	___aodiv@dividend+5,f,c
  4530  000DA4  1E0A               	comf	___aodiv@dividend+4,f,c
  4531  000DA6  1E09               	comf	___aodiv@dividend+3,f,c
  4532  000DA8  1E08               	comf	___aodiv@dividend+2,f,c
  4533  000DAA  1E07               	comf	___aodiv@dividend+1,f,c
  4534  000DAC  6C06               	negf	___aodiv@dividend,c
  4535  000DAE  0E00               	movlw	0
  4536  000DB0  2207               	addwfc	___aodiv@dividend+1,f,c
  4537  000DB2  2208               	addwfc	___aodiv@dividend+2,f,c
  4538  000DB4  2209               	addwfc	___aodiv@dividend+3,f,c
  4539  000DB6  220A               	addwfc	___aodiv@dividend+4,f,c
  4540  000DB8  220B               	addwfc	___aodiv@dividend+5,f,c
  4541  000DBA  220C               	addwfc	___aodiv@dividend+6,f,c
  4542  000DBC  220D               	addwfc	___aodiv@dividend+7,f,c
  4543  000DBE  0E01               	movlw	1
  4544  000DC0  1A17               	xorwf	___aodiv@sign,f,c
  4545  000DC2                     l535:
  4546  000DC2  EE20  F018         	lfsr	2,___aodiv@quotient
  4547  000DC6  0E07               	movlw	7
  4548  000DC8                     u2631:
  4549  000DC8  6ADE               	clrf	postinc2,c
  4550  000DCA  06E8               	decf	wreg,f,c
  4551  000DCC  E2FD               	bc	u2631
  4552  000DCE  500E               	movf	___aodiv@divisor,w,c
  4553  000DD0  100F               	iorwf	___aodiv@divisor+1,w,c
  4554  000DD2  1010               	iorwf	___aodiv@divisor+2,w,c
  4555  000DD4  1011               	iorwf	___aodiv@divisor+3,w,c
  4556  000DD6  1012               	iorwf	___aodiv@divisor+4,w,c
  4557  000DD8  1013               	iorwf	___aodiv@divisor+5,w,c
  4558  000DDA  1014               	iorwf	___aodiv@divisor+6,w,c
  4559  000DDC  1015               	iorwf	___aodiv@divisor+7,w,c
  4560  000DDE  B4D8               	btfsc	status,2,c
  4561  000DE0  D046               	goto	l542
  4562  000DE2  0E01               	movlw	1
  4563  000DE4  6E16               	movwf	___aodiv@counter,c
  4564  000DE6  D00A               	goto	l537
  4565  000DE8  90D8               	bcf	status,0,c
  4566  000DEA  360E               	rlcf	___aodiv@divisor,f,c
  4567  000DEC  360F               	rlcf	___aodiv@divisor+1,f,c
  4568  000DEE  3610               	rlcf	___aodiv@divisor+2,f,c
  4569  000DF0  3611               	rlcf	___aodiv@divisor+3,f,c
  4570  000DF2  3612               	rlcf	___aodiv@divisor+4,f,c
  4571  000DF4  3613               	rlcf	___aodiv@divisor+5,f,c
  4572  000DF6  3614               	rlcf	___aodiv@divisor+6,f,c
  4573  000DF8  3615               	rlcf	___aodiv@divisor+7,f,c
  4574  000DFA  2A16               	incf	___aodiv@counter,f,c
  4575  000DFC                     l537:
  4576  000DFC  AE15               	btfss	___aodiv@divisor+7,7,c
  4577  000DFE  D7F4               	goto	l538
  4578  000E00                     u2650:
  4579  000E00  90D8               	bcf	status,0,c
  4580  000E02  3618               	rlcf	___aodiv@quotient,f,c
  4581  000E04  3619               	rlcf	___aodiv@quotient+1,f,c
  4582  000E06  361A               	rlcf	___aodiv@quotient+2,f,c
  4583  000E08  361B               	rlcf	___aodiv@quotient+3,f,c
  4584  000E0A  361C               	rlcf	___aodiv@quotient+4,f,c
  4585  000E0C  361D               	rlcf	___aodiv@quotient+5,f,c
  4586  000E0E  361E               	rlcf	___aodiv@quotient+6,f,c
  4587  000E10  361F               	rlcf	___aodiv@quotient+7,f,c
  4588  000E12  500E               	movf	___aodiv@divisor,w,c
  4589  000E14  5C06               	subwf	___aodiv@dividend,w,c
  4590  000E16  500F               	movf	___aodiv@divisor+1,w,c
  4591  000E18  5807               	subwfb	___aodiv@dividend+1,w,c
  4592  000E1A  5010               	movf	___aodiv@divisor+2,w,c
  4593  000E1C  5808               	subwfb	___aodiv@dividend+2,w,c
  4594  000E1E  5011               	movf	___aodiv@divisor+3,w,c
  4595  000E20  5809               	subwfb	___aodiv@dividend+3,w,c
  4596  000E22  5012               	movf	___aodiv@divisor+4,w,c
  4597  000E24  580A               	subwfb	___aodiv@dividend+4,w,c
  4598  000E26  5013               	movf	___aodiv@divisor+5,w,c
  4599  000E28  580B               	subwfb	___aodiv@dividend+5,w,c
  4600  000E2A  5014               	movf	___aodiv@divisor+6,w,c
  4601  000E2C  580C               	subwfb	___aodiv@dividend+6,w,c
  4602  000E2E  5015               	movf	___aodiv@divisor+7,w,c
  4603  000E30  580D               	subwfb	___aodiv@dividend+7,w,c
  4604  000E32  A0D8               	btfss	status,0,c
  4605  000E34  D011               	goto	l541
  4606  000E36  500E               	movf	___aodiv@divisor,w,c
  4607  000E38  5E06               	subwf	___aodiv@dividend,f,c
  4608  000E3A  500F               	movf	___aodiv@divisor+1,w,c
  4609  000E3C  5A07               	subwfb	___aodiv@dividend+1,f,c
  4610  000E3E  5010               	movf	___aodiv@divisor+2,w,c
  4611  000E40  5A08               	subwfb	___aodiv@dividend+2,f,c
  4612  000E42  5011               	movf	___aodiv@divisor+3,w,c
  4613  000E44  5A09               	subwfb	___aodiv@dividend+3,f,c
  4614  000E46  5012               	movf	___aodiv@divisor+4,w,c
  4615  000E48  5A0A               	subwfb	___aodiv@dividend+4,f,c
  4616  000E4A  5013               	movf	___aodiv@divisor+5,w,c
  4617  000E4C  5A0B               	subwfb	___aodiv@dividend+5,f,c
  4618  000E4E  5014               	movf	___aodiv@divisor+6,w,c
  4619  000E50  5A0C               	subwfb	___aodiv@dividend+6,f,c
  4620  000E52  5015               	movf	___aodiv@divisor+7,w,c
  4621  000E54  5A0D               	subwfb	___aodiv@dividend+7,f,c
  4622  000E56  8018               	bsf	___aodiv@quotient,0,c
  4623  000E58                     l541:
  4624  000E58  90D8               	bcf	status,0,c
  4625  000E5A  3215               	rrcf	___aodiv@divisor+7,f,c
  4626  000E5C  3214               	rrcf	___aodiv@divisor+6,f,c
  4627  000E5E  3213               	rrcf	___aodiv@divisor+5,f,c
  4628  000E60  3212               	rrcf	___aodiv@divisor+4,f,c
  4629  000E62  3211               	rrcf	___aodiv@divisor+3,f,c
  4630  000E64  3210               	rrcf	___aodiv@divisor+2,f,c
  4631  000E66  320F               	rrcf	___aodiv@divisor+1,f,c
  4632  000E68  320E               	rrcf	___aodiv@divisor,f,c
  4633  000E6A  2E16               	decfsz	___aodiv@counter,f,c
  4634  000E6C  D7C9               	goto	u2650
  4635  000E6E                     l542:
  4636  000E6E  5017               	movf	___aodiv@sign,w,c
  4637  000E70  B4D8               	btfsc	status,2,c
  4638  000E72  D010               	goto	l543
  4639  000E74  1E1F               	comf	___aodiv@quotient+7,f,c
  4640  000E76  1E1E               	comf	___aodiv@quotient+6,f,c
  4641  000E78  1E1D               	comf	___aodiv@quotient+5,f,c
  4642  000E7A  1E1C               	comf	___aodiv@quotient+4,f,c
  4643  000E7C  1E1B               	comf	___aodiv@quotient+3,f,c
  4644  000E7E  1E1A               	comf	___aodiv@quotient+2,f,c
  4645  000E80  1E19               	comf	___aodiv@quotient+1,f,c
  4646  000E82  6C18               	negf	___aodiv@quotient,c
  4647  000E84  0E00               	movlw	0
  4648  000E86  2219               	addwfc	___aodiv@quotient+1,f,c
  4649  000E88  221A               	addwfc	___aodiv@quotient+2,f,c
  4650  000E8A  221B               	addwfc	___aodiv@quotient+3,f,c
  4651  000E8C  221C               	addwfc	___aodiv@quotient+4,f,c
  4652  000E8E  221D               	addwfc	___aodiv@quotient+5,f,c
  4653  000E90  221E               	addwfc	___aodiv@quotient+6,f,c
  4654  000E92  221F               	addwfc	___aodiv@quotient+7,f,c
  4655  000E94                     l543:
  4656  000E94  C018  F006         	movff	___aodiv@quotient,?___aodiv
  4657  000E98  C019  F007         	movff	___aodiv@quotient+1,?___aodiv+1
  4658  000E9C  C01A  F008         	movff	___aodiv@quotient+2,?___aodiv+2
  4659  000EA0  C01B  F009         	movff	___aodiv@quotient+3,?___aodiv+3
  4660  000EA4  C01C  F00A         	movff	___aodiv@quotient+4,?___aodiv+4
  4661  000EA8  C01D  F00B         	movff	___aodiv@quotient+5,?___aodiv+5
  4662  000EAC  C01E  F00C         	movff	___aodiv@quotient+6,?___aodiv+6
  4663  000EB0  C01F  F00D         	movff	___aodiv@quotient+7,?___aodiv+7
  4664  000EB4  0012               	return	
  4665  000EB6                     __end_of___aodiv:
  4666                           	opt stack 0
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           postinc0	equ	0xFEE
  4672                           wreg	equ	0xFE8
  4673                           postinc1	equ	0xFE6
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           indf2	equ	0xFDF
  4677                           postinc2	equ	0xFDE
  4678                           postdec2	equ	0xFDD
  4679                           fsr2h	equ	0xFDA
  4680                           fsr2l	equ	0xFD9
  4681                           status	equ	0xFD8
  4682                           
  4683 ;; *************** function _LCD_string *****************
  4684 ;; Defined at:
  4685 ;;		line 101 in file "lcd.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  string          2    9[COMRAM] PTR unsigned char 
  4688 ;;		 -> check_sum@buf_cs(16), print_IR@buf(16), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4700 ;;      Params:         2       0       0       0
  4701 ;;      Locals:         0       0       0       0
  4702 ;;      Temps:          0       0       0       0
  4703 ;;      Totals:         2       0       0       0
  4704 ;;Total ram usage:        2 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    4
  4707 ;; This function calls:
  4708 ;;		_LCD_send
  4709 ;; This function is called by:
  4710 ;;		_print_IR
  4711 ;;		_check_sum
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text23
  4716  001A92                     __ptext23:
  4717                           	opt stack 0
  4718  001A92                     _LCD_string:
  4719                           	opt stack 25
  4720                           
  4721                           ;lcd.c: 102:     while (*string != 0) {
  4722                           
  4723                           ;incstack = 0
  4724  001A92  D00F               	goto	l49
  4725  001A94                     
  4726                           ;lcd.c: 105:         LCD_send(*string++, 1);
  4727  001A94  0E01               	movlw	1
  4728  001A96  6E08               	movwf	LCD_send@type,c
  4729  001A98  C00A  FFD9         	movff	LCD_string@string,fsr2l
  4730  001A9C  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  4731  001AA0  50DF               	movf	indf2,w,c
  4732  001AA2  EC79  F00D         	call	_LCD_send
  4733  001AA6  4A0A               	infsnz	LCD_string@string,f,c
  4734  001AA8  2A0B               	incf	LCD_string@string+1,f,c
  4735                           
  4736                           ;lcd.c: 106:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  4737  001AAA  0E21               	movlw	33
  4738  001AAC                     u3407:
  4739  001AAC  2EE8               	decfsz	wreg,f,c
  4740  001AAE  D7FE               	bra	u3407
  4741  001AB0  F000               	nop	
  4742  001AB2                     l49:
  4743                           
  4744                           ;lcd.c: 102:     while (*string != 0) {
  4745  001AB2  C00A  FFD9         	movff	LCD_string@string,fsr2l
  4746  001AB6  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  4747  001ABA  50DF               	movf	indf2,w,c
  4748  001ABC  B4D8               	btfsc	status,2,c
  4749  001ABE  0012               	return	
  4750  001AC0  D7E9               	goto	l50
  4751  001AC2                     __end_of_LCD_string:
  4752                           	opt stack 0
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           postinc0	equ	0xFEE
  4758                           wreg	equ	0xFE8
  4759                           postinc1	equ	0xFE6
  4760                           fsr1h	equ	0xFE2
  4761                           fsr1l	equ	0xFE1
  4762                           indf2	equ	0xFDF
  4763                           postinc2	equ	0xFDE
  4764                           postdec2	equ	0xFDD
  4765                           fsr2h	equ	0xFDA
  4766                           fsr2l	equ	0xFD9
  4767                           status	equ	0xFD8
  4768                           
  4769 ;; *************** function _LCD_line *****************
  4770 ;; Defined at:
  4771 ;;		line 89 in file "lcd.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;  line            1    wreg     unsigned char 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  line            1    9[COMRAM] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      void 
  4778 ;; Registers used:
  4779 ;;		wreg, status,2, status,0, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4785 ;;      Params:         0       0       0       0
  4786 ;;      Locals:         1       0       0       0
  4787 ;;      Temps:          0       0       0       0
  4788 ;;      Totals:         1       0       0       0
  4789 ;;Total ram usage:        1 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    4
  4792 ;; This function calls:
  4793 ;;		_LCD_send
  4794 ;; This function is called by:
  4795 ;;		_print_IR
  4796 ;;		_print_RFID
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           	psect	text24
  4801  001AC2                     __ptext24:
  4802                           	opt stack 0
  4803  001AC2                     _LCD_line:
  4804                           	opt stack 25
  4805                           
  4806                           ;incstack = 0
  4807                           ;LCD_line@line stored from wreg
  4808  001AC2  6E0A               	movwf	LCD_line@line,c
  4809                           
  4810                           ;lcd.c: 90:     if (line == 1) {
  4811  001AC4  040A               	decf	LCD_line@line,w,c
  4812  001AC6  A4D8               	btfss	status,2,c
  4813  001AC8  D006               	goto	l43
  4814                           
  4815                           ;lcd.c: 91:         LCD_send(0x80, 0);
  4816  001ACA  0E00               	movlw	0
  4817  001ACC  6E08               	movwf	LCD_send@type,c
  4818  001ACE  0E80               	movlw	128
  4819  001AD0  EC79  F00D         	call	_LCD_send
  4820                           
  4821                           ;lcd.c: 92:     } else if (line == 2) {
  4822  001AD4  D009               	goto	l45
  4823  001AD6                     l43:
  4824  001AD6  0E02               	movlw	2
  4825  001AD8  180A               	xorwf	LCD_line@line,w,c
  4826  001ADA  A4D8               	btfss	status,2,c
  4827  001ADC  D005               	goto	l45
  4828                           
  4829                           ;lcd.c: 93:         LCD_send(0xC0, 0);
  4830  001ADE  0E00               	movlw	0
  4831  001AE0  6E08               	movwf	LCD_send@type,c
  4832  001AE2  0EC0               	movlw	192
  4833  001AE4  EC79  F00D         	call	_LCD_send
  4834  001AE8                     l45:
  4835                           
  4836                           ;lcd.c: 95:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  4837  001AE8  0E21               	movlw	33
  4838  001AEA                     u3417:
  4839  001AEA  2EE8               	decfsz	wreg,f,c
  4840  001AEC  D7FE               	bra	u3417
  4841  001AEE  F000               	nop	
  4842  001AF0  0012               	return		;funcret
  4843  001AF2                     __end_of_LCD_line:
  4844                           	opt stack 0
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           postinc1	equ	0xFE6
  4852                           fsr1h	equ	0xFE2
  4853                           fsr1l	equ	0xFE1
  4854                           indf2	equ	0xFDF
  4855                           postinc2	equ	0xFDE
  4856                           postdec2	equ	0xFDD
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function _LCD_clear *****************
  4862 ;; Defined at:
  4863 ;;		line 115 in file "lcd.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;		None
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;		None
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4877 ;;      Params:         0       0       0       0
  4878 ;;      Locals:         0       0       0       0
  4879 ;;      Temps:          1       0       0       0
  4880 ;;      Totals:         1       0       0       0
  4881 ;;Total ram usage:        1 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    4
  4884 ;; This function calls:
  4885 ;;		_LCD_send
  4886 ;; This function is called by:
  4887 ;;		_print_IR
  4888 ;;		_print_RFID
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text25
  4893  001B8A                     __ptext25:
  4894                           	opt stack 0
  4895  001B8A                     _LCD_clear:
  4896                           	opt stack 25
  4897                           
  4898                           ;lcd.c: 116:     LCD_send(0b00000001, 0);
  4899                           
  4900                           ;incstack = 0
  4901  001B8A  0E00               	movlw	0
  4902  001B8C  6E08               	movwf	LCD_send@type,c
  4903  001B8E  0E01               	movlw	1
  4904  001B90  EC79  F00D         	call	_LCD_send
  4905                           
  4906                           ;lcd.c: 117:     _delay((unsigned long)((2)*(8000000/4000.0)));
  4907  001B94  0E06               	movlw	6
  4908  001B96  6E0A               	movwf	??_LCD_clear& (0+255),c
  4909  001B98  0E30               	movlw	48
  4910  001B9A                     u3427:
  4911  001B9A  2EE8               	decfsz	wreg,f,c
  4912  001B9C  D7FE               	bra	u3427
  4913  001B9E  2E0A               	decfsz	??_LCD_clear& (0+255),f,c
  4914  001BA0  D7FC               	bra	u3427
  4915  001BA2  D000               	nop2	
  4916  001BA4  0012               	return		;funcret
  4917  001BA6                     __end_of_LCD_clear:
  4918                           	opt stack 0
  4919                           tblptru	equ	0xFF8
  4920                           tblptrh	equ	0xFF7
  4921                           tblptrl	equ	0xFF6
  4922                           tablat	equ	0xFF5
  4923                           postinc0	equ	0xFEE
  4924                           wreg	equ	0xFE8
  4925                           postinc1	equ	0xFE6
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _interrupt_EUSART *****************
  4936 ;; Defined at:
  4937 ;;		line 14 in file "rfid.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4951 ;;      Params:         0       0       0       0
  4952 ;;      Locals:         0       0       0       0
  4953 ;;      Temps:          0       0       0       0
  4954 ;;      Totals:         0       0       0       0
  4955 ;;Total ram usage:        0 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    1
  4958 ;; This function calls:
  4959 ;;		Nothing
  4960 ;; This function is called by:
  4961 ;;		_main
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text26
  4966  001C0A                     __ptext26:
  4967                           	opt stack 0
  4968  001C0A                     _interrupt_EUSART:
  4969                           	opt stack 29
  4970                           
  4971                           ;rfid.c: 15:     RCREG;
  4972                           
  4973                           ;incstack = 0
  4974  001C0A  50AE               	movf	4014,w,c	;volatile
  4975                           
  4976                           ;rfid.c: 16:     RCREG;
  4977  001C0C  50AE               	movf	4014,w,c	;volatile
  4978                           
  4979                           ;rfid.c: 17:     RCREG;
  4980  001C0E  50AE               	movf	4014,w,c	;volatile
  4981                           
  4982                           ;rfid.c: 18:     PIE1bits.RCIE = 1;
  4983  001C10  8A9D               	bsf	3997,5,c	;volatile
  4984                           
  4985                           ;rfid.c: 19:     INTCONbits.GIEL = 1;
  4986  001C12  8CF2               	bsf	intcon,6,c	;volatile
  4987                           
  4988                           ;rfid.c: 20:     INTCONbits.GIEH = 1;
  4989  001C14  8EF2               	bsf	intcon,7,c	;volatile
  4990                           
  4991                           ;rfid.c: 21:     INTCON3bits.INT2IE = 1;
  4992  001C16  88F0               	bsf	intcon3,4,c	;volatile
  4993  001C18  0012               	return		;funcret
  4994  001C1A                     __end_of_interrupt_EUSART:
  4995                           	opt stack 0
  4996                           tblptru	equ	0xFF8
  4997                           tblptrh	equ	0xFF7
  4998                           tblptrl	equ	0xFF6
  4999                           tablat	equ	0xFF5
  5000                           intcon	equ	0xFF2
  5001                           intcon3	equ	0xFF0
  5002                           postinc0	equ	0xFEE
  5003                           wreg	equ	0xFE8
  5004                           postinc1	equ	0xFE6
  5005                           fsr1h	equ	0xFE2
  5006                           fsr1l	equ	0xFE1
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function _init_capture *****************
  5015 ;; Defined at:
  5016 ;;		line 25 in file "ir.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5030 ;;      Params:         0       0       0       0
  5031 ;;      Locals:         0       0       0       0
  5032 ;;      Temps:          0       0       0       0
  5033 ;;      Totals:         0       0       0       0
  5034 ;;Total ram usage:        0 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    1
  5037 ;; This function calls:
  5038 ;;		Nothing
  5039 ;; This function is called by:
  5040 ;;		_main
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           	psect	text27
  5045  001BA6                     __ptext27:
  5046                           	opt stack 0
  5047  001BA6                     _init_capture:
  5048                           	opt stack 29
  5049                           
  5050                           ;ir.c: 27:     LATA = 0;
  5051                           
  5052                           ;incstack = 0
  5053  001BA6  0E00               	movlw	0
  5054  001BA8  6E89               	movwf	3977,c	;volatile
  5055                           
  5056                           ;ir.c: 28:     TRISA = 0b00001100;
  5057  001BAA  0E0C               	movlw	12
  5058  001BAC  6E92               	movwf	3986,c	;volatile
  5059                           
  5060                           ;ir.c: 29:     CAP1CON = 0b01000110;
  5061  001BAE  0E46               	movlw	70
  5062  001BB0  6E63               	movwf	3939,c	;volatile
  5063                           
  5064                           ;ir.c: 30:     CAP2CON = 0b01000110;
  5065  001BB2  0E46               	movlw	70
  5066  001BB4  6E62               	movwf	3938,c	;volatile
  5067                           
  5068                           ;ir.c: 31:     T5CON = 0b00001001;
  5069  001BB6  0E09               	movlw	9
  5070  001BB8  6EB7               	movwf	4023,c	;volatile
  5071                           
  5072                           ;ir.c: 32:     DFLTCON = 0b00011000;
  5073  001BBA  0E18               	movlw	24
  5074  001BBC  6E60               	movwf	3936,c	;volatile
  5075  001BBE  0012               	return		;funcret
  5076  001BC0                     __end_of_init_capture:
  5077                           	opt stack 0
  5078                           tblptru	equ	0xFF8
  5079                           tblptrh	equ	0xFF7
  5080                           tblptrl	equ	0xFF6
  5081                           tablat	equ	0xFF5
  5082                           intcon	equ	0xFF2
  5083                           intcon3	equ	0xFF0
  5084                           postinc0	equ	0xFEE
  5085                           wreg	equ	0xFE8
  5086                           postinc1	equ	0xFE6
  5087                           fsr1h	equ	0xFE2
  5088                           fsr1l	equ	0xFE1
  5089                           indf2	equ	0xFDF
  5090                           postinc2	equ	0xFDE
  5091                           postdec2	equ	0xFDD
  5092                           fsr2h	equ	0xFDA
  5093                           fsr2l	equ	0xFD9
  5094                           status	equ	0xFD8
  5095                           
  5096 ;; *************** function _init_TIMER5 *****************
  5097 ;; Defined at:
  5098 ;;		line 6 in file "ir.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;		None
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;		None
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  1    wreg      void 
  5105 ;; Registers used:
  5106 ;;		wreg, status,2
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5112 ;;      Params:         0       0       0       0
  5113 ;;      Locals:         0       0       0       0
  5114 ;;      Temps:          0       0       0       0
  5115 ;;      Totals:         0       0       0       0
  5116 ;;Total ram usage:        0 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:    1
  5119 ;; This function calls:
  5120 ;;		Nothing
  5121 ;; This function is called by:
  5122 ;;		_main
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text28
  5127  001BC0                     __ptext28:
  5128                           	opt stack 0
  5129  001BC0                     _init_TIMER5:
  5130                           	opt stack 29
  5131                           
  5132                           ;ir.c: 11:     T5CON = 0;
  5133                           
  5134                           ;incstack = 0
  5135  001BC0  0E00               	movlw	0
  5136  001BC2  6EB7               	movwf	4023,c	;volatile
  5137                           
  5138                           ;ir.c: 12:     T5CONbits.T5SEN = 0;
  5139  001BC4  9EB7               	bcf	4023,7,c	;volatile
  5140                           
  5141                           ;ir.c: 13:     T5CONbits.RESEN = 0;
  5142  001BC6  9CB7               	bcf	4023,6,c	;volatile
  5143                           
  5144                           ;ir.c: 14:     T5CONbits.T5PS = 0b10;
  5145  001BC8  50B7               	movf	4023,w,c	;volatile
  5146  001BCA  0BE7               	andlw	-25
  5147  001BCC  0910               	iorlw	16
  5148  001BCE  6EB7               	movwf	4023,c	;volatile
  5149                           
  5150                           ;ir.c: 15:     T5CONbits.T5MOD = 0;
  5151  001BD0  9AB7               	bcf	4023,5,c	;volatile
  5152                           
  5153                           ;ir.c: 16:     T5CONbits.T5SYNC = 0;
  5154  001BD2  94B7               	bcf	4023,2,c	;volatile
  5155                           
  5156                           ;ir.c: 17:     T5CONbits.TMR5CS = 0;
  5157  001BD4  92B7               	bcf	4023,1,c	;volatile
  5158                           
  5159                           ;ir.c: 18:     T5CONbits.TMR5ON = 1;
  5160  001BD6  80B7               	bsf	4023,0,c	;volatile
  5161  001BD8  0012               	return		;funcret
  5162  001BDA                     __end_of_init_TIMER5:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           intcon	equ	0xFF2
  5169                           intcon3	equ	0xFF0
  5170                           postinc0	equ	0xFEE
  5171                           wreg	equ	0xFE8
  5172                           postinc1	equ	0xFE6
  5173                           fsr1h	equ	0xFE2
  5174                           fsr1l	equ	0xFE1
  5175                           indf2	equ	0xFDF
  5176                           postinc2	equ	0xFDE
  5177                           postdec2	equ	0xFDD
  5178                           fsr2h	equ	0xFDA
  5179                           fsr2l	equ	0xFD9
  5180                           status	equ	0xFD8
  5181                           
  5182 ;; *************** function _init_RFID *****************
  5183 ;; Defined at:
  5184 ;;		line 3 in file "rfid.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;		None
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;		None
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5198 ;;      Params:         0       0       0       0
  5199 ;;      Locals:         0       0       0       0
  5200 ;;      Temps:          0       0       0       0
  5201 ;;      Totals:         0       0       0       0
  5202 ;;Total ram usage:        0 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    1
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_main
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text29
  5213  001BDA                     __ptext29:
  5214                           	opt stack 0
  5215  001BDA                     _init_RFID:
  5216                           	opt stack 29
  5217                           
  5218                           ;rfid.c: 4:     TRISC = TRISC | 0b11000000;
  5219                           
  5220                           ;incstack = 0
  5221  001BDA  5094               	movf	3988,w,c	;volatile
  5222  001BDC  09C0               	iorlw	192
  5223  001BDE  6E94               	movwf	3988,c	;volatile
  5224                           
  5225                           ;rfid.c: 5:     SPBRG = 204;
  5226  001BE0  0ECC               	movlw	204
  5227  001BE2  6EAF               	movwf	4015,c	;volatile
  5228                           
  5229                           ;rfid.c: 6:     SPBRGH = 0;
  5230  001BE4  0E00               	movlw	0
  5231  001BE6  6EB0               	movwf	4016,c	;volatile
  5232                           
  5233                           ;rfid.c: 7:     BAUDCONbits.BRG16 = 1;
  5234  001BE8  86AA               	bsf	4010,3,c	;volatile
  5235                           
  5236                           ;rfid.c: 8:     TXSTAbits.BRGH = 1;
  5237  001BEA  84AC               	bsf	4012,2,c	;volatile
  5238                           
  5239                           ;rfid.c: 9:     RCSTAbits.CREN = 1;
  5240  001BEC  88AB               	bsf	4011,4,c	;volatile
  5241                           
  5242                           ;rfid.c: 10:     RCSTAbits.SPEN = 1;
  5243  001BEE  8EAB               	bsf	4011,7,c	;volatile
  5244                           
  5245                           ;rfid.c: 11:     TXSTAbits.TXEN = 1;
  5246  001BF0  8AAC               	bsf	4012,5,c	;volatile
  5247  001BF2  0012               	return		;funcret
  5248  001BF4                     __end_of_init_RFID:
  5249                           	opt stack 0
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           intcon	equ	0xFF2
  5255                           intcon3	equ	0xFF0
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           postinc1	equ	0xFE6
  5259                           fsr1h	equ	0xFE2
  5260                           fsr1l	equ	0xFE1
  5261                           indf2	equ	0xFDF
  5262                           postinc2	equ	0xFDE
  5263                           postdec2	equ	0xFDD
  5264                           fsr2h	equ	0xFDA
  5265                           fsr2l	equ	0xFD9
  5266                           status	equ	0xFD8
  5267                           
  5268 ;; *************** function _initPWM *****************
  5269 ;; Defined at:
  5270 ;;		line 19 in file "motor.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      void 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5284 ;;      Params:         0       0       0       0
  5285 ;;      Locals:         0       0       0       0
  5286 ;;      Temps:          0       0       0       0
  5287 ;;      Totals:         0       0       0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    1
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_main
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text30
  5299  001B6C                     __ptext30:
  5300                           	opt stack 0
  5301  001B6C                     _initPWM:
  5302                           	opt stack 29
  5303                           
  5304                           ;motor.c: 20:     TRISB = 0;
  5305                           
  5306                           ;incstack = 0
  5307  001B6C  0E00               	movlw	0
  5308  001B6E  6E93               	movwf	3987,c	;volatile
  5309                           
  5310                           ;motor.c: 22:     PTCON0 = 0b00000000;
  5311  001B70  0E00               	movlw	0
  5312  001B72  6E7F               	movwf	3967,c	;volatile
  5313                           
  5314                           ;motor.c: 23:     PTCON1 = 0b10000000;
  5315  001B74  0E80               	movlw	128
  5316  001B76  6E7E               	movwf	3966,c	;volatile
  5317                           
  5318                           ;motor.c: 25:     PWMCON0 = 0b01111111;
  5319  001B78  0E7F               	movlw	127
  5320  001B7A  6E6F               	movwf	3951,c	;volatile
  5321                           
  5322                           ;motor.c: 26:     PWMCON1 = 0x00;
  5323  001B7C  0E00               	movlw	0
  5324  001B7E  6E6E               	movwf	3950,c	;volatile
  5325                           
  5326                           ;motor.c: 29:     PTPERL = 0b11000111;
  5327  001B80  0EC7               	movlw	199
  5328  001B82  6E7B               	movwf	3963,c	;volatile
  5329                           
  5330                           ;motor.c: 30:     PTPERH = 0b0000;
  5331  001B84  0E00               	movlw	0
  5332  001B86  6E7A               	movwf	3962,c	;volatile
  5333  001B88  0012               	return		;funcret
  5334  001B8A                     __end_of_initPWM:
  5335                           	opt stack 0
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           intcon	equ	0xFF2
  5341                           intcon3	equ	0xFF0
  5342                           postinc0	equ	0xFEE
  5343                           wreg	equ	0xFE8
  5344                           postinc1	equ	0xFE6
  5345                           fsr1h	equ	0xFE2
  5346                           fsr1l	equ	0xFE1
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function _forwards *****************
  5355 ;; Defined at:
  5356 ;;		line 144 in file "motor.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  mL              2   26[COMRAM] PTR struct Motor
  5359 ;;		 -> main@mL(9), 
  5360 ;;  mR              2   28[COMRAM] PTR struct Motor
  5361 ;;		 -> main@mR(9), 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5373 ;;      Params:         4       0       0       0
  5374 ;;      Locals:         0       0       0       0
  5375 ;;      Temps:          1       0       0       0
  5376 ;;      Totals:         5       0       0       0
  5377 ;;Total ram usage:        5 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    3
  5380 ;; This function calls:
  5381 ;;		_setMotorPWM
  5382 ;; This function is called by:
  5383 ;;		_main
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text31
  5388  0016BA                     __ptext31:
  5389                           	opt stack 0
  5390  0016BA                     _forwards:
  5391                           	opt stack 27
  5392                           
  5393                           ;motor.c: 145:     mL->direction = 0;
  5394                           
  5395                           ;incstack = 0
  5396  0016BA  EE20 F001          	lfsr	2,1
  5397  0016BE  501B               	movf	forwards@mL,w,c
  5398  0016C0  26D9               	addwf	fsr2l,f,c
  5399  0016C2  501C               	movf	forwards@mL+1,w,c
  5400  0016C4  22DA               	addwfc	fsr2h,f,c
  5401  0016C6  0E00               	movlw	0
  5402  0016C8  6EDF               	movwf	indf2,c
  5403                           
  5404                           ;motor.c: 146:     mR->direction = 0;
  5405  0016CA  EE20 F001          	lfsr	2,1
  5406  0016CE  501D               	movf	forwards@mR,w,c
  5407  0016D0  26D9               	addwf	fsr2l,f,c
  5408  0016D2  501E               	movf	forwards@mR+1,w,c
  5409  0016D4  22DA               	addwfc	fsr2h,f,c
  5410  0016D6  0E00               	movlw	0
  5411  0016D8  6EDF               	movwf	indf2,c
  5412                           
  5413                           ;motor.c: 147:     while (mL->power < 100 || mR->power < 100) {
  5414  0016DA  D02B               	goto	l275
  5415  0016DC                     
  5416                           ;motor.c: 148:         if (mL->power < 100) {
  5417  0016DC  C01B  FFD9         	movff	forwards@mL,fsr2l
  5418  0016E0  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5419  0016E4  0E64               	movlw	100
  5420  0016E6  60DF               	cpfslt	indf2,c
  5421  0016E8  D005               	goto	l277
  5422                           
  5423                           ;motor.c: 149:             mL->power++;
  5424  0016EA  C01B  FFD9         	movff	forwards@mL,fsr2l
  5425  0016EE  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5426  0016F2  2ADF               	incf	indf2,f,c
  5427  0016F4                     l277:
  5428                           
  5429                           ;motor.c: 151:         if (mR->power < 100) {
  5430  0016F4  C01D  FFD9         	movff	forwards@mR,fsr2l
  5431  0016F8  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5432  0016FC  0E64               	movlw	100
  5433  0016FE  60DF               	cpfslt	indf2,c
  5434  001700  D005               	goto	l278
  5435                           
  5436                           ;motor.c: 152:             mR->power++;
  5437  001702  C01D  FFD9         	movff	forwards@mR,fsr2l
  5438  001706  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5439  00170A  2ADF               	incf	indf2,f,c
  5440  00170C                     l278:
  5441                           
  5442                           ;motor.c: 154:         setMotorPWM(mL);
  5443  00170C  C01B  F014         	movff	forwards@mL,setMotorPWM@m
  5444  001710  C01C  F015         	movff	forwards@mL+1,setMotorPWM@m+1
  5445  001714  ECF6  F005         	call	_setMotorPWM	;wreg free
  5446                           
  5447                           ;motor.c: 155:         setMotorPWM(mR);
  5448  001718  C01D  F014         	movff	forwards@mR,setMotorPWM@m
  5449  00171C  C01E  F015         	movff	forwards@mR+1,setMotorPWM@m+1
  5450  001720  ECF6  F005         	call	_setMotorPWM	;wreg free
  5451                           
  5452                           ;motor.c: 156:         _delay((unsigned long)((5)*(8000000/4000.0)));
  5453  001724  0E0D               	movlw	13
  5454  001726  6E1F               	movwf	??_forwards& (0+255),c
  5455  001728  0EFC               	movlw	252
  5456  00172A                     u3437:
  5457  00172A  2EE8               	decfsz	wreg,f,c
  5458  00172C  D7FE               	bra	u3437
  5459  00172E  2E1F               	decfsz	??_forwards& (0+255),f,c
  5460  001730  D7FC               	bra	u3437
  5461  001732                     l275:
  5462                           
  5463                           ;motor.c: 147:     while (mL->power < 100 || mR->power < 100) {
  5464  001732  C01B  FFD9         	movff	forwards@mL,fsr2l
  5465  001736  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5466  00173A  0E63               	movlw	99
  5467  00173C  64DF               	cpfsgt	indf2,c
  5468  00173E  D7CE               	goto	l276
  5469  001740  C01D  FFD9         	movff	forwards@mR,fsr2l
  5470  001744  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5471  001748  0E63               	movlw	99
  5472  00174A  64DF               	cpfsgt	indf2,c
  5473  00174C  D7C7               	goto	l276
  5474  00174E  0012               	return	
  5475  001750                     __end_of_forwards:
  5476                           	opt stack 0
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           intcon	equ	0xFF2
  5482                           intcon3	equ	0xFF0
  5483                           postinc0	equ	0xFEE
  5484                           wreg	equ	0xFE8
  5485                           postinc1	equ	0xFE6
  5486                           fsr1h	equ	0xFE2
  5487                           fsr1l	equ	0xFE1
  5488                           indf2	equ	0xFDF
  5489                           postinc2	equ	0xFDE
  5490                           postdec2	equ	0xFDD
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _setMotorPWM *****************
  5496 ;; Defined at:
  5497 ;;		line 33 in file "motor.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  m               2   19[COMRAM] PTR struct Motor
  5500 ;;		 -> main@mR(9), main@mL(9), 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  PWMduty         2   24[COMRAM] int 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  1    wreg      void 
  5505 ;; Registers used:
  5506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5512 ;;      Params:         2       0       0       0
  5513 ;;      Locals:         2       0       0       0
  5514 ;;      Temps:          3       0       0       0
  5515 ;;      Totals:         7       0       0       0
  5516 ;;Total ram usage:        7 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    2
  5519 ;; This function calls:
  5520 ;;		___awdiv
  5521 ;;		___wmul
  5522 ;; This function is called by:
  5523 ;;		_stop
  5524 ;;		_turnLeft
  5525 ;;		_turnRight
  5526 ;;		_turnRightSlow
  5527 ;;		_forwards
  5528 ;;		_accelerate
  5529 ;;		_decelerate
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text32
  5534  000BEC                     __ptext32:
  5535                           	opt stack 0
  5536  000BEC                     _setMotorPWM:
  5537                           	opt stack 27
  5538                           
  5539                           ;motor.c: 34:     int PWMduty;;motor.c: 35:     if (m->direction) {
  5540                           
  5541                           ;incstack = 0
  5542  000BEC  EE20 F001          	lfsr	2,1
  5543  000BF0  5014               	movf	setMotorPWM@m,w,c
  5544  000BF2  26D9               	addwf	fsr2l,f,c
  5545  000BF4  5015               	movf	setMotorPWM@m+1,w,c
  5546  000BF6  22DA               	addwfc	fsr2h,f,c
  5547  000BF8  50DF               	movf	indf2,w,c
  5548  000BFA  B4D8               	btfsc	status,2,c
  5549  000BFC  D034               	goto	l224
  5550                           
  5551                           ;motor.c: 37:         PWMduty = m->period - ((int) (m->power)*(m->period)) / 100;
  5552  000BFE  EE20 F007          	lfsr	2,7
  5553  000C02  5014               	movf	setMotorPWM@m,w,c
  5554  000C04  26D9               	addwf	fsr2l,f,c
  5555  000C06  5015               	movf	setMotorPWM@m+1,w,c
  5556  000C08  22DA               	addwfc	fsr2h,f,c
  5557  000C0A  CFDE F016          	movff	postinc2,??_setMotorPWM
  5558  000C0E  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  5559  000C12  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  5560  000C16  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5561  000C1A  50DF               	movf	indf2,w,c
  5562  000C1C  6E18               	movwf	(??_setMotorPWM+2)& (0+255),c
  5563  000C1E  5018               	movf	??_setMotorPWM+2,w,c
  5564  000C20  6E06               	movwf	___wmul@multiplier,c
  5565  000C22  6A07               	clrf	___wmul@multiplier+1,c
  5566  000C24  EE20 F007          	lfsr	2,7
  5567  000C28  5014               	movf	setMotorPWM@m,w,c
  5568  000C2A  26D9               	addwf	fsr2l,f,c
  5569  000C2C  5015               	movf	setMotorPWM@m+1,w,c
  5570  000C2E  22DA               	addwfc	fsr2h,f,c
  5571  000C30  CFDE F008          	movff	postinc2,___wmul@multiplicand
  5572  000C34  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  5573  000C38  ECA3  F00D         	call	___wmul	;wreg free
  5574  000C3C  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5575  000C40  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5576  000C44  0E00               	movlw	0
  5577  000C46  6E0F               	movwf	___awdiv@divisor+1,c
  5578  000C48  0E64               	movlw	100
  5579  000C4A  6E0E               	movwf	___awdiv@divisor,c
  5580  000C4C  ECA8  F00B         	call	___awdiv	;wreg free
  5581  000C50  1E0C               	comf	?___awdiv,f,c
  5582  000C52  1E0D               	comf	?___awdiv+1,f,c
  5583  000C54  4A0C               	infsnz	?___awdiv,f,c
  5584  000C56  2A0D               	incf	?___awdiv+1,f,c
  5585  000C58  5016               	movf	??_setMotorPWM,w,c
  5586  000C5A  240C               	addwf	?___awdiv,w,c
  5587  000C5C  6E19               	movwf	setMotorPWM@PWMduty,c
  5588  000C5E  5017               	movf	??_setMotorPWM+1,w,c
  5589  000C60  200D               	addwfc	?___awdiv+1,w,c
  5590  000C62  6E1A               	movwf	setMotorPWM@PWMduty+1,c
  5591                           
  5592                           ;motor.c: 38:     } else {
  5593  000C64  D023               	goto	l225
  5594  000C66                     l224:
  5595                           
  5596                           ;motor.c: 40:         PWMduty = ((int) (m->power)*(m->period)) / 100;
  5597  000C66  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  5598  000C6A  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5599  000C6E  50DF               	movf	indf2,w,c
  5600  000C70  6E16               	movwf	??_setMotorPWM& (0+255),c
  5601  000C72  5016               	movf	??_setMotorPWM,w,c
  5602  000C74  6E06               	movwf	___wmul@multiplier,c
  5603  000C76  6A07               	clrf	___wmul@multiplier+1,c
  5604  000C78  EE20 F007          	lfsr	2,7
  5605  000C7C  5014               	movf	setMotorPWM@m,w,c
  5606  000C7E  26D9               	addwf	fsr2l,f,c
  5607  000C80  5015               	movf	setMotorPWM@m+1,w,c
  5608  000C82  22DA               	addwfc	fsr2h,f,c
  5609  000C84  CFDE F008          	movff	postinc2,___wmul@multiplicand
  5610  000C88  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  5611  000C8C  ECA3  F00D         	call	___wmul	;wreg free
  5612  000C90  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5613  000C94  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5614  000C98  0E00               	movlw	0
  5615  000C9A  6E0F               	movwf	___awdiv@divisor+1,c
  5616  000C9C  0E64               	movlw	100
  5617  000C9E  6E0E               	movwf	___awdiv@divisor,c
  5618  000CA0  ECA8  F00B         	call	___awdiv	;wreg free
  5619  000CA4  C00C  F019         	movff	?___awdiv,setMotorPWM@PWMduty
  5620  000CA8  C00D  F01A         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5621  000CAC                     l225:
  5622                           
  5623                           ;motor.c: 42:     PWMduty = (PWMduty << 2);
  5624  000CAC  C019  F016         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  5625  000CB0  C01A  F017         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  5626  000CB4  90D8               	bcf	status,0,c
  5627  000CB6  3616               	rlcf	??_setMotorPWM,f,c
  5628  000CB8  3617               	rlcf	??_setMotorPWM+1,f,c
  5629  000CBA  90D8               	bcf	status,0,c
  5630  000CBC  3616               	rlcf	??_setMotorPWM,f,c
  5631  000CBE  3617               	rlcf	??_setMotorPWM+1,f,c
  5632  000CC0  C016  F019         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  5633  000CC4  C017  F01A         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  5634                           
  5635                           ;motor.c: 43:     *(m->duty_low) = PWMduty & 0xFF;
  5636  000CC8  EE20 F002          	lfsr	2,2
  5637  000CCC  5014               	movf	setMotorPWM@m,w,c
  5638  000CCE  26D9               	addwf	fsr2l,f,c
  5639  000CD0  5015               	movf	setMotorPWM@m+1,w,c
  5640  000CD2  22DA               	addwfc	fsr2h,f,c
  5641  000CD4  CFDE F016          	movff	postinc2,??_setMotorPWM
  5642  000CD8  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  5643  000CDC  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  5644  000CE0  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5645  000CE4  C019  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5646                           
  5647                           ;motor.c: 44:     *(m->duty_high) = (PWMduty >> 8) & 0x3F;
  5648  000CE8  EE20 F004          	lfsr	2,4
  5649  000CEC  5014               	movf	setMotorPWM@m,w,c
  5650  000CEE  26D9               	addwf	fsr2l,f,c
  5651  000CF0  5015               	movf	setMotorPWM@m+1,w,c
  5652  000CF2  22DA               	addwfc	fsr2h,f,c
  5653  000CF4  CFDE F016          	movff	postinc2,??_setMotorPWM
  5654  000CF8  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  5655  000CFC  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  5656  000D00  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5657  000D04  501A               	movf	setMotorPWM@PWMduty+1,w,c
  5658  000D06  0B3F               	andlw	63
  5659  000D08  6EDF               	movwf	indf2,c
  5660                           
  5661                           ;motor.c: 46:     if (m->direction) {
  5662  000D0A  EE20 F001          	lfsr	2,1
  5663  000D0E  5014               	movf	setMotorPWM@m,w,c
  5664  000D10  26D9               	addwf	fsr2l,f,c
  5665  000D12  5015               	movf	setMotorPWM@m+1,w,c
  5666  000D14  22DA               	addwfc	fsr2h,f,c
  5667  000D16  50DF               	movf	indf2,w,c
  5668  000D18  B4D8               	btfsc	status,2,c
  5669  000D1A  D014               	goto	l226
  5670                           
  5671                           ;motor.c: 47:         LATB = LATB | (1 << (m->dir_pin));
  5672  000D1C  EE20 F006          	lfsr	2,6
  5673  000D20  5014               	movf	setMotorPWM@m,w,c
  5674  000D22  26D9               	addwf	fsr2l,f,c
  5675  000D24  5015               	movf	setMotorPWM@m+1,w,c
  5676  000D26  22DA               	addwfc	fsr2h,f,c
  5677  000D28  50DF               	movf	indf2,w,c
  5678  000D2A  6E16               	movwf	??_setMotorPWM& (0+255),c
  5679  000D2C  0E01               	movlw	1
  5680  000D2E  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  5681  000D30  2A16               	incf	??_setMotorPWM,f,c
  5682  000D32  D002               	goto	u1974
  5683  000D34                     u1975:
  5684  000D34  90D8               	bcf	status,0,c
  5685  000D36  3617               	rlcf	??_setMotorPWM+1,f,c
  5686  000D38                     u1974:
  5687  000D38  2E16               	decfsz	??_setMotorPWM,f,c
  5688  000D3A  D7FC               	goto	u1975
  5689  000D3C  5017               	movf	??_setMotorPWM+1,w,c
  5690  000D3E  108A               	iorwf	3978,w,c	;volatile
  5691  000D40  6E8A               	movwf	3978,c	;volatile
  5692                           
  5693                           ;motor.c: 48:     } else {
  5694  000D42  0012               	return	
  5695  000D44                     l226:
  5696                           
  5697                           ;motor.c: 49:         LATB = LATB & (~(1 << (m->dir_pin)));
  5698  000D44  EE20 F006          	lfsr	2,6
  5699  000D48  5014               	movf	setMotorPWM@m,w,c
  5700  000D4A  26D9               	addwf	fsr2l,f,c
  5701  000D4C  5015               	movf	setMotorPWM@m+1,w,c
  5702  000D4E  22DA               	addwfc	fsr2h,f,c
  5703  000D50  50DF               	movf	indf2,w,c
  5704  000D52  6E16               	movwf	??_setMotorPWM& (0+255),c
  5705  000D54  0E01               	movlw	1
  5706  000D56  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  5707  000D58  2A16               	incf	??_setMotorPWM,f,c
  5708  000D5A  D002               	goto	u1984
  5709  000D5C                     u1985:
  5710  000D5C  90D8               	bcf	status,0,c
  5711  000D5E  3617               	rlcf	??_setMotorPWM+1,f,c
  5712  000D60                     u1984:
  5713  000D60  2E16               	decfsz	??_setMotorPWM,f,c
  5714  000D62  D7FC               	goto	u1985
  5715  000D64  5017               	movf	??_setMotorPWM+1,w,c
  5716  000D66  0AFF               	xorlw	255
  5717  000D68  148A               	andwf	3978,w,c	;volatile
  5718  000D6A  6E8A               	movwf	3978,c	;volatile
  5719  000D6C  0012               	return	
  5720  000D6E                     __end_of_setMotorPWM:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           intcon	equ	0xFF2
  5727                           intcon3	equ	0xFF0
  5728                           postinc0	equ	0xFEE
  5729                           wreg	equ	0xFE8
  5730                           postinc1	equ	0xFE6
  5731                           fsr1h	equ	0xFE2
  5732                           fsr1l	equ	0xFE1
  5733                           indf2	equ	0xFDF
  5734                           postinc2	equ	0xFDE
  5735                           postdec2	equ	0xFDD
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function ___wmul *****************
  5741 ;; Defined at:
  5742 ;;		line 15 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/Umul16.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  multiplier      2    5[COMRAM] unsigned int 
  5745 ;;  multiplicand    2    7[COMRAM] unsigned int 
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;  product         2    9[COMRAM] unsigned int 
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  2    5[COMRAM] unsigned int 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, prodl, prodh
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5757 ;;      Params:         4       0       0       0
  5758 ;;      Locals:         2       0       0       0
  5759 ;;      Temps:          0       0       0       0
  5760 ;;      Totals:         6       0       0       0
  5761 ;;Total ram usage:        6 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    1
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_setMotorPWM
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           	psect	text33
  5772  001B46                     __ptext33:
  5773                           	opt stack 0
  5774  001B46                     ___wmul:
  5775                           	opt stack 27
  5776                           
  5777                           ;incstack = 0
  5778  001B46  5006               	movf	___wmul@multiplier,w,c
  5779  001B48  0208               	mulwf	___wmul@multiplicand,c
  5780  001B4A  CFF3 F00A          	movff	prodl,___wmul@product
  5781  001B4E  CFF4 F00B          	movff	prodh,___wmul@product+1
  5782  001B52  5006               	movf	___wmul@multiplier,w,c
  5783  001B54  0209               	mulwf	___wmul@multiplicand+1,c
  5784  001B56  50F3               	movf	prodl,w,c
  5785  001B58  260B               	addwf	___wmul@product+1,f,c
  5786  001B5A  5007               	movf	___wmul@multiplier+1,w,c
  5787  001B5C  0208               	mulwf	___wmul@multiplicand,c
  5788  001B5E  50F3               	movf	prodl,w,c
  5789  001B60  260B               	addwf	___wmul@product+1,f,c
  5790  001B62  C00A  F006         	movff	___wmul@product,?___wmul
  5791  001B66  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  5792  001B6A  0012               	return	
  5793  001B6C                     __end_of___wmul:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           intcon	equ	0xFF2
  5802                           intcon3	equ	0xFF0
  5803                           postinc0	equ	0xFEE
  5804                           wreg	equ	0xFE8
  5805                           postinc1	equ	0xFE6
  5806                           fsr1h	equ	0xFE2
  5807                           fsr1l	equ	0xFE1
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           fsr2h	equ	0xFDA
  5812                           fsr2l	equ	0xFD9
  5813                           status	equ	0xFD8
  5814                           
  5815 ;; *************** function ___awdiv *****************
  5816 ;; Defined at:
  5817 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/awdiv.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  dividend        2   11[COMRAM] int 
  5820 ;;  divisor         2   13[COMRAM] int 
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;  quotient        2   17[COMRAM] int 
  5823 ;;  sign            1   16[COMRAM] unsigned char 
  5824 ;;  counter         1   15[COMRAM] unsigned char 
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  2   11[COMRAM] int 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5834 ;;      Params:         4       0       0       0
  5835 ;;      Locals:         4       0       0       0
  5836 ;;      Temps:          0       0       0       0
  5837 ;;      Totals:         8       0       0       0
  5838 ;;Total ram usage:        8 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    1
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_setMotorPWM
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text34
  5849  001750                     __ptext34:
  5850                           	opt stack 0
  5851  001750                     ___awdiv:
  5852                           	opt stack 27
  5853                           
  5854                           ;incstack = 0
  5855  001750  0E00               	movlw	0
  5856  001752  6E11               	movwf	___awdiv@sign,c
  5857  001754  AE0F               	btfss	___awdiv@divisor+1,7,c
  5858  001756  D006               	goto	l651
  5859  001758  6C0E               	negf	___awdiv@divisor,c
  5860  00175A  1E0F               	comf	___awdiv@divisor+1,f,c
  5861  00175C  B0D8               	btfsc	status,0,c
  5862  00175E  2A0F               	incf	___awdiv@divisor+1,f,c
  5863  001760  0E01               	movlw	1
  5864  001762  6E11               	movwf	___awdiv@sign,c
  5865  001764                     l651:
  5866  001764  AE0D               	btfss	___awdiv@dividend+1,7,c
  5867  001766  D006               	goto	l652
  5868  001768  6C0C               	negf	___awdiv@dividend,c
  5869  00176A  1E0D               	comf	___awdiv@dividend+1,f,c
  5870  00176C  B0D8               	btfsc	status,0,c
  5871  00176E  2A0D               	incf	___awdiv@dividend+1,f,c
  5872  001770  0E01               	movlw	1
  5873  001772  1A11               	xorwf	___awdiv@sign,f,c
  5874  001774                     l652:
  5875  001774  0E00               	movlw	0
  5876  001776  6E13               	movwf	___awdiv@quotient+1,c
  5877  001778  0E00               	movlw	0
  5878  00177A  6E12               	movwf	___awdiv@quotient,c
  5879  00177C  500E               	movf	___awdiv@divisor,w,c
  5880  00177E  100F               	iorwf	___awdiv@divisor+1,w,c
  5881  001780  B4D8               	btfsc	status,2,c
  5882  001782  D01C               	goto	l659
  5883  001784  0E01               	movlw	1
  5884  001786  6E10               	movwf	___awdiv@counter,c
  5885  001788  D004               	goto	l654
  5886  00178A  90D8               	bcf	status,0,c
  5887  00178C  360E               	rlcf	___awdiv@divisor,f,c
  5888  00178E  360F               	rlcf	___awdiv@divisor+1,f,c
  5889  001790  2A10               	incf	___awdiv@counter,f,c
  5890  001792                     l654:
  5891  001792  AE0F               	btfss	___awdiv@divisor+1,7,c
  5892  001794  D7FA               	goto	l655
  5893  001796                     u1890:
  5894  001796  90D8               	bcf	status,0,c
  5895  001798  3612               	rlcf	___awdiv@quotient,f,c
  5896  00179A  3613               	rlcf	___awdiv@quotient+1,f,c
  5897  00179C  500E               	movf	___awdiv@divisor,w,c
  5898  00179E  5C0C               	subwf	___awdiv@dividend,w,c
  5899  0017A0  500F               	movf	___awdiv@divisor+1,w,c
  5900  0017A2  580D               	subwfb	___awdiv@dividend+1,w,c
  5901  0017A4  A0D8               	btfss	status,0,c
  5902  0017A6  D005               	goto	l658
  5903  0017A8  500E               	movf	___awdiv@divisor,w,c
  5904  0017AA  5E0C               	subwf	___awdiv@dividend,f,c
  5905  0017AC  500F               	movf	___awdiv@divisor+1,w,c
  5906  0017AE  5A0D               	subwfb	___awdiv@dividend+1,f,c
  5907  0017B0  8012               	bsf	___awdiv@quotient,0,c
  5908  0017B2                     l658:
  5909  0017B2  90D8               	bcf	status,0,c
  5910  0017B4  320F               	rrcf	___awdiv@divisor+1,f,c
  5911  0017B6  320E               	rrcf	___awdiv@divisor,f,c
  5912  0017B8  2E10               	decfsz	___awdiv@counter,f,c
  5913  0017BA  D7ED               	goto	u1890
  5914  0017BC                     l659:
  5915  0017BC  5011               	movf	___awdiv@sign,w,c
  5916  0017BE  B4D8               	btfsc	status,2,c
  5917  0017C0  D004               	goto	l660
  5918  0017C2  6C12               	negf	___awdiv@quotient,c
  5919  0017C4  1E13               	comf	___awdiv@quotient+1,f,c
  5920  0017C6  B0D8               	btfsc	status,0,c
  5921  0017C8  2A13               	incf	___awdiv@quotient+1,f,c
  5922  0017CA                     l660:
  5923  0017CA  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  5924  0017CE  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  5925  0017D2  0012               	return	
  5926  0017D4                     __end_of___awdiv:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           intcon	equ	0xFF2
  5935                           intcon3	equ	0xFF0
  5936                           postinc0	equ	0xFEE
  5937                           wreg	equ	0xFE8
  5938                           postinc1	equ	0xFE6
  5939                           fsr1h	equ	0xFE2
  5940                           fsr1l	equ	0xFE1
  5941                           indf2	equ	0xFDF
  5942                           postinc2	equ	0xFDE
  5943                           postdec2	equ	0xFDD
  5944                           fsr2h	equ	0xFDA
  5945                           fsr2l	equ	0xFD9
  5946                           status	equ	0xFD8
  5947                           
  5948 ;; *************** function _LCD_init *****************
  5949 ;; Defined at:
  5950 ;;		line 49 in file "lcd.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;		None
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  1    wreg      void 
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, status,0, cstack
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5964 ;;      Params:         0       0       0       0
  5965 ;;      Locals:         0       0       0       0
  5966 ;;      Temps:          1       0       0       0
  5967 ;;      Totals:         1       0       0       0
  5968 ;;Total ram usage:        1 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; Hardware stack levels required when called:    4
  5971 ;; This function calls:
  5972 ;;		_LCD_out
  5973 ;;		_LCD_send
  5974 ;; This function is called by:
  5975 ;;		_main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           	psect	text35
  5980  000FDA                     __ptext35:
  5981                           	opt stack 0
  5982  000FDA                     _LCD_init:
  5983                           	opt stack 26
  5984                           
  5985                           ;lcd.c: 52:     LATA = 0;
  5986                           
  5987                           ;incstack = 0
  5988  000FDA  0E00               	movlw	0
  5989  000FDC  6E89               	movwf	3977,c	;volatile
  5990                           
  5991                           ;lcd.c: 53:     LATC = 0;
  5992  000FDE  0E00               	movlw	0
  5993  000FE0  6E8B               	movwf	3979,c	;volatile
  5994                           
  5995                           ;lcd.c: 54:     LATD = 0;
  5996  000FE2  0E00               	movlw	0
  5997  000FE4  6E8C               	movwf	3980,c	;volatile
  5998                           
  5999                           ;lcd.c: 57:     TRISA = 0;
  6000  000FE6  0E00               	movlw	0
  6001  000FE8  6E92               	movwf	3986,c	;volatile
  6002                           
  6003                           ;lcd.c: 58:     TRISC = 0;
  6004  000FEA  0E00               	movlw	0
  6005  000FEC  6E94               	movwf	3988,c	;volatile
  6006                           
  6007                           ;lcd.c: 59:     TRISD = 0;
  6008  000FEE  0E00               	movlw	0
  6009  000FF0  6E95               	movwf	3989,c	;volatile
  6010                           
  6011                           ;lcd.c: 63:     _delay((unsigned long)((15)*(8000000/4000.0)));
  6012  000FF2  0E27               	movlw	39
  6013  000FF4  6E0A               	movwf	??_LCD_init& (0+255),c
  6014  000FF6  0EF5               	movlw	245
  6015  000FF8                     u3447:
  6016  000FF8  2EE8               	decfsz	wreg,f,c
  6017  000FFA  D7FE               	bra	u3447
  6018  000FFC  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6019  000FFE  D7FC               	bra	u3447
  6020  001000  F000               	nop	
  6021                           
  6022                           ;lcd.c: 64:     LCD_out(0b0011);
  6023  001002  0E03               	movlw	3
  6024  001004  EC28  F00C         	call	_LCD_out
  6025                           
  6026                           ;lcd.c: 65:     _delay((unsigned long)((5)*(8000000/4000.0)));
  6027  001008  0E0D               	movlw	13
  6028  00100A  6E0A               	movwf	??_LCD_init& (0+255),c
  6029  00100C  0EFC               	movlw	252
  6030  00100E                     u3457:
  6031  00100E  2EE8               	decfsz	wreg,f,c
  6032  001010  D7FE               	bra	u3457
  6033  001012  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6034  001014  D7FC               	bra	u3457
  6035                           
  6036                           ;lcd.c: 66:     LCD_out(0b0011);
  6037  001016  0E03               	movlw	3
  6038  001018  EC28  F00C         	call	_LCD_out
  6039                           
  6040                           ;lcd.c: 67:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  6041  00101C  0E85               	movlw	133
  6042  00101E                     u3467:
  6043  00101E  2EE8               	decfsz	wreg,f,c
  6044  001020  D7FE               	bra	u3467
  6045  001022  F000               	nop	
  6046                           
  6047                           ;lcd.c: 68:     LCD_out(0b0011);
  6048  001024  0E03               	movlw	3
  6049  001026  EC28  F00C         	call	_LCD_out
  6050                           
  6051                           ;lcd.c: 69:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  6052  00102A  0E21               	movlw	33
  6053  00102C                     u3477:
  6054  00102C  2EE8               	decfsz	wreg,f,c
  6055  00102E  D7FE               	bra	u3477
  6056  001030  F000               	nop	
  6057                           
  6058                           ;lcd.c: 70:     LCD_out(0b0010);
  6059  001032  0E02               	movlw	2
  6060  001034  EC28  F00C         	call	_LCD_out
  6061                           
  6062                           ;lcd.c: 71:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  6063  001038  0E21               	movlw	33
  6064  00103A                     u3487:
  6065  00103A  2EE8               	decfsz	wreg,f,c
  6066  00103C  D7FE               	bra	u3487
  6067  00103E  F000               	nop	
  6068                           
  6069                           ;lcd.c: 73:     LCD_send(0b00101000, 0);
  6070  001040  0E00               	movlw	0
  6071  001042  6E08               	movwf	LCD_send@type,c
  6072  001044  0E28               	movlw	40
  6073  001046  EC79  F00D         	call	_LCD_send
  6074                           
  6075                           ;lcd.c: 74:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6076  00104A  0E06               	movlw	6
  6077  00104C  6E0A               	movwf	??_LCD_init& (0+255),c
  6078  00104E  0E30               	movlw	48
  6079  001050                     u3497:
  6080  001050  2EE8               	decfsz	wreg,f,c
  6081  001052  D7FE               	bra	u3497
  6082  001054  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6083  001056  D7FC               	bra	u3497
  6084  001058  D000               	nop2	
  6085                           
  6086                           ;lcd.c: 75:     LCD_send(0b00001000, 0);
  6087  00105A  0E00               	movlw	0
  6088  00105C  6E08               	movwf	LCD_send@type,c
  6089  00105E  0E08               	movlw	8
  6090  001060  EC79  F00D         	call	_LCD_send
  6091                           
  6092                           ;lcd.c: 76:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6093  001064  0E06               	movlw	6
  6094  001066  6E0A               	movwf	??_LCD_init& (0+255),c
  6095  001068  0E30               	movlw	48
  6096  00106A                     u3507:
  6097  00106A  2EE8               	decfsz	wreg,f,c
  6098  00106C  D7FE               	bra	u3507
  6099  00106E  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6100  001070  D7FC               	bra	u3507
  6101  001072  D000               	nop2	
  6102                           
  6103                           ;lcd.c: 77:     LCD_send(0b00000001, 0);
  6104  001074  0E00               	movlw	0
  6105  001076  6E08               	movwf	LCD_send@type,c
  6106  001078  0E01               	movlw	1
  6107  00107A  EC79  F00D         	call	_LCD_send
  6108                           
  6109                           ;lcd.c: 78:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6110  00107E  0E06               	movlw	6
  6111  001080  6E0A               	movwf	??_LCD_init& (0+255),c
  6112  001082  0E30               	movlw	48
  6113  001084                     u3517:
  6114  001084  2EE8               	decfsz	wreg,f,c
  6115  001086  D7FE               	bra	u3517
  6116  001088  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6117  00108A  D7FC               	bra	u3517
  6118  00108C  D000               	nop2	
  6119                           
  6120                           ;lcd.c: 79:     LCD_send(0b00000110, 0);
  6121  00108E  0E00               	movlw	0
  6122  001090  6E08               	movwf	LCD_send@type,c
  6123  001092  0E06               	movlw	6
  6124  001094  EC79  F00D         	call	_LCD_send
  6125                           
  6126                           ;lcd.c: 80:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6127  001098  0E06               	movlw	6
  6128  00109A  6E0A               	movwf	??_LCD_init& (0+255),c
  6129  00109C  0E30               	movlw	48
  6130  00109E                     u3527:
  6131  00109E  2EE8               	decfsz	wreg,f,c
  6132  0010A0  D7FE               	bra	u3527
  6133  0010A2  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6134  0010A4  D7FC               	bra	u3527
  6135  0010A6  D000               	nop2	
  6136                           
  6137                           ;lcd.c: 81:     LCD_send(0b00001100, 0);
  6138  0010A8  0E00               	movlw	0
  6139  0010AA  6E08               	movwf	LCD_send@type,c
  6140  0010AC  0E0C               	movlw	12
  6141  0010AE  EC79  F00D         	call	_LCD_send
  6142                           
  6143                           ;lcd.c: 82:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6144  0010B2  0E06               	movlw	6
  6145  0010B4  6E0A               	movwf	??_LCD_init& (0+255),c
  6146  0010B6  0E30               	movlw	48
  6147  0010B8                     u3537:
  6148  0010B8  2EE8               	decfsz	wreg,f,c
  6149  0010BA  D7FE               	bra	u3537
  6150  0010BC  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6151  0010BE  D7FC               	bra	u3537
  6152  0010C0  D000               	nop2	
  6153  0010C2  0012               	return		;funcret
  6154  0010C4                     __end_of_LCD_init:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           intcon3	equ	0xFF0
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           postinc1	equ	0xFE6
  6167                           fsr1h	equ	0xFE2
  6168                           fsr1l	equ	0xFE1
  6169                           indf2	equ	0xFDF
  6170                           postinc2	equ	0xFDE
  6171                           postdec2	equ	0xFDD
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function _LCD_send *****************
  6177 ;; Defined at:
  6178 ;;		line 34 in file "lcd.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  Byte            1    wreg     unsigned char 
  6181 ;;  type            1    7[COMRAM] unsigned char 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  Byte            1    8[COMRAM] unsigned char 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, status,2, status,0, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6193 ;;      Params:         1       0       0       0
  6194 ;;      Locals:         1       0       0       0
  6195 ;;      Temps:          0       0       0       0
  6196 ;;      Totals:         2       0       0       0
  6197 ;;Total ram usage:        2 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    3
  6200 ;; This function calls:
  6201 ;;		_LCD_out
  6202 ;; This function is called by:
  6203 ;;		_LCD_init
  6204 ;;		_LCD_line
  6205 ;;		_LCD_string
  6206 ;;		_LCD_clear
  6207 ;;		_print_RFID
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           	psect	text36
  6212  001AF2                     __ptext36:
  6213                           	opt stack 0
  6214  001AF2                     _LCD_send:
  6215                           	opt stack 26
  6216                           
  6217                           ;incstack = 0
  6218                           ;LCD_send@Byte stored from wreg
  6219  001AF2  6E09               	movwf	LCD_send@Byte,c
  6220                           
  6221                           ;lcd.c: 38:     PORTAbits.RA6 = type;
  6222  001AF4  B008               	btfsc	LCD_send@type,0,c
  6223  001AF6  D002               	bra	u1845
  6224  001AF8  9C80               	bcf	3968,6,c	;volatile
  6225  001AFA  D001               	bra	u1846
  6226  001AFC                     u1845:
  6227  001AFC  8C80               	bsf	3968,6,c	;volatile
  6228  001AFE                     u1846:
  6229                           
  6230                           ;lcd.c: 41:     LCD_out(Byte >> 4);
  6231  001AFE  3809               	swapf	LCD_send@Byte,w,c
  6232  001B00  0B0F               	andlw	15
  6233  001B02  EC28  F00C         	call	_LCD_out
  6234                           
  6235                           ;lcd.c: 42:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  6236  001B06  0E06               	movlw	6
  6237  001B08                     u3547:
  6238  001B08  2EE8               	decfsz	wreg,f,c
  6239  001B0A  D7FE               	bra	u3547
  6240  001B0C  D000               	nop2	
  6241                           
  6242                           ;lcd.c: 44:     LCD_out(Byte);
  6243  001B0E  5009               	movf	LCD_send@Byte,w,c
  6244  001B10  EC28  F00C         	call	_LCD_out
  6245                           
  6246                           ;lcd.c: 45:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  6247  001B14  0E21               	movlw	33
  6248  001B16                     u3557:
  6249  001B16  2EE8               	decfsz	wreg,f,c
  6250  001B18  D7FE               	bra	u3557
  6251  001B1A  F000               	nop	
  6252  001B1C  0012               	return		;funcret
  6253  001B1E                     __end_of_LCD_send:
  6254                           	opt stack 0
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           intcon	equ	0xFF2
  6262                           intcon3	equ	0xFF0
  6263                           postinc0	equ	0xFEE
  6264                           wreg	equ	0xFE8
  6265                           postinc1	equ	0xFE6
  6266                           fsr1h	equ	0xFE2
  6267                           fsr1l	equ	0xFE1
  6268                           indf2	equ	0xFDF
  6269                           postinc2	equ	0xFDE
  6270                           postdec2	equ	0xFDD
  6271                           fsr2h	equ	0xFDA
  6272                           fsr2l	equ	0xFD9
  6273                           status	equ	0xFD8
  6274                           
  6275 ;; *************** function _LCD_out *****************
  6276 ;; Defined at:
  6277 ;;		line 19 in file "lcd.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;  number          1    wreg     unsigned char 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  number          1    6[COMRAM] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      void 
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6291 ;;      Params:         0       0       0       0
  6292 ;;      Locals:         1       0       0       0
  6293 ;;      Temps:          1       0       0       0
  6294 ;;      Totals:         2       0       0       0
  6295 ;;Total ram usage:        2 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    2
  6298 ;; This function calls:
  6299 ;;		_E_TOG
  6300 ;; This function is called by:
  6301 ;;		_LCD_send
  6302 ;;		_LCD_init
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           	psect	text37
  6307  001850                     __ptext37:
  6308                           	opt stack 0
  6309  001850                     _LCD_out:
  6310                           	opt stack 26
  6311                           
  6312                           ;incstack = 0
  6313                           ;LCD_out@number stored from wreg
  6314  001850  6E07               	movwf	LCD_out@number,c
  6315                           
  6316                           ;lcd.c: 19: void LCD_out(unsigned char number);lcd.c: 20:  {;lcd.c: 22:     PORTCbits.RC
      +                          1 = (number & 0b0001);
  6317  001852  C007  F006         	movff	LCD_out@number,??_LCD_out
  6318  001856  0E01               	movlw	1
  6319  001858  1606               	andwf	??_LCD_out,f,c
  6320  00185A  4606               	rlncf	??_LCD_out,f,c
  6321  00185C  5082               	movf	3970,w,c	;volatile
  6322  00185E  1806               	xorwf	??_LCD_out,w,c
  6323  001860  0BFD               	andlw	-3
  6324  001862  1806               	xorwf	??_LCD_out,w,c
  6325  001864  6E82               	movwf	3970,c	;volatile
  6326                           
  6327                           ;lcd.c: 23:     PORTCbits.RC2 = (number & 0b0010) >> 1;
  6328  001866  C007  F006         	movff	LCD_out@number,??_LCD_out
  6329  00186A  90D8               	bcf	status,0,c
  6330  00186C  3206               	rrcf	??_LCD_out,f,c
  6331  00186E  0E01               	movlw	1
  6332  001870  1606               	andwf	??_LCD_out,f,c
  6333  001872  4606               	rlncf	??_LCD_out,f,c
  6334  001874  4606               	rlncf	??_LCD_out,f,c
  6335  001876  5082               	movf	3970,w,c	;volatile
  6336  001878  1806               	xorwf	??_LCD_out,w,c
  6337  00187A  0BFB               	andlw	-5
  6338  00187C  1806               	xorwf	??_LCD_out,w,c
  6339  00187E  6E82               	movwf	3970,c	;volatile
  6340                           
  6341                           ;lcd.c: 24:     PORTDbits.RD0 = (number & 0b0100) >> 2;
  6342  001880  C007  F006         	movff	LCD_out@number,??_LCD_out
  6343  001884  90D8               	bcf	status,0,c
  6344  001886  3206               	rrcf	??_LCD_out,f,c
  6345  001888  90D8               	bcf	status,0,c
  6346  00188A  3206               	rrcf	??_LCD_out,f,c
  6347  00188C  0E01               	movlw	1
  6348  00188E  1606               	andwf	??_LCD_out,f,c
  6349  001890  5083               	movf	3971,w,c	;volatile
  6350  001892  1806               	xorwf	??_LCD_out,w,c
  6351  001894  0BFE               	andlw	-2
  6352  001896  1806               	xorwf	??_LCD_out,w,c
  6353  001898  6E83               	movwf	3971,c	;volatile
  6354                           
  6355                           ;lcd.c: 25:     PORTDbits.RD1 = (number & 0b1000) >> 3;
  6356  00189A  C007  F006         	movff	LCD_out@number,??_LCD_out
  6357  00189E  90D8               	bcf	status,0,c
  6358  0018A0  3206               	rrcf	??_LCD_out,f,c
  6359  0018A2  90D8               	bcf	status,0,c
  6360  0018A4  3206               	rrcf	??_LCD_out,f,c
  6361  0018A6  90D8               	bcf	status,0,c
  6362  0018A8  3206               	rrcf	??_LCD_out,f,c
  6363  0018AA  0E01               	movlw	1
  6364  0018AC  1606               	andwf	??_LCD_out,f,c
  6365  0018AE  4606               	rlncf	??_LCD_out,f,c
  6366  0018B0  5083               	movf	3971,w,c	;volatile
  6367  0018B2  1806               	xorwf	??_LCD_out,w,c
  6368  0018B4  0BFD               	andlw	-3
  6369  0018B6  1806               	xorwf	??_LCD_out,w,c
  6370  0018B8  6E83               	movwf	3971,c	;volatile
  6371                           
  6372                           ;lcd.c: 27:     E_TOG();
  6373  0018BA  ECFA  F00D         	call	_E_TOG	;wreg free
  6374                           
  6375                           ;lcd.c: 28:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6376  0018BE  0E03               	movlw	3
  6377  0018C0                     u3567:
  6378  0018C0  2EE8               	decfsz	wreg,f,c
  6379  0018C2  D7FE               	bra	u3567
  6380  0018C4  F000               	nop	
  6381  0018C6  0012               	return		;funcret
  6382  0018C8                     __end_of_LCD_out:
  6383                           	opt stack 0
  6384                           tblptru	equ	0xFF8
  6385                           tblptrh	equ	0xFF7
  6386                           tblptrl	equ	0xFF6
  6387                           tablat	equ	0xFF5
  6388                           prodh	equ	0xFF4
  6389                           prodl	equ	0xFF3
  6390                           intcon	equ	0xFF2
  6391                           intcon3	equ	0xFF0
  6392                           postinc0	equ	0xFEE
  6393                           wreg	equ	0xFE8
  6394                           postinc1	equ	0xFE6
  6395                           fsr1h	equ	0xFE2
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _E_TOG *****************
  6405 ;; Defined at:
  6406 ;;		line 4 in file "lcd.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      void 
  6413 ;; Registers used:
  6414 ;;		wreg
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6420 ;;      Params:         0       0       0       0
  6421 ;;      Locals:         0       0       0       0
  6422 ;;      Temps:          0       0       0       0
  6423 ;;      Totals:         0       0       0       0
  6424 ;;Total ram usage:        0 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    1
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_LCD_out
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text38
  6435  001BF4                     __ptext38:
  6436                           	opt stack 0
  6437  001BF4                     _E_TOG:
  6438                           	opt stack 26
  6439                           
  6440                           ;lcd.c: 5:     PORTCbits.RC0 = 1;
  6441                           
  6442                           ;incstack = 0
  6443  001BF4  8082               	bsf	3970,0,c	;volatile
  6444                           
  6445                           ;lcd.c: 6:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6446  001BF6  0E03               	movlw	3
  6447  001BF8                     u3577:
  6448  001BF8  2EE8               	decfsz	wreg,f,c
  6449  001BFA  D7FE               	bra	u3577
  6450  001BFC  F000               	nop	
  6451                           
  6452                           ;lcd.c: 7:     PORTCbits.RC0 = 0;
  6453  001BFE  9082               	bcf	3970,0,c	;volatile
  6454                           
  6455                           ;lcd.c: 8:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6456  001C00  0E03               	movlw	3
  6457  001C02                     u3587:
  6458  001C02  2EE8               	decfsz	wreg,f,c
  6459  001C04  D7FE               	bra	u3587
  6460  001C06  F000               	nop	
  6461  001C08  0012               	return		;funcret
  6462  001C0A                     __end_of_E_TOG:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodh	equ	0xFF4
  6469                           prodl	equ	0xFF3
  6470                           intcon	equ	0xFF2
  6471                           intcon3	equ	0xFF0
  6472                           postinc0	equ	0xFEE
  6473                           wreg	equ	0xFE8
  6474                           postinc1	equ	0xFE6
  6475                           fsr1h	equ	0xFE2
  6476                           fsr1l	equ	0xFE1
  6477                           indf2	equ	0xFDF
  6478                           postinc2	equ	0xFDE
  6479                           postdec2	equ	0xFDD
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _InterruptHandlerHigh *****************
  6485 ;; Defined at:
  6486 ;;		line 19 in file "main.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  rx_char         1    4[COMRAM] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      void 
  6493 ;; Registers used:
  6494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6500 ;;      Params:         0       0       0       0
  6501 ;;      Locals:         1       0       0       0
  6502 ;;      Temps:          4       0       0       0
  6503 ;;      Totals:         5       0       0       0
  6504 ;;Total ram usage:        5 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; This function calls:
  6507 ;;		Nothing
  6508 ;; This function is called by:
  6509 ;;		Interrupt level 2
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	intcode
  6514  000008                     __pintcode:
  6515                           	opt stack 0
  6516  000008                     _InterruptHandlerHigh:
  6517                           	opt stack 21
  6518                           
  6519                           ;incstack = 0
  6520  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6521  00000A  CFD9 F001          	movff	fsr2l,??_InterruptHandlerHigh
  6522  00000E  CFDA F002          	movff	fsr2h,??_InterruptHandlerHigh+1
  6523  000012  CFF3 F003          	movff	prodl,??_InterruptHandlerHigh+2
  6524  000016  CFF4 F004          	movff	prodh,??_InterruptHandlerHigh+3
  6525                           
  6526                           ;main.c: 22:     static char count = 0;;main.c: 23:     char rx_char;;main.c: 25:     if
      +                           (PIR1bits.RCIF) {
  6527  00001A  AA9E               	btfss	3998,5,c	;volatile
  6528  00001C  D01A               	goto	i2l123
  6529                           
  6530                           ;main.c: 26:         rx_char = RCREG;
  6531  00001E  CFAE F005          	movff	4014,InterruptHandlerHigh@rx_char	;volatile
  6532                           
  6533                           ;main.c: 27:         if (rx_char == 0x02) {
  6534  000022  0E02               	movlw	2
  6535  000024  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  6536  000026  A4D8               	btfss	status,2,c
  6537  000028  D002               	goto	i2l124
  6538                           
  6539                           ;main.c: 28:             count = 0;
  6540  00002A  0E00               	movlw	0
  6541  00002C  6E59               	movwf	InterruptHandlerHigh@count,c
  6542  00002E                     i2l124:
  6543                           
  6544                           ;main.c: 30:         if (rx_char == 0x03) {
  6545  00002E  0E03               	movlw	3
  6546  000030  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  6547  000032  A4D8               	btfss	status,2,c
  6548  000034  D003               	goto	i2l125
  6549                           
  6550                           ;main.c: 31:             card_read = 1;
  6551  000036  0E01               	movlw	1
  6552  000038  0100               	movlb	0	; () banked
  6553  00003A  6FBE               	movwf	_card_read& (0+255),b	;volatile
  6554  00003C                     i2l125:
  6555                           
  6556                           ;main.c: 33:         string_rfid[count] = rx_char;
  6557                           
  6558                           ; BSR set to: 0
  6559  00003C  5059               	movf	InterruptHandlerHigh@count,w,c
  6560  00003E  0D01               	mullw	1
  6561  000040  0EDF               	movlw	low _string_rfid
  6562  000042  24F3               	addwf	prodl,w,c
  6563  000044  6ED9               	movwf	fsr2l,c
  6564  000046  0E00               	movlw	high _string_rfid
  6565  000048  20F4               	addwfc	prodh,w,c
  6566  00004A  6EDA               	movwf	fsr2h,c
  6567  00004C  C005  FFDF         	movff	InterruptHandlerHigh@rx_char,indf2
  6568                           
  6569                           ;main.c: 34:         count++;
  6570  000050  2A59               	incf	InterruptHandlerHigh@count,f,c
  6571  000052                     i2l123:
  6572                           
  6573                           ;main.c: 36:     if (INTCON3bits.INT2IF) {
  6574  000052  A2F0               	btfss	intcon3,1,c	;volatile
  6575  000054  D00A               	goto	i2l126
  6576                           
  6577                           ;main.c: 37:         if (PORTCbits.RC5 == 1) {
  6578  000056  BA82               	btfsc	3970,5,c	;volatile
  6579                           
  6580                           ;main.c: 38:             if (PORTCbits.RC5 == 1) {
  6581  000058  AA82               	btfss	3970,5,c	;volatile
  6582  00005A  D006               	goto	i2l130
  6583                           
  6584                           ;main.c: 39:                 if (PORTCbits.RC5 == 1) {
  6585  00005C  BA82               	btfsc	3970,5,c	;volatile
  6586                           
  6587                           ;main.c: 40:                     if (PORTCbits.RC5 == 1) {
  6588  00005E  AA82               	btfss	3970,5,c	;volatile
  6589  000060  D003               	goto	i2l130
  6590                           
  6591                           ;main.c: 41:                         card_read = 0;
  6592  000062  0E00               	movlw	0
  6593  000064  0100               	movlb	0	; () banked
  6594  000066  6FBE               	movwf	_card_read& (0+255),b	;volatile
  6595  000068                     i2l130:
  6596                           
  6597                           ;main.c: 46:         INTCON3bits.INT2IF = 0;
  6598                           
  6599                           ; BSR set to: 0
  6600                           
  6601                           ;main.c: 45:         }
  6602                           
  6603                           ; BSR set to: 0
  6604                           
  6605                           ;main.c: 44:             }
  6606                           
  6607                           ; BSR set to: 0
  6608                           
  6609                           ;main.c: 43:                 }
  6610                           
  6611                           ; BSR set to: 0
  6612  000068  92F0               	bcf	intcon3,1,c	;volatile
  6613  00006A                     i2l126:
  6614  00006A  C004  FFF4         	movff	??_InterruptHandlerHigh+3,prodh
  6615  00006E  C003  FFF3         	movff	??_InterruptHandlerHigh+2,prodl
  6616  000072  C002  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  6617  000076  C001  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  6618  00007A  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6619  00007C  0011               	retfie		f
  6620  00007E                     __end_of_InterruptHandlerHigh:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           intcon3	equ	0xFF0
  6630                           postinc0	equ	0xFEE
  6631                           wreg	equ	0xFE8
  6632                           postinc1	equ	0xFE6
  6633                           fsr1h	equ	0xFE2
  6634                           fsr1l	equ	0xFE1
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           intcon	equ	0xFF2
  6648                           intcon3	equ	0xFF0
  6649                           postinc0	equ	0xFEE
  6650                           wreg	equ	0xFE8
  6651                           postinc1	equ	0xFE6
  6652                           fsr1h	equ	0xFE2
  6653                           fsr1l	equ	0xFE1
  6654                           indf2	equ	0xFDF
  6655                           postinc2	equ	0xFDE
  6656                           postdec2	equ	0xFDD
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661                           	psect	rparam
  6662  0000                     tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           intcon	equ	0xFF2
  6669                           intcon3	equ	0xFF0
  6670                           postinc0	equ	0xFEE
  6671                           wreg	equ	0xFE8
  6672                           postinc1	equ	0xFE6
  6673                           fsr1h	equ	0xFE2
  6674                           fsr1l	equ	0xFE1
  6675                           indf2	equ	0xFDF
  6676                           postinc2	equ	0xFDE
  6677                           postdec2	equ	0xFDD
  6678                           fsr2h	equ	0xFDA
  6679                           fsr2l	equ	0xFD9
  6680                           status	equ	0xFD8
  6681                           
  6682                           	psect	temp
  6683  00005A                     btemp:
  6684                           	opt stack 0
  6685  00005A                     	ds	1
  6686  0000                     int$flags	set	btemp
  6687  0000                     wtemp8	set	btemp+1
  6688  0000                     ttemp5	set	btemp+1
  6689  0000                     ttemp6	set	btemp+4
  6690  0000                     ttemp7	set	btemp+8
  6691                           tblptru	equ	0xFF8
  6692                           tblptrh	equ	0xFF7
  6693                           tblptrl	equ	0xFF6
  6694                           tablat	equ	0xFF5
  6695                           prodh	equ	0xFF4
  6696                           prodl	equ	0xFF3
  6697                           intcon	equ	0xFF2
  6698                           intcon3	equ	0xFF0
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           postinc1	equ	0xFE6
  6702                           fsr1h	equ	0xFE2
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8


Data Sizes:
    Strings     49
    Constant    0
    Data        0
    BSS         59
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     84      89
    BANK0           160     90     144
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[10]), STR_1(CODE[9]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1726_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[10]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[10]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    print_RFID@dis	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(BANK0[17]), 

    print_RFID@pa	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(BANK0[17]), 

    forwards@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    forwards@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRightSlow@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRightSlow@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRightSlow@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRightSlow@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRightSlow@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRightSlow@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    decelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    decelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    accelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    accelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    read_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S524Motor$duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S524Motor$duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    print_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    LCD_string@string	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 


Critical Paths under _main in COMRAM

    _turnRightSlow->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _print_RFID->_LCD_clear
    _print_RFID->_LCD_line
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _utoa->_pad
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_string->_LCD_send
    _LCD_line->_LCD_send
    _LCD_clear->_LCD_send
    _forwards->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _LCD_init->_LCD_send
    _LCD_send->_LCD_out

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_print_IR
    _print_IR->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   37985
                                             53 BANK0     37    37      0
                           _LCD_init
                           _forwards
                            _initPWM
                          _init_RFID
                        _init_TIMER5
                       _init_capture
                   _interrupt_EUSART
                           _print_IR
                         _print_RFID
                            _read_IR
                               _stop
                           _turnLeft
                          _turnRight
                      _turnRightSlow
 ---------------------------------------------------------------------------------
 (1) _turnRightSlow                                        5     1      4    2746
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     1      4    2746
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     1      4    2746
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    3158
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              5     3      2     208
                                              5 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _print_RFID                                          10     6      4    3028
                                             10 COMRAM    10     6      4
                          _LCD_clear
                           _LCD_line
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _print_IR                                            19    17      2   17928
                                             34 BANK0     19    17      2
                          _LCD_clear
                           _LCD_line
                         _LCD_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             16    10      6   14499
                                             18 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   13467
                                             78 COMRAM     6     0      6
                                             16 BANK0      2     2      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           44    38      6   12985
                                             68 COMRAM    10     4      6
                                              0 BANK0     16    16      0
                               _dtoa
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                32    22     10    5099
                                             32 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (6) ___lomod                                             17     1     16     412
                                              5 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (6) ___lodiv                                             25     9     16     421
                                              5 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    5953
                                             32 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3687
                                             21 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     220
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1537
                                             14 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4    1037
                                              5 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              5 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              5 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           2     0      2    1263
                                              9 COMRAM     2     0      2
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_line                                             1     1      0     958
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            1     1      0     914
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _interrupt_EUSART                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_capture                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _forwards                                             5     1      4    2746
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    2374
                                             19 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     655
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             11 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0    1002
                                              9 COMRAM     1     1      0
                            _LCD_out
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_send                                             2     1      1     914
                                              7 COMRAM     2     1      1
                            _LCD_out
 ---------------------------------------------------------------------------------
 (3) _LCD_out                                              2     2      0      88
                                              5 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InterruptHandlerHigh                                5     5      0      67
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _LCD_out
       _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _forwards
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initPWM
   _init_RFID
   _init_TIMER5
   _init_capture
   _interrupt_EUSART
   _print_IR
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_string
       _LCD_send
         _LCD_out
           _E_TOG
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
   _print_RFID
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _read_IR
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRightSlow
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     54      59       1       94.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E9       3        0.0%
DATA                 0      0      E9      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Dec  4 11:28:57 2018

                 print_RFID@pa 000B                             l50 1A94                             l43 1AD6  
                           l45 1AE8                             l49 1AB2                   ___awdiv@sign 0011  
                print_RFID@dis 000D            ___wmul@multiplicand 0008                            l141 03B0  
                          l150 053A                            l142 0410                            l151 052E  
                          l224 0C66                            l225 0CAC                            l321 17E4  
                          l153 058A                            l137 0340                            l226 0D44  
                          l402 0A50                            l322 17E0                            l146 0488  
                          l243 1920                            l251 1606                            l404 0A58  
                          l420 099A                            l324 1818                            l244 18CA  
                          l252 15B0                            l260 151A                            l148 04E6  
                          l405 0B86                            l421 09E0                            l325 17F6  
                          l245 18E2                            l253 15C8                            l261 1532  
                          l406 0A9A                            l246 18FA                            l254 15E0  
                          l262 154A                            l270 14B4                            l415 09F8  
                          l416 08FE                            l424 19D2                            l425 19AC  
                          l370 16A0                            l362 163C                            l275 1732  
                          l259 1570                            l267 14DA                            l276 16DC  
                          l364 164A                            l380 0656                            l268 1484  
                          l277 16F4                            l541 0E58                            l269 149C  
                          l278 170C                            l542 0E6E                            l534 0D9A  
                          l550 0F34                            l366 1652                            l390 07E4  
                          l374 0618                            l543 0E94                            l535 0DC2  
                          l551 0F20                            l367 1674                            l383 0768  
                          l368 165C                            l384 0670                            l537 0DFC  
                          l377 0634                            l538 0DE8                            l554 0F7C  
                          l394 07CC                            l651 1764                            l555 0F92  
                          l547 0EE2                            l379 063C                            l660 17CA  
                          l652 1774                            l556 0FB8                            l548 0F06  
                          l654 1792                            l655 178A                            l658 17B2  
                          l659 17BC                            l870 10EA                            l880 132E  
                          l873 115A                            l874 1170                            l883 138A  
                          l884 13A0                            l869 10FE                            l879 1342  
               print_IR@Values 0082                            _abs 1A60                            _pad 1624  
                          prod 000FF3                            wreg 000FE8                    ?_LCD_string 000A  
                 __CFG_LVP$OFF 000000                __end_of_LCD_out 18C8                           l1105 1A88  
                         l1113 13DA                           ?_abs 0018                           l1125 1A48  
                         l1141 19FC                           l1126 1A32                           l1142 19F8  
                         ?_pad 0016                           STR_1 0329                           STR_2 031F  
                         STR_3 0311                           STR_4 0301                           u2005 12E6  
                         u3000 0BB0                           u3001 0BAE                           u3010 0BBE  
                         u3020 0BC2                           _LATA 000F89                           u3110 0408  
                         _LATB 000F8A                           _LATC 000F8B                           _LATD 000F8C  
                         u3050 0880                           u3140 04F2                           u2510 13D2  
                         u3150 04FE                           u2600 1A6E                           u2530 141A  
                         u3307 14D2                           u3317 1568                           u2710 0F38  
                         u3407 1AAC                           u2631 0DC8                           u3327 15FE  
                         u3417 1AEA                           u3337 1918                           u2650 0E00  
                         u2810 05EA                           u3507 106A                           u3427 1B9A  
                         u3347 130A                           u3267 0470                           u2900 0798  
                         u2820 05EC                           u1845 1AFC                           u3517 1084  
                         u3437 172A                           u2901 0796                           u2741 10CA  
                         u3357 180E                           u3277 04D0                           u1846 1AFE  
                         u2910 07A6                           u3527 109E                           u3447 0FF8  
                         u3367 1212                           u3287 057C                           u2920 07AA  
                         u2760 1102                           u3537 10B8                           u3457 100E  
                         u3377 1224                           u3297 05B4                           u1890 1796  
                         u2850 062A                           u3547 1B08                           u3467 101E  
                         u3387 1236                           u2940 07B6                           u3557 1B16  
                         u3477 102C                           u3397 1248                           u1974 0D38  
                         u2870 0650                           u2790 1346                           u3567 18C0  
                         u3487 103A                           u1975 0D34                           u1984 0D60  
                         u2880 0776                           u3577 1BF8                           u3497 1050  
                         u1985 0D5C                           u2970 0A46                           u3587 1C02  
                         u1995 12B4       __end_of_interrupt_EUSART 1C1A                           abs@a 0018  
                         _dbuf 00BF                           _main 0334                           _dtoa 05C2  
                         _prec 0055                           _nout 00BA                           pad@i 001D  
                         pad@p 001A                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           pad@w 001F  
                         fsr2l 000FD9                           btemp 005A                           _stop 18C8  
                         _utoa 0A34                           prodh 000FF4                           prodl 000FF3  
                         start 007E             __size_of_LCD_clear 001C                   ?_init_TIMER5 0001  
                 ___param_bank 000000                    _string_rfid 00DF                          ??_abs 001A  
                        ??_pad 001C               __end_of_LCD_line 1AF2               __end_of_LCD_init 10C4  
             __end_of_LCD_send 1B1E                __end_of___aodiv 0EB6                          ?_main 0001  
                        ?_dtoa 0021                __end_of___aomod 0FDA                __end_of___awdiv 17D4  
                        ?_stop 001B                          ?_utoa 0021                __end_of___lodiv 1192  
              ___awdiv@divisor 000E                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                __end_of___lomod 13C2                          _PDC1L 000F77  
                        _T5CON 000FB7                          i2l130 0068                          i2l123 0052  
                        i2l124 002E                          i2l125 003C                          i2l126 006A  
              ___awdiv@counter 0010                          _RCREG 000FAE                          _E_TOG 1BF4  
                 vfpfcnvrt@fmt 0047                          _TMR0H 000FD7                   vfpfcnvrt@llu 0068  
                        _TMR0L 000FD6                          _SPBRG 000FAF                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
              __end_of_initPWM 1B8A                          _flags 0057                __end_of_read_IR 1314  
                        _fputc 13C2                          _fputs 1A28                          pad@fp 0016  
                        _width 00BC                          _putch 1C1A                          dtoa@d 0023  
                        dtoa@i 0043                          dtoa@n 003B                          dtoa@p 0035  
                        dtoa@s 0039                          dtoa@w 0037                          tablat 000FF5  
                        ttemp5 005B                          ttemp6 005E                          ttemp7 0062  
                        utoa@d 0023                          utoa@i 003F                          utoa@n 0037  
                        utoa@p 0033                          utoa@w 0035                          status 000FD8  
                        wtemp8 005B                __end_of_sprintf 1998               ___lodiv@dividend 0006  
               __CFG_MCLRE$OFF 000000                __initialization 1B1E            __size_of_LCD_string 0030  
                 __end_of_main 05C2                   __end_of_dtoa 080E                   __end_of_stop 193E  
                 __end_of_utoa 0BEC                 __CFG_OSC$IRCIO 000000                         ??_main 0095  
                       ??_dtoa 002B                         ??_stop 001F                         ??_utoa 002B  
                __activetblptr 000001                         ?_E_TOG 0001                      ??_LCD_out 0006  
                main@direction 009E               ___lodiv@quotient 0016              __end_of_LCD_clear 1BA6  
                 ?_setMotorPWM 0014                         ?_fputc 0006                         ?_fputs 000F  
             ___awdiv@dividend 000C                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       ?_putch 0001                  ?_init_capture 0001                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                   vfprintf@cfmt 0070  
                    ??___aodiv 0016                      ??___aomod 0016                         ___wmul 1B46  
                    ??___awdiv 0010                      ??___lodiv 0016                      ??___lomod 0016  
                       clear_0 1B24               __end_of_forwards 1750               ___awdiv@quotient 0012  
                       pad@buf 0018                         main@mL 00A8                         main@mR 00B1  
                       dtoa@fp 0021                         _strlen 19EE                      ??_initPWM 0006  
                       fputc@c 0006                      ??_read_IR 0008                         fputs@c 0013  
                       fputs@i 0014                         fputs@s 000F                  main@threshold 009C  
                 __mediumconst 0000               __end_of_print_IR 1254         __size_of_turnRightSlow 0096  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       putch@c 0001               __end_of_vfprintf 19EE                         stop@mL 001B  
                       stop@mR 001D                         utoa@fp 0021                      ??_sprintf 0055  
               ??_init_capture 0006               __end_of_turnLeft 1624                     __accesstop 0060  
      __end_of__initialization 1B34                      ?_LCD_line 0001                      ?_LCD_init 0001  
                    ?_LCD_send 0008                  ___rparam_used 000001                  __end_of_E_TOG 1C0A  
                 LCD_line@line 000A                 __pcstackCOMRAM 0001           __size_of_init_TIMER5 001A  
                __end_of_fputc 1462                  __end_of_fputs 1A60                  __end_of_putch 1C1C  
                 LCD_send@Byte 0009                   LCD_send@type 0008                        ??_E_TOG 0006  
__size_of_InterruptHandlerHigh 0076                   ??_LCD_string 000C                        ??_fputc 000A  
                      ??_fputs 0013                        ??_putch 0006                     __pbssBANK0 00BA  
             LCD_string@string 000A             __size_of_init_RFID 001A              ?_interrupt_EUSART 0001  
                   ??_LCD_line 000A                     ??_LCD_init 000A                     ??_LCD_send 0009  
           ??_interrupt_EUSART 0006                  _turnRightSlow 1462                        ?___wmul 0006  
           __end_of_LCD_string 1AC2                        _CAP1CON 000F63                        _CAP2CON 000F62  
                      _DFLTCON 000F60                        ?_strlen 0006                        _LCD_out 1850  
           __size_of_vfpfcnvrt 0226                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
             ___lomod@dividend 0006           __size_of_setMotorPWM 0182                      ?_forwards 001B  
           __size_of_turnRight 0096                 ?_turnRightSlow 001B                        __Hparam 0000  
                      __Lparam 0000                      ?_print_IR 0082                        ___aodiv 0D6E  
                      ___aomod 0EB6                        ___awdiv 1750                __size_of___wmul 0026  
                      ___lodiv 10C4                        ___lomod 1314           __end_of_init_capture 1BC0  
                    ?_vfprintf 004F                   __psmallconst 0300                        __pcinit 1B1E  
                      __ramtop 0300                      ?_turnLeft 001B                        __ptext0 0334  
                      __ptext1 1462                        __ptext2 14F8                        __ptext3 158E  
                      __ptext4 18C8                        __ptext5 1254                        __ptext6 17D4  
                      __ptext7 1192                        __ptext8 193E                        __ptext9 1998  
            __end_of_init_RFID 1BF4                      _T0CONbits 000FD5                __size_of_strlen 003A  
                      _initPWM 1B6C                        _read_IR 1254                   __size_of_abs 0032  
                 __size_of_pad 0096                      _T5CONbits 000FB7                        _sprintf 193E  
                    _LCD_clear 1B8A           end_of_initialization 1B34             setMotorPWM@PWMduty 0019  
                      fputc@fp 0008                        fputs@fp 0011                     ??_forwards 001F  
            __end_of_vfpfcnvrt 0A34                      _RCSTAbits 000FAB                     ??_print_IR 0084  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     ??_vfprintf 0055                        strlen@a 000A  
                      strlen@s 0006                     ??_turnLeft 001F                     _print_RFID 17D4  
                    _PORTAbits 000F80                      _PORTCbits 000F82                      _PORTDbits 000F83  
            __end_of_turnRight 158E                    print_IR@buf 0085                     ?_LCD_clear 0001  
                   main@Values 00A0                ??_turnRightSlow 001F                      _TXSTAbits 000FAC  
            __size_of_LCD_line 0030              __size_of_LCD_init 00EA              __size_of_LCD_send 002C  
                  vfpfcnvrt@ap 0049                    vfpfcnvrt@fp 0045                    vfpfcnvrt@ll 0060  
               __end_of___wmul 1B6C                    _BAUDCONbits 000FAA                 __end_of_strlen 1A28  
          start_initialization 1B1E                ___lodiv@divisor 000E                ___lodiv@counter 001E  
                  __end_of_abs 1A92                    __end_of_pad 16BA      InterruptHandlerHigh@count 0059  
 __end_of_InterruptHandlerHigh 007E                  ??_init_TIMER5 0006          __size_of_init_capture 001A  
                  vfprintf@fmt 0051                  LCD_out@number 0007                       ??___wmul 000A  
                   forwards@mL 001B                     forwards@mR 001D      __size_of_interrupt_EUSART 0010  
                  ?_print_RFID 000B                       ??_strlen 0008                       ?_LCD_out 0001  
                  __pbssCOMRAM 0055                  __pcstackBANK0 0060               ___aodiv@dividend 0006  
                  ??_LCD_clear 000A                   _init_capture 1BA6                      _card_read 00BE  
            __size_of_forwards 0096                      _dtoa$1257 0033                      __pintcode 0008  
                     ?___aodiv 0006                       ?___aomod 0006                       ?___awdiv 000C  
             ___aodiv@quotient 0018                       ?___lodiv 0006                       ?___lomod 0006  
            __size_of_print_IR 00C2            __end_of_init_TIMER5 1BDA              __size_of_vfprintf 0056  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66                ___lomod@divisor 000E                       ?_initPWM 0001  
                  __smallconst 0300                ___lomod@counter 0016                       ?_read_IR 0006  
               __size_of_E_TOG 0016              __size_of_turnLeft 0096                      _init_RFID 1BDA  
                ??_setMotorPWM 0016                       ?_sprintf 0072                  read_IR@Values 0006  
               __size_of_fputc 00A0                 __size_of_fputs 0038                 __size_of_putch 0002  
               ___wmul@product 000A                turnRightSlow@mL 001B                turnRightSlow@mR 001D  
          __size_of_print_RFID 007C                       _LCD_line 1AC2                       _LCD_init 0FDA  
                     _LCD_send 1AF2                       _PIE1bits 000F9D                    turnRight@mL 001B  
                  turnRight@mR 001D                       _PIR1bits 000F9E                      _vfpfcnvrt 080E  
            ___wmul@multiplier 0006                   setMotorPWM@m 0014           _InterruptHandlerHigh 0008  
                   ?_init_RFID 0001               __size_of_LCD_out 0078                      _turnRight 14F8  
                  _INTCON3bits 000FF0            __end_of_setMotorPWM 0D6E                       __Hrparam 0000  
                  _init_TIMER5 1BC0                     vfprintf@ap 0053                       __Lrparam 0000  
                   vfprintf@fp 004F                   __Lsmallconst 0300               __size_of___aodiv 0148  
             __size_of___aomod 0124               __size_of___awdiv 0084               __size_of___lodiv 00CE  
             __size_of___lomod 00AE                     ?_vfpfcnvrt 0045               _interrupt_EUSART 1C0A  
              ___aodiv@divisor 000E                ___aodiv@counter 0016          ?_InterruptHandlerHigh 0001  
                   sprintf@fmt 0074                     sprintf@ret 0078               __size_of_initPWM 001E  
             __size_of_read_IR 00C0                     ?_turnRight 001B                       __ptext10 080E  
                     __ptext11 0A34                       __ptext20 1A60                       __ptext12 1314  
                     __ptext21 0EB6                       __ptext13 10C4                       __ptext30 1B6C  
                     __ptext22 0D6E                       __ptext14 05C2                       __ptext31 16BA  
                     __ptext23 1A92                       __ptext15 1624                       __ptext32 0BEC  
                     __ptext24 1AC2                       __ptext16 19EE                       __ptext33 1B46  
                     __ptext25 1B8A                       __ptext17 1A28                       __ptext34 1750  
                     __ptext26 1C0A                       __ptext18 13C2                       __ptext35 0FDA  
                     __ptext27 1BA6                       __ptext19 1C1A                       __ptext36 1AF2  
                     __ptext28 1BC0                       __ptext37 1850                       __ptext29 1BDA  
                     __ptext38 1BF4               __size_of_sprintf 005A                  __size_of_main 028E  
                __size_of_dtoa 024C                       _forwards 16BA                  __size_of_stop 0076  
                __size_of_utoa 01B8                     turnLeft@mL 001B                     turnLeft@mR 001D  
        __end_of_turnRightSlow 14F8                       _print_IR 1192                       int$flags 005A  
                     _vfprintf 1998                       main@diff 009A                   ??_print_RFID 000F  
                     _turnLeft 158E               ___aomod@dividend 0006                     _INTCONbits 000FF2  
                  ??_init_RFID 0006                     _LCD_string 1A92                    _setMotorPWM 0BEC  
                     intlevel2 0000                      sprintf@ap 007A    InterruptHandlerHigh@rx_char 0005  
           __end_of_print_RFID 1850                     _OSCCONbits 000FD3                ___aomod@divisor 000E  
                  ??_vfpfcnvrt 004B                ___aomod@counter 0016         ??_InterruptHandlerHigh 0001  
                     sprintf@f 007C                       sprintf@s 0072                    ??_turnRight 001F  
                 ___aodiv@sign 0017                   ___aomod@sign 0017                   main@PWMcycle 0098  
