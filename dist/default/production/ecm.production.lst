

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Dec  7 17:20:16 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 2.00
    44                           ; Generated 27/05/2018 GMT
    45                           ; 
    46                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4331 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000300                     __psmallconst:
    80                           	opt stack 0
    81  000300  00                 	db	0
    82  000301                     _dpowers:
    83                           	opt stack 0
    84  000301  0001               	dw	1
    85  000303  000A               	dw	10
    86  000305  0064               	dw	100
    87  000307  03E8               	dw	1000
    88  000309  2710               	dw	10000
    89  00030B                     __end_of_dpowers:
    90                           	opt stack 0
    91  0000                     _TRISCbits	set	3988
    92  0000                     _LATCbits	set	3979
    93  0000                     _INTCON2bits	set	4081
    94  0000                     _TMR0H	set	4055
    95  0000                     _TMR0L	set	4054
    96  0000                     _T0CONbits	set	4053
    97  0000                     _INTCON3bits	set	4080
    98  0000                     _PIE1bits	set	3997
    99  0000                     _RCSTAbits	set	4011
   100  0000                     _TXSTAbits	set	4012
   101  0000                     _BAUDCONbits	set	4010
   102  0000                     _SPBRGH	set	4016
   103  0000                     _SPBRG	set	4015
   104  0000                     _LATB	set	3978
   105  0000                     _PTPERH	set	3962
   106  0000                     _PTPERL	set	3963
   107  0000                     _PWMCON1	set	3950
   108  0000                     _PWMCON0	set	3951
   109  0000                     _PTCON1	set	3966
   110  0000                     _PTCON0	set	3967
   111  0000                     _TRISB	set	3987
   112  0000                     _CAP1BUFL	set	3944
   113  0000                     _CAP1BUFH	set	3945
   114  0000                     _CAP2BUFL	set	3942
   115  0000                     _CAP2BUFH	set	3943
   116  0000                     _DFLTCON	set	3936
   117  0000                     _CAP2CON	set	3938
   118  0000                     _CAP1CON	set	3939
   119  0000                     _T5CONbits	set	4023
   120  0000                     _T5CON	set	4023
   121  0000                     _OSCCONbits	set	4051
   122  0000                     _OSCCON	set	4051
   123  0000                     _ANSEL1	set	4025
   124  0000                     _ANSEL0	set	4024
   125  0000                     _INTCONbits	set	4082
   126  0000                     _RCREG	set	4014
   127  0000                     _PIR1bits	set	3998
   128  0000                     _TRISD	set	3989
   129  0000                     _TRISC	set	3988
   130  0000                     _TRISA	set	3986
   131  0000                     _LATD	set	3980
   132  0000                     _LATC	set	3979
   133  0000                     _LATA	set	3977
   134  0000                     _PORTAbits	set	3968
   135  0000                     _PORTDbits	set	3971
   136  0000                     _PORTCbits	set	3970
   137  0000                     _PDC1H	set	3958
   138  0000                     _PDC1L	set	3959
   139  0000                     _PDC0H	set	3960
   140  0000                     _PDC0L	set	3961
   141  00030B  43                 	db	67	;'C'
   142  00030C  53                 	db	83	;'S'
   143  00030D  20                 	db	32
   144  00030E  49                 	db	73	;'I'
   145  00030F  4E                 	db	78	;'N'
   146  000310  43                 	db	67	;'C'
   147  000311  4F                 	db	79	;'O'
   148  000312  52                 	db	82	;'R'
   149  000313  52                 	db	82	;'R'
   150  000314  45                 	db	69	;'E'
   151  000315  43                 	db	67	;'C'
   152  000316  54                 	db	84	;'T'
   153  000317  20                 	db	32
   154  000318  25                 	db	37
   155  000319  64                 	db	100	;'d'
   156  00031A  00                 	db	0
   157  00031B  43                 	db	67	;'C'
   158  00031C  53                 	db	83	;'S'
   159  00031D  20                 	db	32
   160  00031E  43                 	db	67	;'C'
   161  00031F  4F                 	db	79	;'O'
   162  000320  52                 	db	82	;'R'
   163  000321  52                 	db	82	;'R'
   164  000322  45                 	db	69	;'E'
   165  000323  43                 	db	67	;'C'
   166  000324  54                 	db	84	;'T'
   167  000325  20                 	db	32
   168  000326  25                 	db	37
   169  000327  64                 	db	100	;'d'
   170  000328  00                 	db	0
   171  000329                     STR_2:
   172  000329  52                 	db	82	;'R'
   173  00032A  69                 	db	105	;'i'
   174  00032B  67                 	db	103	;'g'
   175  00032C  68                 	db	104	;'h'
   176  00032D  74                 	db	116	;'t'
   177  00032E  3A                 	db	58	;':'
   178  00032F  20                 	db	32
   179  000330  25                 	db	37
   180  000331  75                 	db	117	;'u'
   181  000332  00                 	db	0
   182  000333                     STR_1:
   183  000333  4C                 	db	76	;'L'
   184  000334  65                 	db	101	;'e'
   185  000335  66                 	db	102	;'f'
   186  000336  74                 	db	116	;'t'
   187  000337  3A                 	db	58	;':'
   188  000338  20                 	db	32
   189  000339  25                 	db	37
   190  00033A  75                 	db	117	;'u'
   191  00033B  00                 	db	0
   192  00033C                     STR_3:
   193  00033C  52                 	db	82	;'R'
   194  00033D  65                 	db	101	;'e'
   195  00033E  61                 	db	97	;'a'
   196  00033F  64                 	db	100	;'d'
   197  000340  79                 	db	121	;'y'
   198  000341  00                 	db	0
   199                           
   200                           ; #config settings
   201  000342  00                 	db	0	; dummy byte at the end
   202  0000                     
   203                           	psect	cinit
   204  001410                     __pcinit:
   205                           	opt stack 0
   206  001410                     start_initialization:
   207                           	opt stack 0
   208  001410                     __initialization:
   209                           	opt stack 0
   210                           
   211                           ; Clear objects allocated to BANK0 (1 bytes)
   212  001410  0100               	movlb	0
   213  001412  6BF8               	clrf	__pbssBANK0& (0+255),b
   214                           
   215                           ; Clear objects allocated to COMRAM (20 bytes)
   216  001414  EE00  F039         	lfsr	0,__pbssCOMRAM
   217  001418  0E14               	movlw	20
   218  00141A                     clear_0:
   219  00141A  6AEE               	clrf	postinc0,c
   220  00141C  06E8               	decf	wreg,f,c
   221  00141E  E1FD               	bnz	clear_0
   222  001420                     end_of_initialization:
   223                           	opt stack 0
   224  001420                     __end_of__initialization:
   225                           	opt stack 0
   226  001420  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227  001422  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228  001424  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  001426  6EF8               	movwf	tblptru,c
   230  001428  0100               	movlb	0
   231  00142A  EFA2  F001         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  000039                     __pbssCOMRAM:
   238                           	opt stack 0
   239  000039                     InterruptHandlerHigh@count:
   240                           	opt stack 0
   241  000039                     	ds	1
   242  00003A                     _count_encoder:
   243                           	opt stack 0
   244  00003A                     	ds	1
   245  00003B                     _Direction:
   246                           	opt stack 0
   247  00003B                     	ds	1
   248  00003C                     _string_rfid:
   249                           	opt stack 0
   250  00003C                     	ds	17
   251                           tblptru	equ	0xFF8
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK0
   256  0000F8                     __pbssBANK0:
   257                           	opt stack 0
   258  0000F8                     _card_read:
   259                           	opt stack 0
   260  0000F8                     	ds	1
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	cstackBANK0
   266  000060                     __pcstackBANK0:
   267                           	opt stack 0
   268  000060                     main@forwardsDirection:
   269                           	opt stack 0
   270                           
   271                           ; 100 bytes @ 0x0
   272  000060                     	ds	100
   273  0000C4                     main@buf:
   274                           	opt stack 0
   275                           
   276                           ; 16 bytes @ 0x64
   277  0000C4                     	ds	16
   278  0000D4                     main@PWMcycle:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x74
   282  0000D4                     	ds	2
   283  0000D6                     main@diff:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x76
   287  0000D6                     	ds	2
   288  0000D8                     main@threshold:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x78
   292  0000D8                     	ds	2
   293  0000DA                     main@ii:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x7A
   297  0000DA                     	ds	1
   298  0000DB                     main@direction:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x7B
   302  0000DB                     	ds	2
   303  0000DD                     main@counter:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x7D
   307  0000DD                     	ds	1
   308  0000DE                     main@Values:
   309                           	opt stack 0
   310                           
   311                           ; 8 bytes @ 0x7E
   312  0000DE                     	ds	8
   313  0000E6                     main@mL:
   314                           	opt stack 0
   315                           
   316                           ; 9 bytes @ 0x86
   317  0000E6                     	ds	9
   318  0000EF                     main@mR:
   319                           	opt stack 0
   320                           
   321                           ; 9 bytes @ 0x8F
   322  0000EF                     	ds	9
   323                           tblptru	equ	0xFF8
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	cstackCOMRAM
   328  000001                     __pcstackCOMRAM:
   329                           	opt stack 0
   330  000001                     ??_InterruptHandlerHigh:
   331  000001                     
   332                           ; 1 bytes @ 0x0
   333  000001                     	ds	4
   334  000005                     InterruptHandlerHigh@rx_char:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x4
   338  000005                     	ds	1
   339  000006                     ??_LCD_out:
   340  000006                     ?___wmul:
   341                           	opt stack 0
   342  000006                     ?___lwdiv:
   343                           	opt stack 0
   344  000006                     read_IR@Values:
   345                           	opt stack 0
   346  000006                     ___wmul@multiplier:
   347                           	opt stack 0
   348  000006                     ___lwdiv@dividend:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x5
   352  000006                     	ds	1
   353  000007                     LCD_out@number:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x6
   357  000007                     	ds	1
   358  000008                     ??_read_IR:
   359  000008                     LCD_send@type:
   360                           	opt stack 0
   361  000008                     ___wmul@multiplicand:
   362                           	opt stack 0
   363  000008                     ___lwdiv@divisor:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x7
   367  000008                     	ds	1
   368  000009                     LCD_send@Byte:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x8
   372  000009                     	ds	1
   373  00000A                     ??_LCD_init:
   374  00000A                     ??_LCD_clear:
   375  00000A                     LCD_line@line:
   376                           	opt stack 0
   377  00000A                     LCD_string@string:
   378                           	opt stack 0
   379  00000A                     ___wmul@product:
   380                           	opt stack 0
   381  00000A                     ___lwdiv@quotient:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x9
   385  00000A                     	ds	1
   386  00000B                     print_RFID@pa:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0xA
   390  00000B                     	ds	1
   391  00000C                     ?___awdiv:
   392                           	opt stack 0
   393  00000C                     ___lwdiv@counter:
   394                           	opt stack 0
   395  00000C                     ___awdiv@dividend:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0xB
   399  00000C                     	ds	1
   400  00000D                     ?___lwmod:
   401                           	opt stack 0
   402  00000D                     print_RFID@dis:
   403                           	opt stack 0
   404  00000D                     ___lwmod@dividend:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0xC
   408  00000D                     	ds	1
   409  00000E                     ___awdiv@divisor:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0xD
   413  00000E                     	ds	1
   414  00000F                     ??_print_RFID:
   415  00000F                     ___lwmod@divisor:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0xE
   419  00000F                     	ds	1
   420  000010                     ___awdiv@counter:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0xF
   424  000010                     	ds	1
   425  000011                     ___awdiv@sign:
   426                           	opt stack 0
   427  000011                     ___lwmod@counter:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x10
   431  000011                     	ds	1
   432  000012                     ?_sprintf:
   433                           	opt stack 0
   434  000012                     sprintf@sp:
   435                           	opt stack 0
   436  000012                     ___awdiv@quotient:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x11
   440  000012                     	ds	2
   441  000014                     setMotorPWM@m:
   442                           	opt stack 0
   443  000014                     sprintf@f:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x13
   447  000014                     	ds	2
   448  000016                     ??_setMotorPWM:
   449                           
   450                           ; 1 bytes @ 0x15
   451  000016                     	ds	2
   452  000018                     ??_sprintf:
   453                           
   454                           ; 1 bytes @ 0x17
   455  000018                     	ds	1
   456  000019                     sprintf@prec:
   457                           	opt stack 0
   458  000019                     setMotorPWM@PWMduty:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x18
   462  000019                     	ds	1
   463  00001A                     sprintf@ap:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x19
   467  00001A                     	ds	1
   468  00001B                     stop@mL:
   469                           	opt stack 0
   470  00001B                     turnLeft@mL:
   471                           	opt stack 0
   472  00001B                     turnRight@mL:
   473                           	opt stack 0
   474  00001B                     forwards@mL:
   475                           	opt stack 0
   476  00001B                     backwards@mL:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x1A
   480  00001B                     	ds	1
   481  00001C                     sprintf@flag:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x1B
   485  00001C                     	ds	1
   486  00001D                     stop@mR:
   487                           	opt stack 0
   488  00001D                     turnLeft@mR:
   489                           	opt stack 0
   490  00001D                     turnRight@mR:
   491                           	opt stack 0
   492  00001D                     forwards@mR:
   493                           	opt stack 0
   494  00001D                     backwards@mR:
   495                           	opt stack 0
   496  00001D                     sprintf@val:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x1C
   500  00001D                     	ds	2
   501  00001F                     ??_forwards:
   502  00001F                     ??_stop:
   503  00001F                     ??_turnLeft:
   504  00001F                     ??_turnRight:
   505  00001F                     ??_backwards:
   506  00001F                     sprintf@c:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x1E
   510  00001F                     	ds	1
   511  000020                     print_IR@Values:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x1F
   515  000020                     	ds	2
   516  000022                     ??_print_IR:
   517                           
   518                           ; 1 bytes @ 0x21
   519  000022                     	ds	1
   520  000023                     print_IR@buf:
   521                           	opt stack 0
   522                           
   523                           ; 16 bytes @ 0x22
   524  000023                     	ds	16
   525  000033                     ??_main:
   526                           
   527                           ; 1 bytes @ 0x32
   528  000033                     	ds	6
   529                           tblptru	equ	0xFF8
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           
   533 ;;
   534 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   535 ;;
   536 ;; *************** function _main *****************
   537 ;; Defined at:
   538 ;;		line 61 in file "main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  ii              1  122[BANK0 ] unsigned char 
   543 ;;  threshold       2  120[BANK0 ] int 
   544 ;;  diff            2  118[BANK0 ] int 
   545 ;;  buf            16  100[BANK0 ] unsigned char [16]
   546 ;;  direction       2  123[BANK0 ] int 
   547 ;;  forwardsDire  100    0[BANK0 ] int [50]
   548 ;;  mR              9  143[BANK0 ] struct Motor
   549 ;;  mL              9  134[BANK0 ] struct Motor
   550 ;;  Values          8  126[BANK0 ] struct Sensor_ir
   551 ;;  PWMcycle        2  116[BANK0 ] int 
   552 ;;  counter         1  125[BANK0 ] unsigned char 
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   562 ;;      Params:         0       0       0       0
   563 ;;      Locals:         0     152       0       0
   564 ;;      Temps:          6       0       0       0
   565 ;;      Totals:         6     152       0       0
   566 ;;Total ram usage:      158 bytes
   567 ;; Hardware stack levels required when called:    6
   568 ;; This function calls:
   569 ;;		_LCD_init
   570 ;;		_LCD_line
   571 ;;		_LCD_string
   572 ;;		_backwards
   573 ;;		_forwards
   574 ;;		_initPWM
   575 ;;		_init_RFID
   576 ;;		_init_TIMER5
   577 ;;		_init_capture
   578 ;;		_interrupt_EUSART
   579 ;;		_print_IR
   580 ;;		_print_RFID
   581 ;;		_read_IR
   582 ;;		_sprintf
   583 ;;		_stop
   584 ;;		_turnLeft
   585 ;;		_turnRight
   586 ;; This function is called by:
   587 ;;		Startup code after reset
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text0
   592  000344                     __ptext0:
   593                           	opt stack 0
   594  000344                     _main:
   595                           	opt stack 25
   596                           
   597                           ;main.c: 64: char counter = 0;
   598                           
   599                           ;incstack = 0
   600  000344  0E00               	movlw	0
   601  000346  0100               	movlb	0	; () banked
   602  000348  6FDD               	movwf	main@counter& (0+255),b
   603                           
   604                           ;main.c: 65: int forwardsDirection[50];;main.c: 68: ANSEL0 = 0;
   605  00034A  0E00               	movlw	0
   606  00034C  6EB8               	movwf	4024,c	;volatile
   607                           
   608                           ;main.c: 69: ANSEL1 = 0;
   609  00034E  0E00               	movlw	0
   610  000350  6EB9               	movwf	4025,c	;volatile
   611                           
   612                           ;main.c: 70: OSCCON = 0x72;
   613  000352  0E72               	movlw	114
   614  000354  6ED3               	movwf	4051,c	;volatile
   615  000356                     
   616                           ; BSR set to: 0
   617  000356  A4D3               	btfss	4051,2,c	;volatile
   618  000358  D7FE               	goto	l145
   619                           
   620                           ;main.c: 73: LCD_init();
   621  00035A  EC82  F006         	call	_LCD_init	;wreg free
   622                           
   623                           ;main.c: 75: init_TIMER5();
   624  00035E  EC41  F00A         	call	_init_TIMER5	;wreg free
   625                           
   626                           ;main.c: 76: initPWM();
   627  000362  EC17  F00A         	call	_initPWM	;wreg free
   628                           
   629                           ;main.c: 77: init_capture();
   630  000366  EC34  F00A         	call	_init_capture	;wreg free
   631                           
   632                           ;main.c: 78: init_RFID();
   633  00036A  EC4E  F00A         	call	_init_RFID	;wreg free
   634                           
   635                           ;main.c: 82: interrupt_EUSART();
   636  00036E  EC66  F00A         	call	_interrupt_EUSART	;wreg free
   637                           
   638                           ;main.c: 83: struct Sensor_ir Values;;main.c: 84: struct Motor mL, mR;;main.c: 85: int P
      +                          WMcycle = 199;
   639  000372  0E00               	movlw	0
   640  000374  0100               	movlb	0	; () banked
   641  000376  6FD5               	movwf	(main@PWMcycle+1)& (0+255),b
   642  000378  0EC7               	movlw	199
   643  00037A  6FD4               	movwf	main@PWMcycle& (0+255),b
   644                           
   645                           ; BSR set to: 0
   646                           ;main.c: 86: mL.power = 0;
   647  00037C  0E00               	movlw	0
   648  00037E  6FE6               	movwf	main@mL& (0+255),b
   649                           
   650                           ; BSR set to: 0
   651                           ;main.c: 87: mL.direction = 1;
   652  000380  0E01               	movlw	1
   653  000382  6FE7               	movwf	(main@mL+1)& (0+255),b
   654                           
   655                           ; BSR set to: 0
   656                           ;main.c: 88: mL.duty_low = (unsigned char *) (&PDC0L);
   657  000384  0E79               	movlw	121
   658  000386  6FE8               	movwf	(main@mL+2)& (0+255),b
   659  000388  0E0F               	movlw	15
   660  00038A  6FE9               	movwf	(main@mL+3)& (0+255),b
   661                           
   662                           ; BSR set to: 0
   663                           ;main.c: 89: mL.duty_high = (unsigned char *) (&PDC0H);
   664  00038C  0E78               	movlw	120
   665  00038E  6FEA               	movwf	(main@mL+4)& (0+255),b
   666  000390  0E0F               	movlw	15
   667  000392  6FEB               	movwf	(main@mL+5)& (0+255),b
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 90: mL.dir_pin = 0;
   671  000394  0E00               	movlw	0
   672  000396  6FEC               	movwf	(main@mL+6)& (0+255),b
   673                           
   674                           ; BSR set to: 0
   675                           ;main.c: 91: mL.period = PWMcycle;
   676  000398  C0D4  F0ED         	movff	main@PWMcycle,main@mL+7
   677  00039C  C0D5  F0EE         	movff	main@PWMcycle+1,main@mL+8
   678                           
   679                           ; BSR set to: 0
   680                           ;main.c: 94: mR.power = 0;
   681  0003A0  0E00               	movlw	0
   682  0003A2  6FEF               	movwf	main@mR& (0+255),b
   683                           
   684                           ; BSR set to: 0
   685                           ;main.c: 95: mR.direction = 1;
   686  0003A4  0E01               	movlw	1
   687  0003A6  6FF0               	movwf	(main@mR+1)& (0+255),b
   688                           
   689                           ; BSR set to: 0
   690                           ;main.c: 96: mR.duty_low = (unsigned char *) (&PDC1L);
   691  0003A8  0E77               	movlw	119
   692  0003AA  6FF1               	movwf	(main@mR+2)& (0+255),b
   693  0003AC  0E0F               	movlw	15
   694  0003AE  6FF2               	movwf	(main@mR+3)& (0+255),b
   695                           
   696                           ; BSR set to: 0
   697                           ;main.c: 97: mR.duty_high = (unsigned char *) (&PDC1H);
   698  0003B0  0E76               	movlw	118
   699  0003B2  6FF3               	movwf	(main@mR+4)& (0+255),b
   700  0003B4  0E0F               	movlw	15
   701  0003B6  6FF4               	movwf	(main@mR+5)& (0+255),b
   702                           
   703                           ; BSR set to: 0
   704                           ;main.c: 98: mR.dir_pin = 2;
   705  0003B8  0E02               	movlw	2
   706  0003BA  6FF5               	movwf	(main@mR+6)& (0+255),b
   707                           
   708                           ; BSR set to: 0
   709                           ;main.c: 99: mR.period = PWMcycle;
   710  0003BC  C0D4  F0F6         	movff	main@PWMcycle,main@mR+7
   711  0003C0  C0D5  F0F7         	movff	main@PWMcycle+1,main@mR+8
   712                           
   713                           ; BSR set to: 0
   714                           ;main.c: 101: forwards(&mL, &mR);
   715  0003C4  0EE6               	movlw	low main@mL
   716  0003C6  6E1B               	movwf	forwards@mL,c
   717  0003C8  0E00               	movlw	high main@mL
   718  0003CA  6E1C               	movwf	forwards@mL+1,c
   719  0003CC  0EEF               	movlw	low main@mR
   720  0003CE  6E1D               	movwf	forwards@mR,c
   721  0003D0  0E00               	movlw	high main@mR
   722  0003D2  6E1E               	movwf	forwards@mR+1,c
   723  0003D4  ECE4  F007         	call	_forwards	;wreg free
   724                           
   725                           ;main.c: 102: stop(&mL, &mR);
   726  0003D8  0EE6               	movlw	low main@mL
   727  0003DA  6E1B               	movwf	stop@mL,c
   728  0003DC  0E00               	movlw	high main@mL
   729  0003DE  6E1C               	movwf	stop@mL+1,c
   730  0003E0  0EEF               	movlw	low main@mR
   731  0003E2  6E1D               	movwf	stop@mR,c
   732  0003E4  0E00               	movlw	high main@mR
   733  0003E6  6E1E               	movwf	stop@mR+1,c
   734  0003E8  EC36  F009         	call	_stop	;wreg free
   735                           
   736                           ;main.c: 103: stop(&mL, &mR);
   737  0003EC  0EE6               	movlw	low main@mL
   738  0003EE  6E1B               	movwf	stop@mL,c
   739  0003F0  0E00               	movlw	high main@mL
   740  0003F2  6E1C               	movwf	stop@mL+1,c
   741  0003F4  0EEF               	movlw	low main@mR
   742  0003F6  6E1D               	movwf	stop@mR,c
   743  0003F8  0E00               	movlw	high main@mR
   744  0003FA  6E1E               	movwf	stop@mR+1,c
   745  0003FC  EC36  F009         	call	_stop	;wreg free
   746                           
   747                           ;main.c: 104: INTCONbits.INT0IE = 1;
   748  000400  88F2               	bsf	intcon,4,c	;volatile
   749                           
   750                           ;main.c: 106: card_read = 3;
   751  000402  0E03               	movlw	3
   752  000404  0100               	movlb	0	; () banked
   753  000406  6FF8               	movwf	_card_read& (0+255),b	;volatile
   754                           
   755                           ; BSR set to: 0
   756                           ;main.c: 109: while (card_read == 3) {
   757                           
   758                           ;main.c: 108: while (1) {
   759  000408  D013               	goto	l148
   760  00040A                     
   761                           ; BSR set to: 0
   762                           ;main.c: 111: LCD_line(1);
   763                           
   764                           ; BSR set to: 0
   765  00040A  0E01               	movlw	1
   766  00040C  ECC7  F009         	call	_LCD_line
   767                           
   768                           ;main.c: 112: char buf[16];;main.c: 113: sprintf(buf, "Ready");
   769  000410  0EC4               	movlw	low main@buf
   770  000412  6E12               	movwf	sprintf@sp,c
   771  000414  0E00               	movlw	high main@buf
   772  000416  6E13               	movwf	sprintf@sp+1,c
   773  000418  0E3C               	movlw	low STR_3
   774  00041A  6E14               	movwf	sprintf@f,c
   775  00041C  0E03               	movlw	high STR_3
   776  00041E  6E15               	movwf	sprintf@f+1,c
   777  000420  ECC8  F005         	call	_sprintf	;wreg free
   778                           
   779                           ;main.c: 114: LCD_string(buf);
   780  000424  0EC4               	movlw	low main@buf
   781  000426  6E0A               	movwf	LCD_string@string,c
   782  000428  0E00               	movlw	high main@buf
   783  00042A  6E0B               	movwf	LCD_string@string+1,c
   784  00042C  ECAF  F009         	call	_LCD_string	;wreg free
   785  000430                     l148:
   786  000430  0E03               	movlw	3
   787  000432  0100               	movlb	0	; () banked
   788  000434  19F8               	xorwf	_card_read& (0+255),w,b	;volatile
   789  000436  B4D8               	btfsc	status,2,c
   790  000438  D7E8               	goto	l149
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 116: };main.c: 118: int direction = 0;
   794                           
   795                           ; BSR set to: 0
   796  00043A  0E00               	movlw	0
   797  00043C  6FDC               	movwf	(main@direction+1)& (0+255),b
   798  00043E  0E00               	movlw	0
   799  000440  6FDB               	movwf	main@direction& (0+255),b
   800                           
   801                           ;main.c: 121: while (card_read == 0) {
   802  000442  D12E               	goto	l167
   803  000444                     
   804                           ; BSR set to: 0
   805                           ;main.c: 122: read_IR(&Values);
   806                           
   807                           ; BSR set to: 0
   808  000444  0EDE               	movlw	low main@Values
   809  000446  6E06               	movwf	read_IR@Values,c
   810  000448  0E00               	movlw	high main@Values
   811  00044A  6E07               	movwf	read_IR@Values+1,c
   812  00044C  EC18  F004         	call	_read_IR	;wreg free
   813                           
   814                           ;main.c: 126: print_IR(&Values);
   815  000450  0EDE               	movlw	low main@Values
   816  000452  6E20               	movwf	print_IR@Values,c
   817  000454  0E00               	movlw	high main@Values
   818  000456  6E21               	movwf	print_IR@Values+1,c
   819  000458  ECF7  F006         	call	_print_IR	;wreg free
   820                           
   821                           ;main.c: 136: int threshold = 50;
   822  00045C  0E00               	movlw	0
   823  00045E  0100               	movlb	0	; () banked
   824  000460  6FD9               	movwf	(main@threshold+1)& (0+255),b
   825  000462  0E32               	movlw	50
   826  000464  6FD8               	movwf	main@threshold& (0+255),b
   827                           
   828                           ; BSR set to: 0
   829                           ;main.c: 137: int diff = Values.left - Values.right;
   830  000466  EE20  F0E0         	lfsr	2,main@Values+2
   831  00046A  CFDE F033          	movff	postinc2,??_main
   832  00046E  CFDD F034          	movff	postdec2,??_main+1
   833  000472  1E33               	comf	??_main,f,c
   834  000474  1E34               	comf	??_main+1,f,c
   835  000476  4A33               	infsnz	??_main,f,c
   836  000478  2A34               	incf	??_main+1,f,c
   837  00047A  51DE               	movf	main@Values& (0+255),w,b
   838  00047C  2433               	addwf	??_main,w,c
   839  00047E  6FD6               	movwf	main@diff& (0+255),b
   840  000480  51DF               	movf	(main@Values+1)& (0+255),w,b
   841  000482  2034               	addwfc	??_main+1,w,c
   842  000484  6FD7               	movwf	(main@diff+1)& (0+255),b
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 138: if (Values.left > 100 | Values.right > 100) {
   846  000486  51DF               	movf	(main@Values+1)& (0+255),w,b
   847  000488  E10A               	bnz	l2482
   848  00048A  0E65               	movlw	101
   849  00048C  5DDE               	subwf	main@Values& (0+255),w,b
   850  00048E  B0D8               	btfsc	status,0,c
   851  000490  D006               	goto	u1620
   852                           
   853                           ; BSR set to: 0
   854  000492  51E1               	movf	(main@Values+3)& (0+255),w,b
   855  000494  E104               	bnz	l2482
   856  000496  0E65               	movlw	101
   857  000498  5DE0               	subwf	(main@Values+2)& (0+255),w,b
   858  00049A  A0D8               	btfss	status,0,c
   859  00049C  D004               	goto	l153
   860  00049E                     u1620:
   861  00049E                     l2482:
   862                           
   863                           ; BSR set to: 0
   864                           ;main.c: 139: threshold = 20;
   865  00049E  0E00               	movlw	0
   866  0004A0  6FD9               	movwf	(main@threshold+1)& (0+255),b
   867  0004A2  0E14               	movlw	20
   868  0004A4  D003               	goto	L1
   869  0004A6                     l153:
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 141: threshold = 5;
   873                           
   874                           ; BSR set to: 0
   875  0004A6  0E00               	movlw	0
   876  0004A8  6FD9               	movwf	(main@threshold+1)& (0+255),b
   877  0004AA  0E05               	movlw	5
   878  0004AC                     L1:
   879  0004AC  6FD8               	movwf	main@threshold& (0+255),b
   880                           
   881                           ; BSR set to: 0
   882                           ;main.c: 142: };main.c: 144: if ((diff < -threshold)) {
   883                           
   884                           ; BSR set to: 0
   885  0004AE  C0D8  F033         	movff	main@threshold,??_main
   886  0004B2  C0D9  F034         	movff	main@threshold+1,??_main+1
   887  0004B6  1E33               	comf	??_main,f,c
   888  0004B8  1E34               	comf	??_main+1,f,c
   889  0004BA  4A33               	infsnz	??_main,f,c
   890  0004BC  2A34               	incf	??_main+1,f,c
   891  0004BE  5033               	movf	??_main,w,c
   892  0004C0  5DD6               	subwf	main@diff& (0+255),w,b
   893  0004C2  51D7               	movf	(main@diff+1)& (0+255),w,b
   894  0004C4  0A80               	xorlw	128
   895  0004C6  6E35               	movwf	(??_main+2)& (0+255),c
   896  0004C8  5034               	movf	??_main+1,w,c
   897  0004CA  0A80               	xorlw	128
   898  0004CC  5835               	subwfb	(??_main+2)& (0+255),w,c
   899  0004CE  B0D8               	btfsc	status,0,c
   900  0004D0  D036               	goto	l157
   901                           
   902                           ; BSR set to: 0
   903                           ;main.c: 145: if (direction != 1) {
   904  0004D2  05DB               	decf	main@direction& (0+255),w,b
   905  0004D4  11DC               	iorwf	(main@direction+1)& (0+255),w,b
   906  0004D6  B4D8               	btfsc	status,2,c
   907  0004D8  D00A               	goto	l158
   908                           
   909                           ; BSR set to: 0
   910                           ;main.c: 146: stop(&mL, &mR);
   911  0004DA  0EE6               	movlw	low main@mL
   912  0004DC  6E1B               	movwf	stop@mL,c
   913  0004DE  0E00               	movlw	high main@mL
   914  0004E0  6E1C               	movwf	stop@mL+1,c
   915  0004E2  0EEF               	movlw	low main@mR
   916  0004E4  6E1D               	movwf	stop@mR,c
   917  0004E6  0E00               	movlw	high main@mR
   918  0004E8  6E1E               	movwf	stop@mR+1,c
   919  0004EA  EC36  F009         	call	_stop	;wreg free
   920  0004EE                     l158:
   921                           
   922                           ;main.c: 147: };main.c: 151: direction = 1;
   923  0004EE  0E00               	movlw	0
   924  0004F0  0100               	movlb	0	; () banked
   925  0004F2  6FDC               	movwf	(main@direction+1)& (0+255),b
   926  0004F4  0E01               	movlw	1
   927  0004F6  6FDB               	movwf	main@direction& (0+255),b
   928                           
   929                           ; BSR set to: 0
   930                           ;main.c: 152: counter++;
   931  0004F8  2BDD               	incf	main@counter& (0+255),f,b
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 153: forwardsDirection[counter] = direction;
   935  0004FA  51DD               	movf	main@counter& (0+255),w,b
   936  0004FC  0D02               	mullw	2
   937  0004FE  0E60               	movlw	low main@forwardsDirection
   938  000500  24F3               	addwf	prodl,w,c
   939  000502  6ED9               	movwf	fsr2l,c
   940  000504  0E00               	movlw	high main@forwardsDirection
   941  000506  20F4               	addwfc	prodh,w,c
   942  000508  6EDA               	movwf	fsr2h,c
   943  00050A  C0DB  FFDE         	movff	main@direction,postinc2
   944  00050E  C0DC  FFDD         	movff	main@direction+1,postdec2
   945                           
   946                           ; BSR set to: 0
   947                           ;main.c: 154: turnLeft(&mL, &mR);
   948  000512  0EE6               	movlw	low main@mL
   949  000514  6E1B               	movwf	turnLeft@mL,c
   950  000516  0E00               	movlw	high main@mL
   951  000518  6E1C               	movwf	turnLeft@mL+1,c
   952  00051A  0EEF               	movlw	low main@mR
   953  00051C  6E1D               	movwf	turnLeft@mR,c
   954  00051E  0E00               	movlw	high main@mR
   955  000520  6E1E               	movwf	turnLeft@mR+1,c
   956  000522  EC99  F007         	call	_turnLeft	;wreg free
   957                           
   958                           ;main.c: 155: _delay((unsigned long)((400)*(8000000/4000.0)));
   959  000526  0E05               	movlw	5
   960  000528  6E34               	movwf	(??_main+1)& (0+255),c
   961  00052A  0E0F               	movlw	15
   962  00052C  6E33               	movwf	??_main& (0+255),c
   963  00052E  0EF1               	movlw	241
   964  000530                     u1907:
   965  000530  2EE8               	decfsz	wreg,f,c
   966  000532  D7FE               	bra	u1907
   967  000534  2E33               	decfsz	??_main& (0+255),f,c
   968  000536  D7FC               	bra	u1907
   969  000538  2E34               	decfsz	(??_main+1)& (0+255),f,c
   970  00053A  D7FA               	bra	u1907
   971  00053C  D0B0               	goto	L4
   972  00053E                     l157:
   973  00053E  0100               	movlb	0	; () banked
   974  000540  51D6               	movf	main@diff& (0+255),w,b
   975  000542  5DD8               	subwf	main@threshold& (0+255),w,b
   976  000544  51D9               	movf	(main@threshold+1)& (0+255),w,b
   977  000546  0A80               	xorlw	128
   978  000548  6E33               	movwf	??_main& (0+255),c
   979  00054A  51D7               	movf	(main@diff+1)& (0+255),w,b
   980  00054C  0A80               	xorlw	128
   981  00054E  5833               	subwfb	??_main& (0+255),w,c
   982  000550  B0D8               	btfsc	status,0,c
   983  000552  D037               	goto	l160
   984                           
   985                           ; BSR set to: 0
   986                           ;main.c: 158: if (direction != 2) {
   987  000554  0E02               	movlw	2
   988  000556  19DB               	xorwf	main@direction& (0+255),w,b
   989  000558  11DC               	iorwf	(main@direction+1)& (0+255),w,b
   990  00055A  B4D8               	btfsc	status,2,c
   991  00055C  D00A               	goto	l161
   992                           
   993                           ; BSR set to: 0
   994                           ;main.c: 159: stop(&mL, &mR);
   995  00055E  0EE6               	movlw	low main@mL
   996  000560  6E1B               	movwf	stop@mL,c
   997  000562  0E00               	movlw	high main@mL
   998  000564  6E1C               	movwf	stop@mL+1,c
   999  000566  0EEF               	movlw	low main@mR
  1000  000568  6E1D               	movwf	stop@mR,c
  1001  00056A  0E00               	movlw	high main@mR
  1002  00056C  6E1E               	movwf	stop@mR+1,c
  1003  00056E  EC36  F009         	call	_stop	;wreg free
  1004  000572                     l161:
  1005                           
  1006                           ;main.c: 160: };main.c: 163: direction = 2;
  1007  000572  0E00               	movlw	0
  1008  000574  0100               	movlb	0	; () banked
  1009  000576  6FDC               	movwf	(main@direction+1)& (0+255),b
  1010  000578  0E02               	movlw	2
  1011  00057A  6FDB               	movwf	main@direction& (0+255),b
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;main.c: 164: counter++;
  1015  00057C  2BDD               	incf	main@counter& (0+255),f,b
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;main.c: 165: forwardsDirection[counter] = direction;
  1019  00057E  51DD               	movf	main@counter& (0+255),w,b
  1020  000580  0D02               	mullw	2
  1021  000582  0E60               	movlw	low main@forwardsDirection
  1022  000584  24F3               	addwf	prodl,w,c
  1023  000586  6ED9               	movwf	fsr2l,c
  1024  000588  0E00               	movlw	high main@forwardsDirection
  1025  00058A  20F4               	addwfc	prodh,w,c
  1026  00058C  6EDA               	movwf	fsr2h,c
  1027  00058E  C0DB  FFDE         	movff	main@direction,postinc2
  1028  000592  C0DC  FFDD         	movff	main@direction+1,postdec2
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;main.c: 166: turnRight(&mL, &mR);
  1032  000596  0EE6               	movlw	low main@mL
  1033  000598  6E1B               	movwf	turnRight@mL,c
  1034  00059A  0E00               	movlw	high main@mL
  1035  00059C  6E1C               	movwf	turnRight@mL+1,c
  1036  00059E  0EEF               	movlw	low main@mR
  1037  0005A0  6E1D               	movwf	turnRight@mR,c
  1038  0005A2  0E00               	movlw	high main@mR
  1039  0005A4  6E1E               	movwf	turnRight@mR+1,c
  1040  0005A6  EC4E  F007         	call	_turnRight	;wreg free
  1041                           
  1042                           ;main.c: 167: _delay((unsigned long)((400)*(8000000/4000.0)));
  1043  0005AA  0E05               	movlw	5
  1044  0005AC  6E34               	movwf	(??_main+1)& (0+255),c
  1045  0005AE  0E0F               	movlw	15
  1046  0005B0  6E33               	movwf	??_main& (0+255),c
  1047  0005B2  0EF1               	movlw	241
  1048  0005B4                     u1917:
  1049  0005B4  2EE8               	decfsz	wreg,f,c
  1050  0005B6  D7FE               	bra	u1917
  1051  0005B8  2E33               	decfsz	??_main& (0+255),f,c
  1052  0005BA  D7FC               	bra	u1917
  1053  0005BC  2E34               	decfsz	(??_main+1)& (0+255),f,c
  1054  0005BE  D7FA               	bra	u1917
  1055  0005C0  D06E               	goto	L4
  1056  0005C2                     l160:
  1057                           
  1058                           ;main.c: 170: if ((Values.left > 199) | (Values.right > 199)) {
  1059  0005C2  0100               	movlb	0	; () banked
  1060  0005C4  51DF               	movf	(main@Values+1)& (0+255),w,b
  1061  0005C6  E10A               	bnz	l2522
  1062  0005C8  0EC8               	movlw	200
  1063  0005CA  5DDE               	subwf	main@Values& (0+255),w,b
  1064  0005CC  B0D8               	btfsc	status,0,c
  1065  0005CE  D006               	goto	u1680
  1066                           
  1067                           ; BSR set to: 0
  1068  0005D0  51E1               	movf	(main@Values+3)& (0+255),w,b
  1069  0005D2  E104               	bnz	l2522
  1070  0005D4  0EC8               	movlw	200
  1071  0005D6  5DE0               	subwf	(main@Values+2)& (0+255),w,b
  1072  0005D8  A0D8               	btfss	status,0,c
  1073  0005DA  D037               	goto	l163
  1074  0005DC                     u1680:
  1075  0005DC                     l2522:
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;main.c: 171: if (direction != 3) {
  1079  0005DC  0E03               	movlw	3
  1080  0005DE  19DB               	xorwf	main@direction& (0+255),w,b
  1081  0005E0  11DC               	iorwf	(main@direction+1)& (0+255),w,b
  1082  0005E2  B4D8               	btfsc	status,2,c
  1083  0005E4  D00A               	goto	l166
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;main.c: 172: stop(&mL, &mR);
  1087  0005E6  0EE6               	movlw	low main@mL
  1088  0005E8  6E1B               	movwf	stop@mL,c
  1089  0005EA  0E00               	movlw	high main@mL
  1090  0005EC  6E1C               	movwf	stop@mL+1,c
  1091  0005EE  0EEF               	movlw	low main@mR
  1092  0005F0  6E1D               	movwf	stop@mR,c
  1093  0005F2  0E00               	movlw	high main@mR
  1094  0005F4  6E1E               	movwf	stop@mR+1,c
  1095  0005F6  EC36  F009         	call	_stop	;wreg free
  1096  0005FA                     l166:
  1097                           
  1098                           ;main.c: 173: };main.c: 176: direction = 3;
  1099  0005FA  0E00               	movlw	0
  1100  0005FC  0100               	movlb	0	; () banked
  1101  0005FE  6FDC               	movwf	(main@direction+1)& (0+255),b
  1102  000600  0E03               	movlw	3
  1103  000602  6FDB               	movwf	main@direction& (0+255),b
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;main.c: 177: counter++;
  1107  000604  2BDD               	incf	main@counter& (0+255),f,b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;main.c: 178: forwardsDirection[counter] = direction;
  1111  000606  51DD               	movf	main@counter& (0+255),w,b
  1112  000608  0D02               	mullw	2
  1113  00060A  0E60               	movlw	low main@forwardsDirection
  1114  00060C  24F3               	addwf	prodl,w,c
  1115  00060E  6ED9               	movwf	fsr2l,c
  1116  000610  0E00               	movlw	high main@forwardsDirection
  1117  000612  20F4               	addwfc	prodh,w,c
  1118  000614  6EDA               	movwf	fsr2h,c
  1119  000616  C0DB  FFDE         	movff	main@direction,postinc2
  1120  00061A  C0DC  FFDD         	movff	main@direction+1,postdec2
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;main.c: 179: forwards(&mL, &mR);
  1124  00061E  0EE6               	movlw	low main@mL
  1125  000620  6E1B               	movwf	forwards@mL,c
  1126  000622  0E00               	movlw	high main@mL
  1127  000624  6E1C               	movwf	forwards@mL+1,c
  1128  000626  0EEF               	movlw	low main@mR
  1129  000628  6E1D               	movwf	forwards@mR,c
  1130  00062A  0E00               	movlw	high main@mR
  1131  00062C  6E1E               	movwf	forwards@mR+1,c
  1132  00062E  ECE4  F007         	call	_forwards	;wreg free
  1133                           
  1134                           ;main.c: 180: _delay((unsigned long)((400)*(8000000/4000.0)));
  1135  000632  0E05               	movlw	5
  1136  000634  6E34               	movwf	(??_main+1)& (0+255),c
  1137  000636  0E0F               	movlw	15
  1138  000638  6E33               	movwf	??_main& (0+255),c
  1139  00063A  0EF1               	movlw	241
  1140  00063C                     u1927:
  1141  00063C  2EE8               	decfsz	wreg,f,c
  1142  00063E  D7FE               	bra	u1927
  1143  000640  2E33               	decfsz	??_main& (0+255),f,c
  1144  000642  D7FC               	bra	u1927
  1145  000644  2E34               	decfsz	(??_main+1)& (0+255),f,c
  1146  000646  D7FA               	bra	u1927
  1147  000648  D02A               	goto	L4
  1148  00064A                     l163:
  1149                           
  1150                           ;main.c: 183: if (direction != 2) {
  1151  00064A  0E02               	movlw	2
  1152  00064C  0100               	movlb	0	; () banked
  1153  00064E  19DB               	xorwf	main@direction& (0+255),w,b
  1154  000650  11DC               	iorwf	(main@direction+1)& (0+255),w,b
  1155  000652  B4D8               	btfsc	status,2,c
  1156  000654  D00A               	goto	l168
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 184: stop(&mL, &mR);
  1160  000656  0EE6               	movlw	low main@mL
  1161  000658  6E1B               	movwf	stop@mL,c
  1162  00065A  0E00               	movlw	high main@mL
  1163  00065C  6E1C               	movwf	stop@mL+1,c
  1164  00065E  0EEF               	movlw	low main@mR
  1165  000660  6E1D               	movwf	stop@mR,c
  1166  000662  0E00               	movlw	high main@mR
  1167  000664  6E1E               	movwf	stop@mR+1,c
  1168  000666  EC36  F009         	call	_stop	;wreg free
  1169  00066A                     l168:
  1170                           
  1171                           ;main.c: 185: };main.c: 188: direction = 2;
  1172  00066A  0E00               	movlw	0
  1173  00066C  0100               	movlb	0	; () banked
  1174  00066E  6FDC               	movwf	(main@direction+1)& (0+255),b
  1175  000670  0E02               	movlw	2
  1176  000672  6FDB               	movwf	main@direction& (0+255),b
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;main.c: 191: turnRight(&mL, &mR);
  1180  000674  0EE6               	movlw	low main@mL
  1181  000676  6E1B               	movwf	turnRight@mL,c
  1182  000678  0E00               	movlw	high main@mL
  1183  00067A  6E1C               	movwf	turnRight@mL+1,c
  1184  00067C  0EEF               	movlw	low main@mR
  1185  00067E  6E1D               	movwf	turnRight@mR,c
  1186  000680  0E00               	movlw	high main@mR
  1187  000682  6E1E               	movwf	turnRight@mR+1,c
  1188  000684  EC4E  F007         	call	_turnRight	;wreg free
  1189                           
  1190                           ;main.c: 192: _delay((unsigned long)((400)*(8000000/4000.0)));
  1191  000688  0E05               	movlw	5
  1192  00068A  6E34               	movwf	(??_main+1)& (0+255),c
  1193  00068C  0E0F               	movlw	15
  1194  00068E  6E33               	movwf	??_main& (0+255),c
  1195  000690  0EF1               	movlw	241
  1196  000692                     u1937:
  1197  000692  2EE8               	decfsz	wreg,f,c
  1198  000694  D7FE               	bra	u1937
  1199  000696  2E33               	decfsz	??_main& (0+255),f,c
  1200  000698  D7FC               	bra	u1937
  1201  00069A  2E34               	decfsz	(??_main+1)& (0+255),f,c
  1202  00069C  D7FA               	bra	u1937
  1203  00069E                     L4:
  1204  00069E  F000               	nop	
  1205  0006A0                     l167:
  1206  0006A0  0100               	movlb	0	; () banked
  1207  0006A2  51F8               	movf	_card_read& (0+255),w,b	;volatile
  1208  0006A4  A4D8               	btfss	status,2,c
  1209  0006A6  D0BF               	goto	l170
  1210  0006A8  D6CD               	goto	l152
  1211  0006AA                     
  1212                           ; BSR set to: 0
  1213                           ;main.c: 205: stop(&mL, &mR);
  1214                           
  1215                           ; BSR set to: 0
  1216  0006AA  0EE6               	movlw	low main@mL
  1217  0006AC  6E1B               	movwf	stop@mL,c
  1218  0006AE  0E00               	movlw	high main@mL
  1219  0006B0  6E1C               	movwf	stop@mL+1,c
  1220  0006B2  0EEF               	movlw	low main@mR
  1221  0006B4  6E1D               	movwf	stop@mR,c
  1222  0006B6  0E00               	movlw	high main@mR
  1223  0006B8  6E1E               	movwf	stop@mR+1,c
  1224  0006BA  EC36  F009         	call	_stop	;wreg free
  1225                           
  1226                           ;main.c: 208: print_RFID(&string_rfid[0], &string_rfid[0]);
  1227  0006BE  0E3C               	movlw	low _string_rfid
  1228  0006C0  6E0B               	movwf	print_RFID@pa,c
  1229  0006C2  0E00               	movlw	high _string_rfid
  1230  0006C4  6E0C               	movwf	print_RFID@pa+1,c
  1231  0006C6  0E3C               	movlw	low _string_rfid
  1232  0006C8  6E0D               	movwf	print_RFID@dis,c
  1233  0006CA  0E00               	movlw	high _string_rfid
  1234  0006CC  6E0E               	movwf	print_RFID@dis+1,c
  1235  0006CE  ECBC  F008         	call	_print_RFID	;wreg free
  1236                           
  1237                           ;main.c: 209: _delay((unsigned long)((10)*(8000000/4000.0)));
  1238  0006D2  0E1A               	movlw	26
  1239  0006D4  6E33               	movwf	??_main& (0+255),c
  1240  0006D6  0EF8               	movlw	248
  1241  0006D8                     u1947:
  1242  0006D8  2EE8               	decfsz	wreg,f,c
  1243  0006DA  D7FE               	bra	u1947
  1244  0006DC  2E33               	decfsz	??_main& (0+255),f,c
  1245  0006DE  D7FC               	bra	u1947
  1246  0006E0  D000               	nop2	
  1247                           
  1248                           ;main.c: 212: for (char ii = 0; ii < counter; ii++) {
  1249  0006E2  0E00               	movlw	0
  1250  0006E4  0100               	movlb	0	; () banked
  1251  0006E6  6FDA               	movwf	main@ii& (0+255),b
  1252  0006E8  D08E               	goto	l172
  1253  0006EA                     
  1254                           ; BSR set to: 0
  1255                           ;main.c: 216: if (forwardsDirection[counter - ii] == 1) {
  1256                           
  1257                           ; BSR set to: 0
  1258  0006EA  51DA               	movf	main@ii& (0+255),w,b
  1259  0006EC  6E33               	movwf	??_main& (0+255),c
  1260  0006EE  6A34               	clrf	(??_main+1)& (0+255),c
  1261  0006F0  1E33               	comf	??_main,f,c
  1262  0006F2  1E34               	comf	??_main+1,f,c
  1263  0006F4  4A33               	infsnz	??_main,f,c
  1264  0006F6  2A34               	incf	??_main+1,f,c
  1265  0006F8  51DD               	movf	main@counter& (0+255),w,b
  1266  0006FA  6E35               	movwf	(??_main+2)& (0+255),c
  1267  0006FC  6A36               	clrf	(??_main+3)& (0+255),c
  1268  0006FE  5033               	movf	??_main,w,c
  1269  000700  2635               	addwf	??_main+2,f,c
  1270  000702  5034               	movf	??_main+1,w,c
  1271  000704  2236               	addwfc	??_main+3,f,c
  1272  000706  90D8               	bcf	status,0,c
  1273  000708  3635               	rlcf	??_main+2,f,c
  1274  00070A  3636               	rlcf	??_main+3,f,c
  1275  00070C  0E60               	movlw	low main@forwardsDirection
  1276  00070E  2435               	addwf	??_main+2,w,c
  1277  000710  6ED9               	movwf	fsr2l,c
  1278  000712  0E00               	movlw	high main@forwardsDirection
  1279  000714  2036               	addwfc	??_main+3,w,c
  1280  000716  6EDA               	movwf	fsr2h,c
  1281  000718  04DE               	decf	postinc2,w,c
  1282  00071A  10DE               	iorwf	postinc2,w,c
  1283  00071C  A4D8               	btfss	status,2,c
  1284  00071E  D00B               	goto	l174
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;main.c: 217: turnRight(&mL, &mR);
  1288  000720  0EE6               	movlw	low main@mL
  1289  000722  6E1B               	movwf	turnRight@mL,c
  1290  000724  0E00               	movlw	high main@mL
  1291  000726  6E1C               	movwf	turnRight@mL+1,c
  1292  000728  0EEF               	movlw	low main@mR
  1293  00072A  6E1D               	movwf	turnRight@mR,c
  1294  00072C  0E00               	movlw	high main@mR
  1295  00072E  6E1E               	movwf	turnRight@mR+1,c
  1296  000730  EC4E  F007         	call	_turnRight	;wreg free
  1297                           
  1298                           ;main.c: 218: } else if (forwardsDirection[counter - ii] == 2) {
  1299  000734  D05A               	goto	l179
  1300  000736                     l174:
  1301  000736  0100               	movlb	0	; () banked
  1302  000738  51DA               	movf	main@ii& (0+255),w,b
  1303  00073A  6E33               	movwf	??_main& (0+255),c
  1304  00073C  6A34               	clrf	(??_main+1)& (0+255),c
  1305  00073E  1E33               	comf	??_main,f,c
  1306  000740  1E34               	comf	??_main+1,f,c
  1307  000742  4A33               	infsnz	??_main,f,c
  1308  000744  2A34               	incf	??_main+1,f,c
  1309  000746  51DD               	movf	main@counter& (0+255),w,b
  1310  000748  6E35               	movwf	(??_main+2)& (0+255),c
  1311  00074A  6A36               	clrf	(??_main+3)& (0+255),c
  1312  00074C  5033               	movf	??_main,w,c
  1313  00074E  2635               	addwf	??_main+2,f,c
  1314  000750  5034               	movf	??_main+1,w,c
  1315  000752  2236               	addwfc	??_main+3,f,c
  1316  000754  90D8               	bcf	status,0,c
  1317  000756  3635               	rlcf	??_main+2,f,c
  1318  000758  3636               	rlcf	??_main+3,f,c
  1319  00075A  0E60               	movlw	low main@forwardsDirection
  1320  00075C  2435               	addwf	??_main+2,w,c
  1321  00075E  6ED9               	movwf	fsr2l,c
  1322  000760  0E00               	movlw	high main@forwardsDirection
  1323  000762  2036               	addwfc	??_main+3,w,c
  1324  000764  6EDA               	movwf	fsr2h,c
  1325  000766  0E02               	movlw	2
  1326  000768  18DE               	xorwf	postinc2,w,c
  1327  00076A  10DE               	iorwf	postinc2,w,c
  1328  00076C  A4D8               	btfss	status,2,c
  1329  00076E  D00B               	goto	l176
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 219: turnLeft(&mL, &mR);
  1333  000770  0EE6               	movlw	low main@mL
  1334  000772  6E1B               	movwf	turnLeft@mL,c
  1335  000774  0E00               	movlw	high main@mL
  1336  000776  6E1C               	movwf	turnLeft@mL+1,c
  1337  000778  0EEF               	movlw	low main@mR
  1338  00077A  6E1D               	movwf	turnLeft@mR,c
  1339  00077C  0E00               	movlw	high main@mR
  1340  00077E  6E1E               	movwf	turnLeft@mR+1,c
  1341  000780  EC99  F007         	call	_turnLeft	;wreg free
  1342                           
  1343                           ;main.c: 220: } else if (forwardsDirection[counter - ii] == 3) {
  1344  000784  D032               	goto	l179
  1345  000786                     l176:
  1346  000786  0100               	movlb	0	; () banked
  1347  000788  51DA               	movf	main@ii& (0+255),w,b
  1348  00078A  6E33               	movwf	??_main& (0+255),c
  1349  00078C  6A34               	clrf	(??_main+1)& (0+255),c
  1350  00078E  1E33               	comf	??_main,f,c
  1351  000790  1E34               	comf	??_main+1,f,c
  1352  000792  4A33               	infsnz	??_main,f,c
  1353  000794  2A34               	incf	??_main+1,f,c
  1354  000796  51DD               	movf	main@counter& (0+255),w,b
  1355  000798  6E35               	movwf	(??_main+2)& (0+255),c
  1356  00079A  6A36               	clrf	(??_main+3)& (0+255),c
  1357  00079C  5033               	movf	??_main,w,c
  1358  00079E  2635               	addwf	??_main+2,f,c
  1359  0007A0  5034               	movf	??_main+1,w,c
  1360  0007A2  2236               	addwfc	??_main+3,f,c
  1361  0007A4  90D8               	bcf	status,0,c
  1362  0007A6  3635               	rlcf	??_main+2,f,c
  1363  0007A8  3636               	rlcf	??_main+3,f,c
  1364  0007AA  0E60               	movlw	low main@forwardsDirection
  1365  0007AC  2435               	addwf	??_main+2,w,c
  1366  0007AE  6ED9               	movwf	fsr2l,c
  1367  0007B0  0E00               	movlw	high main@forwardsDirection
  1368  0007B2  2036               	addwfc	??_main+3,w,c
  1369  0007B4  6EDA               	movwf	fsr2h,c
  1370  0007B6  0E03               	movlw	3
  1371  0007B8  18DE               	xorwf	postinc2,w,c
  1372  0007BA  10DE               	iorwf	postinc2,w,c
  1373  0007BC  A4D8               	btfss	status,2,c
  1374  0007BE  D00B               	goto	l178
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 221: backwards(&mL, &mR);
  1378  0007C0  0EE6               	movlw	low main@mL
  1379  0007C2  6E1B               	movwf	backwards@mL,c
  1380  0007C4  0E00               	movlw	high main@mL
  1381  0007C6  6E1C               	movwf	backwards@mL+1,c
  1382  0007C8  0EEF               	movlw	low main@mR
  1383  0007CA  6E1D               	movwf	backwards@mR,c
  1384  0007CC  0E00               	movlw	high main@mR
  1385  0007CE  6E1E               	movwf	backwards@mR+1,c
  1386  0007D0  EC2F  F008         	call	_backwards	;wreg free
  1387                           
  1388                           ;main.c: 222: } else {
  1389  0007D4  D00A               	goto	l179
  1390  0007D6                     l178:
  1391                           
  1392                           ;main.c: 223: stop(&mL, &mR);
  1393  0007D6  0EE6               	movlw	low main@mL
  1394  0007D8  6E1B               	movwf	stop@mL,c
  1395  0007DA  0E00               	movlw	high main@mL
  1396  0007DC  6E1C               	movwf	stop@mL+1,c
  1397  0007DE  0EEF               	movlw	low main@mR
  1398  0007E0  6E1D               	movwf	stop@mR,c
  1399  0007E2  0E00               	movlw	high main@mR
  1400  0007E4  6E1E               	movwf	stop@mR+1,c
  1401  0007E6  EC36  F009         	call	_stop	;wreg free
  1402  0007EA                     l179:
  1403                           
  1404                           ;main.c: 224: };main.c: 227: _delay((unsigned long)((400)*(8000000/4000.0)));
  1405  0007EA  0E05               	movlw	5
  1406  0007EC  6E34               	movwf	(??_main+1)& (0+255),c
  1407  0007EE  0E0F               	movlw	15
  1408  0007F0  6E33               	movwf	??_main& (0+255),c
  1409  0007F2  0EF1               	movlw	241
  1410  0007F4                     u1957:
  1411  0007F4  2EE8               	decfsz	wreg,f,c
  1412  0007F6  D7FE               	bra	u1957
  1413  0007F8  2E33               	decfsz	??_main& (0+255),f,c
  1414  0007FA  D7FC               	bra	u1957
  1415  0007FC  2E34               	decfsz	(??_main+1)& (0+255),f,c
  1416  0007FE  D7FA               	bra	u1957
  1417  000800  F000               	nop	
  1418  000802  0100               	movlb	0	; () banked
  1419  000804  2BDA               	incf	main@ii& (0+255),f,b
  1420  000806                     l172:
  1421                           
  1422                           ; BSR set to: 0
  1423                           
  1424                           ; BSR set to: 0
  1425  000806  51DD               	movf	main@counter& (0+255),w,b
  1426  000808  5DDA               	subwf	main@ii& (0+255),w,b
  1427  00080A  A0D8               	btfss	status,0,c
  1428  00080C  D76E               	goto	l173
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;main.c: 231: };main.c: 232: card_read = 3;
  1432                           
  1433                           ; BSR set to: 0
  1434  00080E  0E03               	movlw	3
  1435  000810  6FF8               	movwf	_card_read& (0+255),b	;volatile
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 233: stop(&mL, &mR);
  1439  000812  0EE6               	movlw	low main@mL
  1440  000814  6E1B               	movwf	stop@mL,c
  1441  000816  0E00               	movlw	high main@mL
  1442  000818  6E1C               	movwf	stop@mL+1,c
  1443  00081A  0EEF               	movlw	low main@mR
  1444  00081C  6E1D               	movwf	stop@mR,c
  1445  00081E  0E00               	movlw	high main@mR
  1446  000820  6E1E               	movwf	stop@mR+1,c
  1447  000822  EC36  F009         	call	_stop	;wreg free
  1448  000826                     l170:
  1449  000826  0100               	movlb	0	; () banked
  1450  000828  05F8               	decf	_card_read& (0+255),w,b	;volatile
  1451  00082A  A4D8               	btfss	status,2,c
  1452  00082C  D601               	goto	l148
  1453  00082E  D73D               	goto	l171
  1454  000830                     __end_of_main:
  1455                           	opt stack 0
  1456                           tblptru	equ	0xFF8
  1457                           prodh	equ	0xFF4
  1458                           prodl	equ	0xFF3
  1459                           intcon	equ	0xFF2
  1460                           postinc0	equ	0xFEE
  1461                           wreg	equ	0xFE8
  1462                           postinc2	equ	0xFDE
  1463                           postdec2	equ	0xFDD
  1464                           fsr2h	equ	0xFDA
  1465                           fsr2l	equ	0xFD9
  1466                           status	equ	0xFD8
  1467                           
  1468 ;; *************** function _turnRight *****************
  1469 ;; Defined at:
  1470 ;;		line 114 in file "motor.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  mL              2   26[COMRAM] PTR struct Motor
  1473 ;;		 -> main@mL(9), 
  1474 ;;  mR              2   28[COMRAM] PTR struct Motor
  1475 ;;		 -> main@mR(9), 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;		None
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1487 ;;      Params:         4       0       0       0
  1488 ;;      Locals:         0       0       0       0
  1489 ;;      Temps:          1       0       0       0
  1490 ;;      Totals:         5       0       0       0
  1491 ;;Total ram usage:        5 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    3
  1494 ;; This function calls:
  1495 ;;		_setMotorPWM
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text1
  1502  000E9C                     __ptext1:
  1503                           	opt stack 0
  1504  000E9C                     _turnRight:
  1505                           	opt stack 27
  1506                           
  1507                           ;motor.c: 117: mL->direction = 1;
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;incstack = 0
  1511  000E9C  EE20 F001          	lfsr	2,1
  1512  000EA0  501B               	movf	turnRight@mL,w,c
  1513  000EA2  26D9               	addwf	fsr2l,f,c
  1514  000EA4  501C               	movf	turnRight@mL+1,w,c
  1515  000EA6  22DA               	addwfc	fsr2h,f,c
  1516  000EA8  0E01               	movlw	1
  1517  000EAA  6EDF               	movwf	indf2,c
  1518                           
  1519                           ;motor.c: 118: mR->direction = 0;
  1520  000EAC  EE20 F001          	lfsr	2,1
  1521  000EB0  501D               	movf	turnRight@mR,w,c
  1522  000EB2  26D9               	addwf	fsr2l,f,c
  1523  000EB4  501E               	movf	turnRight@mR+1,w,c
  1524  000EB6  22DA               	addwfc	fsr2h,f,c
  1525  000EB8  0E00               	movlw	0
  1526  000EBA  6EDF               	movwf	indf2,c
  1527                           
  1528                           ;motor.c: 119: while (mL->power < 50 || mR->power < 50) {
  1529  000EBC  D02B               	goto	l282
  1530  000EBE                     
  1531                           ;motor.c: 120: if (mL->power < 50) {
  1532  000EBE  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1533  000EC2  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1534  000EC6  0E32               	movlw	50
  1535  000EC8  60DF               	cpfslt	indf2,c
  1536  000ECA  D005               	goto	l284
  1537                           
  1538                           ;motor.c: 121: mL->power++;
  1539  000ECC  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1540  000ED0  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1541  000ED4  2ADF               	incf	indf2,f,c
  1542  000ED6                     l284:
  1543                           
  1544                           ;motor.c: 122: };motor.c: 123: if (mR->power < 50) {
  1545  000ED6  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1546  000EDA  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1547  000EDE  0E32               	movlw	50
  1548  000EE0  60DF               	cpfslt	indf2,c
  1549  000EE2  D005               	goto	l285
  1550                           
  1551                           ;motor.c: 124: mR->power++;
  1552  000EE4  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1553  000EE8  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1554  000EEC  2ADF               	incf	indf2,f,c
  1555  000EEE                     l285:
  1556                           
  1557                           ;motor.c: 125: };motor.c: 126: setMotorPWM(mL);
  1558  000EEE  C01B  F014         	movff	turnRight@mL,setMotorPWM@m
  1559  000EF2  C01C  F015         	movff	turnRight@mL+1,setMotorPWM@m+1
  1560  000EF6  EC07  F005         	call	_setMotorPWM	;wreg free
  1561                           
  1562                           ;motor.c: 127: setMotorPWM(mR);
  1563  000EFA  C01D  F014         	movff	turnRight@mR,setMotorPWM@m
  1564  000EFE  C01E  F015         	movff	turnRight@mR+1,setMotorPWM@m+1
  1565  000F02  EC07  F005         	call	_setMotorPWM	;wreg free
  1566                           
  1567                           ;motor.c: 128: _delay((unsigned long)((5)*(8000000/4000.0)));
  1568  000F06  0E0D               	movlw	13
  1569  000F08  6E1F               	movwf	??_turnRight& (0+255),c
  1570  000F0A  0EFC               	movlw	252
  1571  000F0C                     u1967:
  1572  000F0C  2EE8               	decfsz	wreg,f,c
  1573  000F0E  D7FE               	bra	u1967
  1574  000F10  2E1F               	decfsz	??_turnRight& (0+255),f,c
  1575  000F12  D7FC               	bra	u1967
  1576  000F14                     l282:
  1577  000F14  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1578  000F18  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1579  000F1C  0E31               	movlw	49
  1580  000F1E  64DF               	cpfsgt	indf2,c
  1581  000F20  D7CE               	goto	l283
  1582  000F22  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1583  000F26  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1584  000F2A  0E31               	movlw	49
  1585  000F2C  64DF               	cpfsgt	indf2,c
  1586  000F2E  D7C7               	goto	l283
  1587  000F30  0012               	return	
  1588  000F32                     __end_of_turnRight:
  1589                           	opt stack 0
  1590                           tblptru	equ	0xFF8
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           indf2	equ	0xFDF
  1597                           postinc2	equ	0xFDE
  1598                           postdec2	equ	0xFDD
  1599                           fsr2h	equ	0xFDA
  1600                           fsr2l	equ	0xFD9
  1601                           status	equ	0xFD8
  1602                           
  1603 ;; *************** function _turnLeft *****************
  1604 ;; Defined at:
  1605 ;;		line 95 in file "motor.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  mL              2   26[COMRAM] PTR struct Motor
  1608 ;;		 -> main@mL(9), 
  1609 ;;  mR              2   28[COMRAM] PTR struct Motor
  1610 ;;		 -> main@mR(9), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1622 ;;      Params:         4       0       0       0
  1623 ;;      Locals:         0       0       0       0
  1624 ;;      Temps:          1       0       0       0
  1625 ;;      Totals:         5       0       0       0
  1626 ;;Total ram usage:        5 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    3
  1629 ;; This function calls:
  1630 ;;		_setMotorPWM
  1631 ;; This function is called by:
  1632 ;;		_main
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text2
  1637  000F32                     __ptext2:
  1638                           	opt stack 0
  1639  000F32                     _turnLeft:
  1640                           	opt stack 27
  1641                           
  1642                           ;motor.c: 98: mL->direction = 0;
  1643                           
  1644                           ;incstack = 0
  1645  000F32  EE20 F001          	lfsr	2,1
  1646  000F36  501B               	movf	turnLeft@mL,w,c
  1647  000F38  26D9               	addwf	fsr2l,f,c
  1648  000F3A  501C               	movf	turnLeft@mL+1,w,c
  1649  000F3C  22DA               	addwfc	fsr2h,f,c
  1650  000F3E  0E00               	movlw	0
  1651  000F40  6EDF               	movwf	indf2,c
  1652                           
  1653                           ;motor.c: 99: mR->direction = 1;
  1654  000F42  EE20 F001          	lfsr	2,1
  1655  000F46  501D               	movf	turnLeft@mR,w,c
  1656  000F48  26D9               	addwf	fsr2l,f,c
  1657  000F4A  501E               	movf	turnLeft@mR+1,w,c
  1658  000F4C  22DA               	addwfc	fsr2h,f,c
  1659  000F4E  0E01               	movlw	1
  1660  000F50  6EDF               	movwf	indf2,c
  1661                           
  1662                           ;motor.c: 100: while (mL->power < 50 || mR->power < 50) {
  1663  000F52  D02B               	goto	l274
  1664  000F54                     
  1665                           ;motor.c: 101: if (mL->power < 50) {
  1666  000F54  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1667  000F58  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1668  000F5C  0E32               	movlw	50
  1669  000F5E  60DF               	cpfslt	indf2,c
  1670  000F60  D005               	goto	l276
  1671                           
  1672                           ;motor.c: 102: mL->power++;
  1673  000F62  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1674  000F66  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1675  000F6A  2ADF               	incf	indf2,f,c
  1676  000F6C                     l276:
  1677                           
  1678                           ;motor.c: 103: };motor.c: 104: if (mR->power < 50) {
  1679  000F6C  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1680  000F70  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1681  000F74  0E32               	movlw	50
  1682  000F76  60DF               	cpfslt	indf2,c
  1683  000F78  D005               	goto	l277
  1684                           
  1685                           ;motor.c: 105: mR->power++;
  1686  000F7A  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1687  000F7E  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1688  000F82  2ADF               	incf	indf2,f,c
  1689  000F84                     l277:
  1690                           
  1691                           ;motor.c: 106: };motor.c: 107: setMotorPWM(mL);
  1692  000F84  C01B  F014         	movff	turnLeft@mL,setMotorPWM@m
  1693  000F88  C01C  F015         	movff	turnLeft@mL+1,setMotorPWM@m+1
  1694  000F8C  EC07  F005         	call	_setMotorPWM	;wreg free
  1695                           
  1696                           ;motor.c: 108: setMotorPWM(mR);
  1697  000F90  C01D  F014         	movff	turnLeft@mR,setMotorPWM@m
  1698  000F94  C01E  F015         	movff	turnLeft@mR+1,setMotorPWM@m+1
  1699  000F98  EC07  F005         	call	_setMotorPWM	;wreg free
  1700                           
  1701                           ;motor.c: 109: _delay((unsigned long)((5)*(8000000/4000.0)));
  1702  000F9C  0E0D               	movlw	13
  1703  000F9E  6E1F               	movwf	??_turnLeft& (0+255),c
  1704  000FA0  0EFC               	movlw	252
  1705  000FA2                     u1977:
  1706  000FA2  2EE8               	decfsz	wreg,f,c
  1707  000FA4  D7FE               	bra	u1977
  1708  000FA6  2E1F               	decfsz	??_turnLeft& (0+255),f,c
  1709  000FA8  D7FC               	bra	u1977
  1710  000FAA                     l274:
  1711  000FAA  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1712  000FAE  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1713  000FB2  0E31               	movlw	49
  1714  000FB4  64DF               	cpfsgt	indf2,c
  1715  000FB6  D7CE               	goto	l275
  1716  000FB8  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1717  000FBC  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1718  000FC0  0E31               	movlw	49
  1719  000FC2  64DF               	cpfsgt	indf2,c
  1720  000FC4  D7C7               	goto	l275
  1721  000FC6  0012               	return	
  1722  000FC8                     __end_of_turnLeft:
  1723                           	opt stack 0
  1724                           tblptru	equ	0xFF8
  1725                           prodh	equ	0xFF4
  1726                           prodl	equ	0xFF3
  1727                           intcon	equ	0xFF2
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           indf2	equ	0xFDF
  1731                           postinc2	equ	0xFDE
  1732                           postdec2	equ	0xFDD
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _stop *****************
  1738 ;; Defined at:
  1739 ;;		line 71 in file "motor.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  mL              2   26[COMRAM] PTR struct Motor
  1742 ;;		 -> main@mL(9), 
  1743 ;;  mR              2   28[COMRAM] PTR struct Motor
  1744 ;;		 -> main@mR(9), 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1756 ;;      Params:         4       0       0       0
  1757 ;;      Locals:         0       0       0       0
  1758 ;;      Temps:          1       0       0       0
  1759 ;;      Totals:         5       0       0       0
  1760 ;;Total ram usage:        5 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    3
  1763 ;; This function calls:
  1764 ;;		_setMotorPWM
  1765 ;; This function is called by:
  1766 ;;		_main
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text3
  1771  00126C                     __ptext3:
  1772                           	opt stack 0
  1773  00126C                     _stop:
  1774                           	opt stack 27
  1775                           
  1776                           ;motor.c: 74: while (((mR->power) > 0) || ((mL->power) > 0)) {
  1777                           
  1778                           ;incstack = 0
  1779  00126C  D01F               	goto	l268
  1780  00126E                     
  1781                           ;motor.c: 85: mL->power = 0;
  1782  00126E  C01B  FFD9         	movff	stop@mL,fsr2l
  1783  001272  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1784  001276  0E00               	movlw	0
  1785  001278  6EDF               	movwf	indf2,c
  1786                           
  1787                           ;motor.c: 86: mR->power = 0;
  1788  00127A  C01D  FFD9         	movff	stop@mR,fsr2l
  1789  00127E  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1790  001282  0E00               	movlw	0
  1791  001284  6EDF               	movwf	indf2,c
  1792                           
  1793                           ;motor.c: 89: setMotorPWM(mL);
  1794  001286  C01B  F014         	movff	stop@mL,setMotorPWM@m
  1795  00128A  C01C  F015         	movff	stop@mL+1,setMotorPWM@m+1
  1796  00128E  EC07  F005         	call	_setMotorPWM	;wreg free
  1797                           
  1798                           ;motor.c: 90: setMotorPWM(mR);
  1799  001292  C01D  F014         	movff	stop@mR,setMotorPWM@m
  1800  001296  C01E  F015         	movff	stop@mR+1,setMotorPWM@m+1
  1801  00129A  EC07  F005         	call	_setMotorPWM	;wreg free
  1802                           
  1803                           ;motor.c: 91: _delay((unsigned long)((1)*(8000000/4000.0)));
  1804  00129E  0E03               	movlw	3
  1805  0012A0  6E1F               	movwf	??_stop& (0+255),c
  1806  0012A2  0E98               	movlw	152
  1807  0012A4                     u1987:
  1808  0012A4  2EE8               	decfsz	wreg,f,c
  1809  0012A6  D7FE               	bra	u1987
  1810  0012A8  2E1F               	decfsz	??_stop& (0+255),f,c
  1811  0012AA  D7FC               	bra	u1987
  1812  0012AC                     l268:
  1813  0012AC  C01D  FFD9         	movff	stop@mR,fsr2l
  1814  0012B0  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1815  0012B4  50DF               	movf	indf2,w,c
  1816  0012B6  A4D8               	btfss	status,2,c
  1817  0012B8  D7DA               	goto	l269
  1818  0012BA  C01B  FFD9         	movff	stop@mL,fsr2l
  1819  0012BE  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1820  0012C2  50DF               	movf	indf2,w,c
  1821  0012C4  B4D8               	btfsc	status,2,c
  1822  0012C6  0012               	return	
  1823  0012C8  D7D2               	goto	l269
  1824  0012CA                     __end_of_stop:
  1825                           	opt stack 0
  1826                           tblptru	equ	0xFF8
  1827                           prodh	equ	0xFF4
  1828                           prodl	equ	0xFF3
  1829                           intcon	equ	0xFF2
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           indf2	equ	0xFDF
  1833                           postinc2	equ	0xFDE
  1834                           postdec2	equ	0xFDD
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _read_IR *****************
  1840 ;; Defined at:
  1841 ;;		line 38 in file "ir.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  Values          2    5[COMRAM] PTR struct Sensor_ir
  1844 ;;		 -> main@Values(8), 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  1    wreg      void 
  1849 ;; Registers used:
  1850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1856 ;;      Params:         2       0       0       0
  1857 ;;      Locals:         0       0       0       0
  1858 ;;      Temps:          4       0       0       0
  1859 ;;      Totals:         6       0       0       0
  1860 ;;Total ram usage:        6 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    1
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		_main
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           	psect	text4
  1871  000830                     __ptext4:
  1872                           	opt stack 0
  1873  000830                     _read_IR:
  1874                           	opt stack 29
  1875                           
  1876                           ;ir.c: 40: Values->left_prev = Values->left;
  1877                           
  1878                           ;incstack = 0
  1879  000830  C006  FFD9         	movff	read_IR@Values,fsr2l
  1880  000834  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1881  000838  EE10 F004          	lfsr	1,4
  1882  00083C  5006               	movf	read_IR@Values,w,c
  1883  00083E  26E1               	addwf	fsr1l,f,c
  1884  000840  5007               	movf	read_IR@Values+1,w,c
  1885  000842  22E2               	addwfc	fsr1h,f,c
  1886  000844  CFDE FFE6          	movff	postinc2,postinc1
  1887  000848  CFDD FFE5          	movff	postdec2,postdec1
  1888                           
  1889                           ;ir.c: 41: Values->right_prev = Values->right;
  1890  00084C  EE20 F002          	lfsr	2,2
  1891  000850  5006               	movf	read_IR@Values,w,c
  1892  000852  26D9               	addwf	fsr2l,f,c
  1893  000854  5007               	movf	read_IR@Values+1,w,c
  1894  000856  22DA               	addwfc	fsr2h,f,c
  1895  000858  EE10 F006          	lfsr	1,6
  1896  00085C  5006               	movf	read_IR@Values,w,c
  1897  00085E  26E1               	addwf	fsr1l,f,c
  1898  000860  5007               	movf	read_IR@Values+1,w,c
  1899  000862  22E2               	addwfc	fsr1h,f,c
  1900  000864  CFDE FFE6          	movff	postinc2,postinc1
  1901  000868  CFDD FFE5          	movff	postdec2,postdec1
  1902                           
  1903                           ;ir.c: 42: Values->left = ((CAP2BUFH << 8) | (CAP2BUFL));
  1904  00086C  5066               	movf	3942,w,c	;volatile
  1905  00086E  CF67 F008          	movff	3943,??_read_IR	;volatile
  1906  000872  6A09               	clrf	(??_read_IR+1)& (0+255),c
  1907  000874  C008  F009         	movff	??_read_IR,??_read_IR+1
  1908  000878  6A08               	clrf	??_read_IR,c
  1909  00087A  1208               	iorwf	??_read_IR,f,c
  1910  00087C  0E00               	movlw	0
  1911  00087E  1209               	iorwf	??_read_IR+1,f,c
  1912  000880  C006  FFD9         	movff	read_IR@Values,fsr2l
  1913  000884  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1914  000888  C008  FFDE         	movff	??_read_IR,postinc2
  1915  00088C  C009  FFDD         	movff	??_read_IR+1,postdec2
  1916                           
  1917                           ;ir.c: 43: Values->right = ((CAP1BUFH << 8) | (CAP1BUFL));
  1918  000890  5068               	movf	3944,w,c	;volatile
  1919  000892  CF69 F008          	movff	3945,??_read_IR	;volatile
  1920  000896  6A09               	clrf	(??_read_IR+1)& (0+255),c
  1921  000898  C008  F009         	movff	??_read_IR,??_read_IR+1
  1922  00089C  6A08               	clrf	??_read_IR,c
  1923  00089E  1208               	iorwf	??_read_IR,f,c
  1924  0008A0  0E00               	movlw	0
  1925  0008A2  1209               	iorwf	??_read_IR+1,f,c
  1926  0008A4  EE20 F002          	lfsr	2,2
  1927  0008A8  5006               	movf	read_IR@Values,w,c
  1928  0008AA  26D9               	addwf	fsr2l,f,c
  1929  0008AC  5007               	movf	read_IR@Values+1,w,c
  1930  0008AE  22DA               	addwfc	fsr2h,f,c
  1931  0008B0  C008  FFDE         	movff	??_read_IR,postinc2
  1932  0008B4  C009  FFDD         	movff	??_read_IR+1,postdec2
  1933                           
  1934                           ;ir.c: 45: if ((Values->left == Values->left_prev) && (Values->left <= 200)) {
  1935  0008B8  EE20 F004          	lfsr	2,4
  1936  0008BC  5006               	movf	read_IR@Values,w,c
  1937  0008BE  26D9               	addwf	fsr2l,f,c
  1938  0008C0  5007               	movf	read_IR@Values+1,w,c
  1939  0008C2  22DA               	addwfc	fsr2h,f,c
  1940  0008C4  C006  FFE1         	movff	read_IR@Values,fsr1l
  1941  0008C8  C007  FFE2         	movff	read_IR@Values+1,fsr1h
  1942  0008CC  50DE               	movf	postinc2,w,c
  1943  0008CE  18E6               	xorwf	postinc1,w,c
  1944  0008D0  E117               	bnz	l2300
  1945  0008D2  50DE               	movf	postinc2,w,c
  1946  0008D4  18E6               	xorwf	postinc1,w,c
  1947  0008D6  A4D8               	btfss	status,2,c
  1948  0008D8  D013               	goto	l215
  1949  0008DA  C006  FFD9         	movff	read_IR@Values,fsr2l
  1950  0008DE  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1951  0008E2  0E01               	movlw	1
  1952  0008E4  50DB               	movf	plusw2,w,c
  1953  0008E6  E10C               	bnz	l2300
  1954  0008E8  0EC9               	movlw	201
  1955  0008EA  5CDE               	subwf	postinc2,w,c
  1956  0008EC  B0D8               	btfsc	status,0,c
  1957  0008EE  D008               	goto	l215
  1958                           
  1959                           ;ir.c: 46: Values->left = 0;
  1960  0008F0  C006  FFD9         	movff	read_IR@Values,fsr2l
  1961  0008F4  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1962  0008F8  0E00               	movlw	0
  1963  0008FA  6EDE               	movwf	postinc2,c
  1964  0008FC  0E00               	movlw	0
  1965  0008FE  6EDD               	movwf	postdec2,c
  1966  000900                     l215:
  1967  000900                     l2300:
  1968                           
  1969                           ;ir.c: 47: };ir.c: 49: if ((Values->right == Values->right_prev) && (Values->right <= 20
      +                          0)) {
  1970  000900  EE20 F006          	lfsr	2,6
  1971  000904  5006               	movf	read_IR@Values,w,c
  1972  000906  26D9               	addwf	fsr2l,f,c
  1973  000908  5007               	movf	read_IR@Values+1,w,c
  1974  00090A  22DA               	addwfc	fsr2h,f,c
  1975  00090C  EE10 F002          	lfsr	1,2
  1976  000910  5006               	movf	read_IR@Values,w,c
  1977  000912  26E1               	addwf	fsr1l,f,c
  1978  000914  5007               	movf	read_IR@Values+1,w,c
  1979  000916  22E2               	addwfc	fsr1h,f,c
  1980  000918  50DE               	movf	postinc2,w,c
  1981  00091A  18E6               	xorwf	postinc1,w,c
  1982  00091C  E11B               	bnz	l216
  1983  00091E  50DE               	movf	postinc2,w,c
  1984  000920  18E6               	xorwf	postinc1,w,c
  1985  000922  A4D8               	btfss	status,2,c
  1986  000924  D017               	goto	l216
  1987  000926  EE20 F002          	lfsr	2,2
  1988  00092A  5006               	movf	read_IR@Values,w,c
  1989  00092C  26D9               	addwf	fsr2l,f,c
  1990  00092E  5007               	movf	read_IR@Values+1,w,c
  1991  000930  22DA               	addwfc	fsr2h,f,c
  1992  000932  0E01               	movlw	1
  1993  000934  50DB               	movf	plusw2,w,c
  1994  000936  E10E               	bnz	l216
  1995  000938  0EC9               	movlw	201
  1996  00093A  5CDE               	subwf	postinc2,w,c
  1997  00093C  B0D8               	btfsc	status,0,c
  1998  00093E  D00A               	goto	l216
  1999                           
  2000                           ;ir.c: 50: Values->right = 0;
  2001  000940  EE20 F002          	lfsr	2,2
  2002  000944  5006               	movf	read_IR@Values,w,c
  2003  000946  26D9               	addwf	fsr2l,f,c
  2004  000948  5007               	movf	read_IR@Values+1,w,c
  2005  00094A  22DA               	addwfc	fsr2h,f,c
  2006  00094C  0E00               	movlw	0
  2007  00094E  6EDE               	movwf	postinc2,c
  2008  000950  0E00               	movlw	0
  2009  000952  6EDD               	movwf	postdec2,c
  2010  000954                     l216:
  2011                           
  2012                           ;ir.c: 51: };ir.c: 53: Values->left = Values->left / 64;
  2013  000954  C006  FFD9         	movff	read_IR@Values,fsr2l
  2014  000958  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2015  00095C  CFDE F008          	movff	postinc2,??_read_IR
  2016  000960  CFDD F009          	movff	postdec2,??_read_IR+1
  2017  000964  0E06               	movlw	6
  2018  000966  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  2019  000968                     u1355:
  2020  000968  90D8               	bcf	status,0,c
  2021  00096A  3209               	rrcf	??_read_IR+1,f,c
  2022  00096C  3208               	rrcf	??_read_IR,f,c
  2023  00096E  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  2024  000970  D7FB               	goto	u1355
  2025  000972  C006  FFD9         	movff	read_IR@Values,fsr2l
  2026  000976  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2027  00097A  C008  FFDE         	movff	??_read_IR,postinc2
  2028  00097E  C009  FFDD         	movff	??_read_IR+1,postdec2
  2029                           
  2030                           ;ir.c: 54: if (Values->left > 200) {
  2031  000982  C006  FFD9         	movff	read_IR@Values,fsr2l
  2032  000986  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2033  00098A  0E01               	movlw	1
  2034  00098C  50DB               	movf	plusw2,w,c
  2035  00098E  E104               	bnz	u1360
  2036  000990  0EC9               	movlw	201
  2037  000992  5CDE               	subwf	postinc2,w,c
  2038  000994  A0D8               	btfss	status,0,c
  2039  000996  D008               	goto	l217
  2040  000998                     u1360:
  2041                           
  2042                           ;ir.c: 55: Values->left = 200;
  2043  000998  C006  FFD9         	movff	read_IR@Values,fsr2l
  2044  00099C  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2045  0009A0  0EC8               	movlw	200
  2046  0009A2  6EDE               	movwf	postinc2,c
  2047  0009A4  0E00               	movlw	0
  2048  0009A6  6EDD               	movwf	postdec2,c
  2049  0009A8                     l217:
  2050                           
  2051                           ;ir.c: 56: };ir.c: 58: Values->right = Values->right / 64;
  2052  0009A8  EE20 F002          	lfsr	2,2
  2053  0009AC  5006               	movf	read_IR@Values,w,c
  2054  0009AE  26D9               	addwf	fsr2l,f,c
  2055  0009B0  5007               	movf	read_IR@Values+1,w,c
  2056  0009B2  22DA               	addwfc	fsr2h,f,c
  2057  0009B4  CFDE F008          	movff	postinc2,??_read_IR
  2058  0009B8  CFDD F009          	movff	postdec2,??_read_IR+1
  2059  0009BC  0E06               	movlw	6
  2060  0009BE  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  2061  0009C0                     u1375:
  2062  0009C0  90D8               	bcf	status,0,c
  2063  0009C2  3209               	rrcf	??_read_IR+1,f,c
  2064  0009C4  3208               	rrcf	??_read_IR,f,c
  2065  0009C6  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  2066  0009C8  D7FB               	goto	u1375
  2067  0009CA  EE20 F002          	lfsr	2,2
  2068  0009CE  5006               	movf	read_IR@Values,w,c
  2069  0009D0  26D9               	addwf	fsr2l,f,c
  2070  0009D2  5007               	movf	read_IR@Values+1,w,c
  2071  0009D4  22DA               	addwfc	fsr2h,f,c
  2072  0009D6  C008  FFDE         	movff	??_read_IR,postinc2
  2073  0009DA  C009  FFDD         	movff	??_read_IR+1,postdec2
  2074                           
  2075                           ;ir.c: 59: if (Values->right > 200) {
  2076  0009DE  EE20 F002          	lfsr	2,2
  2077  0009E2  5006               	movf	read_IR@Values,w,c
  2078  0009E4  26D9               	addwf	fsr2l,f,c
  2079  0009E6  5007               	movf	read_IR@Values+1,w,c
  2080  0009E8  22DA               	addwfc	fsr2h,f,c
  2081  0009EA  0E01               	movlw	1
  2082  0009EC  50DB               	movf	plusw2,w,c
  2083  0009EE  E104               	bnz	u1380
  2084  0009F0  0EC9               	movlw	201
  2085  0009F2  5CDE               	subwf	postinc2,w,c
  2086  0009F4  A0D8               	btfss	status,0,c
  2087  0009F6  0012               	return	
  2088  0009F8                     u1380:
  2089                           
  2090                           ;ir.c: 60: Values->right = 200;
  2091  0009F8  EE20 F002          	lfsr	2,2
  2092  0009FC  5006               	movf	read_IR@Values,w,c
  2093  0009FE  26D9               	addwf	fsr2l,f,c
  2094  000A00  5007               	movf	read_IR@Values+1,w,c
  2095  000A02  22DA               	addwfc	fsr2h,f,c
  2096  000A04  0EC8               	movlw	200
  2097  000A06  6EDE               	movwf	postinc2,c
  2098  000A08  0E00               	movlw	0
  2099  000A0A  6EDD               	movwf	postdec2,c
  2100  000A0C  0012               	return	
  2101  000A0E                     __end_of_read_IR:
  2102                           	opt stack 0
  2103                           tblptru	equ	0xFF8
  2104                           prodh	equ	0xFF4
  2105                           prodl	equ	0xFF3
  2106                           intcon	equ	0xFF2
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postinc1	equ	0xFE6
  2110                           postdec1	equ	0xFE5
  2111                           fsr1h	equ	0xFE2
  2112                           fsr1l	equ	0xFE1
  2113                           indf2	equ	0xFDF
  2114                           postinc2	equ	0xFDE
  2115                           postdec2	equ	0xFDD
  2116                           plusw2	equ	0xFDB
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _print_RFID *****************
  2122 ;; Defined at:
  2123 ;;		line 27 in file "rfid.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  pa              2   10[COMRAM] PTR unsigned char 
  2126 ;;		 -> string_rfid(17), 
  2127 ;;  dis             2   12[COMRAM] PTR unsigned char 
  2128 ;;		 -> string_rfid(17), 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;		None
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  1    wreg      void 
  2133 ;; Registers used:
  2134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2140 ;;      Params:         4       0       0       0
  2141 ;;      Locals:         0       0       0       0
  2142 ;;      Temps:          6       0       0       0
  2143 ;;      Totals:        10       0       0       0
  2144 ;;Total ram usage:       10 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    5
  2147 ;; This function calls:
  2148 ;;		_LCD_clear
  2149 ;;		_LCD_line
  2150 ;;		_LCD_send
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text5
  2157  001178                     __ptext5:
  2158                           	opt stack 0
  2159  001178                     _print_RFID:
  2160                           	opt stack 25
  2161                           
  2162                           ;rfid.c: 29: LCD_clear();
  2163                           
  2164                           ;incstack = 0
  2165  001178  EC26  F00A         	call	_LCD_clear	;wreg free
  2166                           
  2167                           ;rfid.c: 30: LCD_line(1);
  2168  00117C  0E01               	movlw	1
  2169  00117E  ECC7  F009         	call	_LCD_line
  2170                           
  2171                           ;rfid.c: 31: while (*pa != 0x03) {
  2172  001182  D002               	goto	l360
  2173  001184                     
  2174                           ;rfid.c: 32: pa++;
  2175  001184  4A0B               	infsnz	print_RFID@pa,f,c
  2176  001186  2A0C               	incf	print_RFID@pa+1,f,c
  2177  001188                     l360:
  2178  001188  C00B  FFD9         	movff	print_RFID@pa,fsr2l
  2179  00118C  C00C  FFDA         	movff	print_RFID@pa+1,fsr2h
  2180  001190  0E03               	movlw	3
  2181  001192  18DE               	xorwf	postinc2,w,c
  2182  001194  B4D8               	btfsc	status,2,c
  2183  001196  D012               	goto	l363
  2184  001198  D7F5               	goto	l361
  2185  00119A                     
  2186                           ;rfid.c: 38: LCD_send(*(dis + 1), 1);
  2187  00119A  0E01               	movlw	1
  2188  00119C  6E08               	movwf	LCD_send@type,c
  2189  00119E  EE20 F001          	lfsr	2,1
  2190  0011A2  500D               	movf	print_RFID@dis,w,c
  2191  0011A4  26D9               	addwf	fsr2l,f,c
  2192  0011A6  500E               	movf	print_RFID@dis+1,w,c
  2193  0011A8  22DA               	addwfc	fsr2h,f,c
  2194  0011AA  50DF               	movf	indf2,w,c
  2195  0011AC  ECDF  F009         	call	_LCD_send
  2196                           
  2197                           ;rfid.c: 39: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2198  0011B0  0E21               	movlw	33
  2199  0011B2                     u1997:
  2200  0011B2  2EE8               	decfsz	wreg,f,c
  2201  0011B4  D7FE               	bra	u1997
  2202  0011B6  F000               	nop	
  2203                           
  2204                           ;rfid.c: 41: dis++;
  2205  0011B8  4A0D               	infsnz	print_RFID@dis,f,c
  2206  0011BA  2A0E               	incf	print_RFID@dis+1,f,c
  2207  0011BC                     l363:
  2208  0011BC  0EFE               	movlw	254
  2209  0011BE  6E0F               	movwf	??_print_RFID& (0+255),c
  2210  0011C0  0EFF               	movlw	255
  2211  0011C2  6E10               	movwf	(??_print_RFID+1)& (0+255),c
  2212  0011C4  C00B  F011         	movff	print_RFID@pa,??_print_RFID+2
  2213  0011C8  C00C  F012         	movff	print_RFID@pa+1,??_print_RFID+3
  2214  0011CC  500F               	movf	??_print_RFID,w,c
  2215  0011CE  2611               	addwf	??_print_RFID+2,f,c
  2216  0011D0  5010               	movf	??_print_RFID+1,w,c
  2217  0011D2  2212               	addwfc	??_print_RFID+3,f,c
  2218  0011D4  0E01               	movlw	1
  2219  0011D6  240D               	addwf	print_RFID@dis,w,c
  2220  0011D8  6E13               	movwf	(??_print_RFID+4)& (0+255),c
  2221  0011DA  0E00               	movlw	0
  2222  0011DC  200E               	addwfc	print_RFID@dis+1,w,c
  2223  0011DE  6E14               	movwf	(??_print_RFID+5)& (0+255),c
  2224  0011E0  5011               	movf	??_print_RFID+2,w,c
  2225  0011E2  5C13               	subwf	??_print_RFID+4,w,c
  2226  0011E4  5012               	movf	??_print_RFID+3,w,c
  2227  0011E6  5814               	subwfb	??_print_RFID+5,w,c
  2228  0011E8  A0D8               	btfss	status,0,c
  2229  0011EA  D7D7               	goto	l364
  2230                           
  2231                           ;rfid.c: 42: };rfid.c: 43: LCD_line(2);
  2232  0011EC  0E02               	movlw	2
  2233  0011EE  ECC7  F009         	call	_LCD_line
  2234  0011F2  0012               	return		;funcret
  2235  0011F4                     __end_of_print_RFID:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           prodh	equ	0xFF4
  2239                           prodl	equ	0xFF3
  2240                           intcon	equ	0xFF2
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           postinc1	equ	0xFE6
  2244                           postdec1	equ	0xFE5
  2245                           fsr1h	equ	0xFE2
  2246                           fsr1l	equ	0xFE1
  2247                           indf2	equ	0xFDF
  2248                           postinc2	equ	0xFDE
  2249                           postdec2	equ	0xFDD
  2250                           plusw2	equ	0xFDB
  2251                           fsr2h	equ	0xFDA
  2252                           fsr2l	equ	0xFD9
  2253                           status	equ	0xFD8
  2254                           
  2255 ;; *************** function _print_IR *****************
  2256 ;; Defined at:
  2257 ;;		line 123 in file "lcd.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  Values          2   31[COMRAM] PTR struct Sensor_ir
  2260 ;;		 -> main@Values(8), 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  buf            16   34[COMRAM] unsigned char [16]
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2272 ;;      Params:         2       0       0       0
  2273 ;;      Locals:        16       0       0       0
  2274 ;;      Temps:          1       0       0       0
  2275 ;;      Totals:        19       0       0       0
  2276 ;;Total ram usage:       19 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    5
  2279 ;; This function calls:
  2280 ;;		_LCD_clear
  2281 ;;		_LCD_line
  2282 ;;		_LCD_string
  2283 ;;		_sprintf
  2284 ;; This function is called by:
  2285 ;;		_main
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text6
  2290  000DEE                     __ptext6:
  2291                           	opt stack 0
  2292  000DEE                     _print_IR:
  2293                           	opt stack 25
  2294                           
  2295                           ;lcd.c: 124: LCD_clear();
  2296                           
  2297                           ;incstack = 0
  2298  000DEE  EC26  F00A         	call	_LCD_clear	;wreg free
  2299                           
  2300                           ;lcd.c: 125: char buf[16];;lcd.c: 126: LCD_line(1);
  2301  000DF2  0E01               	movlw	1
  2302  000DF4  ECC7  F009         	call	_LCD_line
  2303                           
  2304                           ;lcd.c: 127: sprintf(buf, "Left: %u", Values->left);
  2305  000DF8  0E23               	movlw	low print_IR@buf
  2306  000DFA  6E12               	movwf	sprintf@sp,c
  2307  000DFC  0E00               	movlw	high print_IR@buf
  2308  000DFE  6E13               	movwf	sprintf@sp+1,c
  2309  000E00  0E33               	movlw	low STR_1
  2310  000E02  6E14               	movwf	sprintf@f,c
  2311  000E04  0E03               	movlw	high STR_1
  2312  000E06  6E15               	movwf	sprintf@f+1,c
  2313  000E08  C020  FFD9         	movff	print_IR@Values,fsr2l
  2314  000E0C  C021  FFDA         	movff	print_IR@Values+1,fsr2h
  2315  000E10  CFDE F016          	movff	postinc2,?_sprintf+4
  2316  000E14  CFDD F017          	movff	postdec2,?_sprintf+5
  2317  000E18  ECC8  F005         	call	_sprintf	;wreg free
  2318                           
  2319                           ;lcd.c: 128: LCD_string(buf);
  2320  000E1C  0E23               	movlw	low print_IR@buf
  2321  000E1E  6E0A               	movwf	LCD_string@string,c
  2322  000E20  0E00               	movlw	high print_IR@buf
  2323  000E22  6E0B               	movwf	LCD_string@string+1,c
  2324  000E24  ECAF  F009         	call	_LCD_string	;wreg free
  2325                           
  2326                           ;lcd.c: 129: LCD_line(2);
  2327  000E28  0E02               	movlw	2
  2328  000E2A  ECC7  F009         	call	_LCD_line
  2329                           
  2330                           ;lcd.c: 130: sprintf(buf, "Right: %u", Values->right);
  2331  000E2E  0E23               	movlw	low print_IR@buf
  2332  000E30  6E12               	movwf	sprintf@sp,c
  2333  000E32  0E00               	movlw	high print_IR@buf
  2334  000E34  6E13               	movwf	sprintf@sp+1,c
  2335  000E36  0E29               	movlw	low STR_2
  2336  000E38  6E14               	movwf	sprintf@f,c
  2337  000E3A  0E03               	movlw	high STR_2
  2338  000E3C  6E15               	movwf	sprintf@f+1,c
  2339  000E3E  EE20 F002          	lfsr	2,2
  2340  000E42  5020               	movf	print_IR@Values,w,c
  2341  000E44  26D9               	addwf	fsr2l,f,c
  2342  000E46  5021               	movf	print_IR@Values+1,w,c
  2343  000E48  22DA               	addwfc	fsr2h,f,c
  2344  000E4A  CFDE F016          	movff	postinc2,?_sprintf+4
  2345  000E4E  CFDD F017          	movff	postdec2,?_sprintf+5
  2346  000E52  ECC8  F005         	call	_sprintf	;wreg free
  2347                           
  2348                           ;lcd.c: 131: LCD_string(buf);
  2349  000E56  0E23               	movlw	low print_IR@buf
  2350  000E58  6E0A               	movwf	LCD_string@string,c
  2351  000E5A  0E00               	movlw	high print_IR@buf
  2352  000E5C  6E0B               	movwf	LCD_string@string+1,c
  2353  000E5E  ECAF  F009         	call	_LCD_string	;wreg free
  2354                           
  2355                           ;lcd.c: 132: _delay((unsigned long)((50)*(8000000/4000.0)));
  2356  000E62  0E82               	movlw	130
  2357  000E64  6E22               	movwf	??_print_IR& (0+255),c
  2358  000E66  0EDE               	movlw	222
  2359  000E68                     u2007:
  2360  000E68  2EE8               	decfsz	wreg,f,c
  2361  000E6A  D7FE               	bra	u2007
  2362  000E6C  2E22               	decfsz	??_print_IR& (0+255),f,c
  2363  000E6E  D7FC               	bra	u2007
  2364                           
  2365                           ;lcd.c: 133: _delay((unsigned long)((50)*(8000000/4000.0)));
  2366  000E70  0E82               	movlw	130
  2367  000E72  6E22               	movwf	??_print_IR& (0+255),c
  2368  000E74  0EDE               	movlw	222
  2369  000E76                     u2017:
  2370  000E76  2EE8               	decfsz	wreg,f,c
  2371  000E78  D7FE               	bra	u2017
  2372  000E7A  2E22               	decfsz	??_print_IR& (0+255),f,c
  2373  000E7C  D7FC               	bra	u2017
  2374                           
  2375                           ;lcd.c: 134: _delay((unsigned long)((50)*(8000000/4000.0)));
  2376  000E7E  0E82               	movlw	130
  2377  000E80  6E22               	movwf	??_print_IR& (0+255),c
  2378  000E82  0EDE               	movlw	222
  2379  000E84                     u2027:
  2380  000E84  2EE8               	decfsz	wreg,f,c
  2381  000E86  D7FE               	bra	u2027
  2382  000E88  2E22               	decfsz	??_print_IR& (0+255),f,c
  2383  000E8A  D7FC               	bra	u2027
  2384                           
  2385                           ;lcd.c: 135: _delay((unsigned long)((50)*(8000000/4000.0)));
  2386  000E8C  0E82               	movlw	130
  2387  000E8E  6E22               	movwf	??_print_IR& (0+255),c
  2388  000E90  0EDE               	movlw	222
  2389  000E92                     u2037:
  2390  000E92  2EE8               	decfsz	wreg,f,c
  2391  000E94  D7FE               	bra	u2037
  2392  000E96  2E22               	decfsz	??_print_IR& (0+255),f,c
  2393  000E98  D7FC               	bra	u2037
  2394  000E9A  0012               	return		;funcret
  2395  000E9C                     __end_of_print_IR:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           intcon	equ	0xFF2
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postinc1	equ	0xFE6
  2404                           postdec1	equ	0xFE5
  2405                           fsr1h	equ	0xFE2
  2406                           fsr1l	equ	0xFE1
  2407                           indf2	equ	0xFDF
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _sprintf *****************
  2416 ;; Defined at:
  2417 ;;		line 500 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/doprnt.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  sp              2   17[COMRAM] PTR unsigned char 
  2420 ;;		 -> check_sum@buf_cs(16), main@buf(16), print_IR@buf(16), 
  2421 ;;  f               2   19[COMRAM] PTR const unsigned char 
  2422 ;;		 -> STR_5(16), STR_4(14), STR_3(6), STR_2(10), 
  2423 ;;		 -> STR_1(9), 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  tmpval          4    0        struct .
  2426 ;;  cp              3    0        PTR const unsigned char 
  2427 ;;  val             2   28[COMRAM] unsigned int 
  2428 ;;  ap              2   25[COMRAM] PTR void [1]
  2429 ;;		 -> ?_sprintf(2), 
  2430 ;;  len             2    0        unsigned int 
  2431 ;;  c               1   30[COMRAM] unsigned char 
  2432 ;;  flag            1   27[COMRAM] unsigned char 
  2433 ;;  prec            1   24[COMRAM] char 
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  2   17[COMRAM] int 
  2436 ;; Registers used:
  2437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2443 ;;      Params:         6       0       0       0
  2444 ;;      Locals:         7       0       0       0
  2445 ;;      Temps:          1       0       0       0
  2446 ;;      Totals:        14       0       0       0
  2447 ;;Total ram usage:       14 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    2
  2450 ;; This function calls:
  2451 ;;		___lwdiv
  2452 ;;		___lwmod
  2453 ;; This function is called by:
  2454 ;;		_print_IR
  2455 ;;		_main
  2456 ;;		_check_sum
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text7
  2461  000B90                     __ptext7:
  2462                           	opt stack 0
  2463  000B90                     _sprintf:
  2464                           	opt stack 28
  2465                           
  2466                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  2467                           
  2468                           ;incstack = 0
  2469  000B90  0E16               	movlw	low (?_sprintf+4)
  2470  000B92  6E1A               	movwf	sprintf@ap,c
  2471  000B94  0E00               	movlw	high (?_sprintf+4)
  2472  000B96  6E1B               	movwf	sprintf@ap+1,c
  2473                           
  2474                           ;doprnt.c: 548: while((c = *f++)) {
  2475  000B98  D0A2               	goto	u1190
  2476  000B9A                     
  2477                           ;doprnt.c: 550: if(c != '%')
  2478  000B9A  0E25               	movlw	37
  2479  000B9C  181F               	xorwf	sprintf@c,w,c
  2480  000B9E  B4D8               	btfsc	status,2,c
  2481  000BA0  D009               	goto	l414
  2482                           
  2483                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  2484  000BA2  C012  FFD9         	movff	sprintf@sp,fsr2l
  2485  000BA6  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2486  000BAA  C01F  FFDF         	movff	sprintf@c,indf2
  2487  000BAE  4A12               	infsnz	sprintf@sp,f,c
  2488  000BB0  2A13               	incf	sprintf@sp+1,f,c
  2489                           
  2490                           ;doprnt.c: 554: continue;
  2491  000BB2  D095               	goto	u1190
  2492  000BB4                     l414:
  2493                           
  2494                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  2495  000BB4  0E00               	movlw	0
  2496  000BB6  6E1C               	movwf	sprintf@flag,c
  2497                           
  2498                           ;doprnt.c: 654: switch(c = *f++) {
  2499  000BB8  D002               	goto	l415
  2500  000BBA                     
  2501                           ;doprnt.c: 837: flag |= 0x40;
  2502  000BBA  8C1C               	bsf	sprintf@flag,6,c
  2503                           
  2504                           ;doprnt.c: 841: }
  2505                           
  2506                           ;doprnt.c: 838: break;
  2507  000BBC  D017               	goto	l420
  2508  000BBE                     l415:
  2509  000BBE  C014  FFF6         	movff	sprintf@f,tblptrl
  2510  000BC2  C015  FFF7         	movff	sprintf@f+1,tblptrh
  2511  000BC6  4A14               	infsnz	sprintf@f,f,c
  2512  000BC8  2A15               	incf	sprintf@f+1,f,c
  2513  000BCA                     	if	0	;tblptru may be non-zero
  2514  000BCA                     	endif
  2515  000BCA                     	if	0	;tblptru may be non-zero
  2516  000BCA                     	endif
  2517  000BCA  0008               	tblrd		*
  2518  000BCC  CFF5 F01F          	movff	tablat,sprintf@c
  2519  000BD0  501F               	movf	sprintf@c,w,c
  2520                           
  2521                           ; Switch size 1, requested type "space"
  2522                           ; Number of cases is 4, Range of values is 0 to 117
  2523                           ; switch strategies available:
  2524                           ; Name         Instructions Cycles
  2525                           ; simple_byte           13     7 (average)
  2526                           ;	Chosen strategy is simple_byte
  2527  000BD2  0A00               	xorlw	0	; case 0
  2528  000BD4  B4D8               	btfsc	status,2,c
  2529  000BD6  D08F               	goto	u1200
  2530  000BD8  0A64               	xorlw	100	; case 100
  2531  000BDA  B4D8               	btfsc	status,2,c
  2532  000BDC  D007               	goto	l420
  2533  000BDE  0A0D               	xorlw	13	; case 105
  2534  000BE0  B4D8               	btfsc	status,2,c
  2535  000BE2  D004               	goto	l420
  2536  000BE4  0A1C               	xorlw	28	; case 117
  2537  000BE6  B4D8               	btfsc	status,2,c
  2538  000BE8  D7E8               	goto	l422
  2539  000BEA  D079               	goto	u1190
  2540  000BEC                     l420:
  2541                           
  2542                           ;doprnt.c: 1270: if((flag & 0x40) == 0x00)
  2543  000BEC  BC1C               	btfsc	sprintf@flag,6,c
  2544  000BEE  D015               	goto	l423
  2545                           
  2546                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2547  000BF0  C01A  FFD9         	movff	sprintf@ap,fsr2l
  2548  000BF4  C01B  FFDA         	movff	sprintf@ap+1,fsr2h
  2549  000BF8  CFDE F01D          	movff	postinc2,sprintf@val
  2550  000BFC  CFDD F01E          	movff	postdec2,sprintf@val+1
  2551  000C00  0E02               	movlw	2
  2552  000C02  261A               	addwf	sprintf@ap,f,c
  2553  000C04  0E00               	movlw	0
  2554  000C06  221B               	addwfc	sprintf@ap+1,f,c
  2555                           
  2556                           ;doprnt.c: 1280: if((int)val < 0) {
  2557  000C08  AE1E               	btfss	sprintf@val+1,7,c
  2558  000C0A  D013               	goto	l425
  2559                           
  2560                           ;doprnt.c: 1281: flag |= 0x03;
  2561  000C0C  0E03               	movlw	3
  2562  000C0E  121C               	iorwf	sprintf@flag,f,c
  2563                           
  2564                           ;doprnt.c: 1282: val = -val;
  2565  000C10  6C1D               	negf	sprintf@val,c
  2566  000C12  1E1E               	comf	sprintf@val+1,f,c
  2567  000C14  B0D8               	btfsc	status,0,c
  2568  000C16  2A1E               	incf	sprintf@val+1,f,c
  2569                           
  2570                           ;doprnt.c: 1283: };doprnt.c: 1285: }
  2571  000C18  D00C               	goto	l425
  2572  000C1A                     l423:
  2573                           
  2574                           ;doprnt.c: 1287: else;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  2575  000C1A  C01A  FFD9         	movff	sprintf@ap,fsr2l
  2576  000C1E  C01B  FFDA         	movff	sprintf@ap+1,fsr2h
  2577  000C22  CFDE F01D          	movff	postinc2,sprintf@val
  2578  000C26  CFDD F01E          	movff	postdec2,sprintf@val+1
  2579  000C2A  0E02               	movlw	2
  2580  000C2C  261A               	addwf	sprintf@ap,f,c
  2581  000C2E  0E00               	movlw	0
  2582  000C30  221B               	addwfc	sprintf@ap+1,f,c
  2583  000C32                     l425:
  2584                           
  2585                           ;doprnt.c: 1306: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  2586  000C32  0E01               	movlw	1
  2587  000C34  6E1F               	movwf	sprintf@c,c
  2588  000C36                     l2100:
  2589  000C36  0E05               	movlw	5
  2590  000C38  181F               	xorwf	sprintf@c,w,c
  2591  000C3A  B4D8               	btfsc	status,2,c
  2592  000C3C  D012               	goto	u1170
  2593                           
  2594                           ;doprnt.c: 1325: if(val < dpowers[c])
  2595  000C3E  501F               	movf	sprintf@c,w,c
  2596  000C40  0D02               	mullw	2
  2597  000C42  0E01               	movlw	low _dpowers
  2598  000C44  24F3               	addwf	prodl,w,c
  2599  000C46  6EF6               	movwf	tblptrl,c
  2600  000C48  0E03               	movlw	high _dpowers
  2601  000C4A  20F4               	addwfc	prodh,w,c
  2602  000C4C  6EF7               	movwf	tblptrh,c
  2603  000C4E                     	if	0	;There are less than 3 active tblptr bytes
  2604  000C4E                     	endif
  2605  000C4E  0009               	tblrd		*+
  2606  000C50  50F5               	movf	tablat,w,c
  2607  000C52  5C1D               	subwf	sprintf@val,w,c
  2608  000C54  0009               	tblrd		*+
  2609  000C56  50F5               	movf	tablat,w,c
  2610  000C58  581E               	subwfb	sprintf@val+1,w,c
  2611  000C5A  A0D8               	btfss	status,0,c
  2612  000C5C  D002               	goto	u1170
  2613                           
  2614                           ;doprnt.c: 1326: break;
  2615  000C5E  2A1F               	incf	sprintf@c,f,c
  2616  000C60  D7EA               	goto	l2100
  2617  000C62                     u1170:
  2618                           
  2619                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  2620  000C62  C01C  F018         	movff	sprintf@flag,??_sprintf
  2621  000C66  0E03               	movlw	3
  2622  000C68  1618               	andwf	??_sprintf,f,c
  2623  000C6A  B4D8               	btfsc	status,2,c
  2624  000C6C  D008               	goto	l429
  2625                           
  2626                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  2627  000C6E  C012  FFD9         	movff	sprintf@sp,fsr2l
  2628  000C72  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2629  000C76  0E2D               	movlw	45
  2630  000C78  6EDF               	movwf	indf2,c
  2631  000C7A  4A12               	infsnz	sprintf@sp,f,c
  2632  000C7C  2A13               	incf	sprintf@sp+1,f,c
  2633  000C7E                     l429:
  2634                           
  2635                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  2636  000C7E  C01F  F019         	movff	sprintf@c,sprintf@prec
  2637                           
  2638                           ;doprnt.c: 1493: while(prec--) {
  2639  000C82  D029               	goto	l430
  2640  000C84                     
  2641                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  2642  000C84  5019               	movf	sprintf@prec,w,c
  2643  000C86  0D02               	mullw	2
  2644  000C88  0E01               	movlw	low _dpowers
  2645  000C8A  24F3               	addwf	prodl,w,c
  2646  000C8C  6EF6               	movwf	tblptrl,c
  2647  000C8E  0E03               	movlw	high _dpowers
  2648  000C90  20F4               	addwfc	prodh,w,c
  2649  000C92  6EF7               	movwf	tblptrh,c
  2650  000C94                     	if	0	;There are less than 3 active tblptr bytes
  2651  000C94                     	endif
  2652  000C94  0009               	tblrd		*+
  2653  000C96  CFF5 F008          	movff	tablat,___lwdiv@divisor
  2654  000C9A  000A               	tblrd		*-
  2655  000C9C  CFF5 F009          	movff	tablat,___lwdiv@divisor+1
  2656  000CA0  C01D  F006         	movff	sprintf@val,___lwdiv@dividend
  2657  000CA4  C01E  F007         	movff	sprintf@val+1,___lwdiv@dividend+1
  2658  000CA8  EC65  F009         	call	___lwdiv	;wreg free
  2659  000CAC  C006  F00D         	movff	?___lwdiv,___lwmod@dividend
  2660  000CB0  C007  F00E         	movff	?___lwdiv+1,___lwmod@dividend+1
  2661  000CB4  0E00               	movlw	0
  2662  000CB6  6E10               	movwf	___lwmod@divisor+1,c
  2663  000CB8  0E0A               	movlw	10
  2664  000CBA  6E0F               	movwf	___lwmod@divisor,c
  2665  000CBC  EC8E  F009         	call	___lwmod	;wreg free
  2666  000CC0  500D               	movf	?___lwmod,w,c
  2667  000CC2  0F30               	addlw	48
  2668  000CC4  6E1F               	movwf	sprintf@c,c
  2669                           
  2670                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  2671  000CC6  C012  FFD9         	movff	sprintf@sp,fsr2l
  2672  000CCA  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2673  000CCE  C01F  FFDF         	movff	sprintf@c,indf2
  2674  000CD2  4A12               	infsnz	sprintf@sp,f,c
  2675  000CD4  2A13               	incf	sprintf@sp+1,f,c
  2676  000CD6                     l430:
  2677  000CD6  0619               	decf	sprintf@prec,f,c
  2678  000CD8  2819               	incf	sprintf@prec,w,c
  2679  000CDA  A4D8               	btfss	status,2,c
  2680  000CDC  D7D3               	goto	l431
  2681  000CDE                     u1190:
  2682  000CDE  C014  FFF6         	movff	sprintf@f,tblptrl
  2683  000CE2  C015  FFF7         	movff	sprintf@f+1,tblptrh
  2684  000CE6  4A14               	infsnz	sprintf@f,f,c
  2685  000CE8  2A15               	incf	sprintf@f+1,f,c
  2686  000CEA                     	if	0	;tblptru may be non-zero
  2687  000CEA                     	endif
  2688  000CEA                     	if	0	;tblptru may be non-zero
  2689  000CEA                     	endif
  2690  000CEA  0008               	tblrd		*
  2691  000CEC  CFF5 F01F          	movff	tablat,sprintf@c
  2692  000CF0  501F               	movf	sprintf@c,w,c
  2693  000CF2  A4D8               	btfss	status,2,c
  2694  000CF4  D752               	goto	l413
  2695  000CF6                     u1200:
  2696                           
  2697                           ;doprnt.c: 1557: *sp = 0;
  2698                           
  2699                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  2700  000CF6  C012  FFD9         	movff	sprintf@sp,fsr2l
  2701  000CFA  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2702  000CFE  0E00               	movlw	0
  2703  000D00  6EDF               	movwf	indf2,c
  2704  000D02  0012               	return	
  2705  000D04                     __end_of_sprintf:
  2706                           	opt stack 0
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           intcon	equ	0xFF2
  2714                           postinc0	equ	0xFEE
  2715                           wreg	equ	0xFE8
  2716                           postinc1	equ	0xFE6
  2717                           postdec1	equ	0xFE5
  2718                           fsr1h	equ	0xFE2
  2719                           fsr1l	equ	0xFE1
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           plusw2	equ	0xFDB
  2724                           fsr2h	equ	0xFDA
  2725                           fsr2l	equ	0xFD9
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function ___lwmod *****************
  2729 ;; Defined at:
  2730 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/lwmod.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  dividend        2   12[COMRAM] unsigned int 
  2733 ;;  divisor         2   14[COMRAM] unsigned int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  counter         1   16[COMRAM] unsigned char 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2   12[COMRAM] unsigned int 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2745 ;;      Params:         4       0       0       0
  2746 ;;      Locals:         1       0       0       0
  2747 ;;      Temps:          0       0       0       0
  2748 ;;      Totals:         5       0       0       0
  2749 ;;Total ram usage:        5 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    1
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_sprintf
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text8
  2760  00131C                     __ptext8:
  2761                           	opt stack 0
  2762  00131C                     ___lwmod:
  2763                           	opt stack 28
  2764                           
  2765                           ;incstack = 0
  2766  00131C  500F               	movf	___lwmod@divisor,w,c
  2767  00131E  1010               	iorwf	___lwmod@divisor+1,w,c
  2768  001320  B4D8               	btfsc	status,2,c
  2769  001322  D018               	goto	l932
  2770  001324  0E01               	movlw	1
  2771  001326  6E11               	movwf	___lwmod@counter,c
  2772  001328  D004               	goto	l927
  2773  00132A  90D8               	bcf	status,0,c
  2774  00132C  360F               	rlcf	___lwmod@divisor,f,c
  2775  00132E  3610               	rlcf	___lwmod@divisor+1,f,c
  2776  001330  2A11               	incf	___lwmod@counter,f,c
  2777  001332                     l927:
  2778  001332  AE10               	btfss	___lwmod@divisor+1,7,c
  2779  001334  D7FA               	goto	l928
  2780  001336                     u1070:
  2781  001336  500F               	movf	___lwmod@divisor,w,c
  2782  001338  5C0D               	subwf	___lwmod@dividend,w,c
  2783  00133A  5010               	movf	___lwmod@divisor+1,w,c
  2784  00133C  580E               	subwfb	___lwmod@dividend+1,w,c
  2785  00133E  A0D8               	btfss	status,0,c
  2786  001340  D004               	goto	l931
  2787  001342  500F               	movf	___lwmod@divisor,w,c
  2788  001344  5E0D               	subwf	___lwmod@dividend,f,c
  2789  001346  5010               	movf	___lwmod@divisor+1,w,c
  2790  001348  5A0E               	subwfb	___lwmod@dividend+1,f,c
  2791  00134A                     l931:
  2792  00134A  90D8               	bcf	status,0,c
  2793  00134C  3210               	rrcf	___lwmod@divisor+1,f,c
  2794  00134E  320F               	rrcf	___lwmod@divisor,f,c
  2795  001350  2E11               	decfsz	___lwmod@counter,f,c
  2796  001352  D7F1               	goto	u1070
  2797  001354                     l932:
  2798  001354  C00D  F00D         	movff	___lwmod@dividend,?___lwmod
  2799  001358  C00E  F00E         	movff	___lwmod@dividend+1,?___lwmod+1
  2800  00135C  0012               	return		;funcret
  2801  00135E                     __end_of___lwmod:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           intcon	equ	0xFF2
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           postinc1	equ	0xFE6
  2813                           postdec1	equ	0xFE5
  2814                           fsr1h	equ	0xFE2
  2815                           fsr1l	equ	0xFE1
  2816                           indf2	equ	0xFDF
  2817                           postinc2	equ	0xFDE
  2818                           postdec2	equ	0xFDD
  2819                           plusw2	equ	0xFDB
  2820                           fsr2h	equ	0xFDA
  2821                           fsr2l	equ	0xFD9
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function ___lwdiv *****************
  2825 ;; Defined at:
  2826 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/lwdiv.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;  dividend        2    5[COMRAM] unsigned int 
  2829 ;;  divisor         2    7[COMRAM] unsigned int 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  quotient        2    9[COMRAM] unsigned int 
  2832 ;;  counter         1   11[COMRAM] unsigned char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  2    5[COMRAM] unsigned int 
  2835 ;; Registers used:
  2836 ;;		wreg, status,2, status,0
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2842 ;;      Params:         4       0       0       0
  2843 ;;      Locals:         3       0       0       0
  2844 ;;      Temps:          0       0       0       0
  2845 ;;      Totals:         7       0       0       0
  2846 ;;Total ram usage:        7 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    1
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_sprintf
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text9
  2857  0012CA                     __ptext9:
  2858                           	opt stack 0
  2859  0012CA                     ___lwdiv:
  2860                           	opt stack 28
  2861                           
  2862                           ;incstack = 0
  2863  0012CA  0E00               	movlw	0
  2864  0012CC  6E0B               	movwf	___lwdiv@quotient+1,c
  2865  0012CE  0E00               	movlw	0
  2866  0012D0  6E0A               	movwf	___lwdiv@quotient,c
  2867  0012D2  5008               	movf	___lwdiv@divisor,w,c
  2868  0012D4  1009               	iorwf	___lwdiv@divisor+1,w,c
  2869  0012D6  B4D8               	btfsc	status,2,c
  2870  0012D8  D01C               	goto	l922
  2871  0012DA  0E01               	movlw	1
  2872  0012DC  6E0C               	movwf	___lwdiv@counter,c
  2873  0012DE  D004               	goto	l917
  2874  0012E0  90D8               	bcf	status,0,c
  2875  0012E2  3608               	rlcf	___lwdiv@divisor,f,c
  2876  0012E4  3609               	rlcf	___lwdiv@divisor+1,f,c
  2877  0012E6  2A0C               	incf	___lwdiv@counter,f,c
  2878  0012E8                     l917:
  2879  0012E8  AE09               	btfss	___lwdiv@divisor+1,7,c
  2880  0012EA  D7FA               	goto	l918
  2881  0012EC                     u1040:
  2882  0012EC  90D8               	bcf	status,0,c
  2883  0012EE  360A               	rlcf	___lwdiv@quotient,f,c
  2884  0012F0  360B               	rlcf	___lwdiv@quotient+1,f,c
  2885  0012F2  5008               	movf	___lwdiv@divisor,w,c
  2886  0012F4  5C06               	subwf	___lwdiv@dividend,w,c
  2887  0012F6  5009               	movf	___lwdiv@divisor+1,w,c
  2888  0012F8  5807               	subwfb	___lwdiv@dividend+1,w,c
  2889  0012FA  A0D8               	btfss	status,0,c
  2890  0012FC  D005               	goto	l921
  2891  0012FE  5008               	movf	___lwdiv@divisor,w,c
  2892  001300  5E06               	subwf	___lwdiv@dividend,f,c
  2893  001302  5009               	movf	___lwdiv@divisor+1,w,c
  2894  001304  5A07               	subwfb	___lwdiv@dividend+1,f,c
  2895  001306  800A               	bsf	___lwdiv@quotient,0,c
  2896  001308                     l921:
  2897  001308  90D8               	bcf	status,0,c
  2898  00130A  3209               	rrcf	___lwdiv@divisor+1,f,c
  2899  00130C  3208               	rrcf	___lwdiv@divisor,f,c
  2900  00130E  2E0C               	decfsz	___lwdiv@counter,f,c
  2901  001310  D7ED               	goto	u1040
  2902  001312                     l922:
  2903  001312  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  2904  001316  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2905  00131A  0012               	return		;funcret
  2906  00131C                     __end_of___lwdiv:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           intcon	equ	0xFF2
  2915                           postinc0	equ	0xFEE
  2916                           wreg	equ	0xFE8
  2917                           postinc1	equ	0xFE6
  2918                           postdec1	equ	0xFE5
  2919                           fsr1h	equ	0xFE2
  2920                           fsr1l	equ	0xFE1
  2921                           indf2	equ	0xFDF
  2922                           postinc2	equ	0xFDE
  2923                           postdec2	equ	0xFDD
  2924                           plusw2	equ	0xFDB
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _LCD_string *****************
  2930 ;; Defined at:
  2931 ;;		line 101 in file "lcd.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  string          2    9[COMRAM] PTR unsigned char 
  2934 ;;		 -> check_sum@buf_cs(16), main@buf(16), print_IR@buf(16), 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;		None
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2946 ;;      Params:         2       0       0       0
  2947 ;;      Locals:         0       0       0       0
  2948 ;;      Temps:          0       0       0       0
  2949 ;;      Totals:         2       0       0       0
  2950 ;;Total ram usage:        2 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    4
  2953 ;; This function calls:
  2954 ;;		_LCD_send
  2955 ;; This function is called by:
  2956 ;;		_print_IR
  2957 ;;		_main
  2958 ;;		_check_sum
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text10
  2963  00135E                     __ptext10:
  2964                           	opt stack 0
  2965  00135E                     _LCD_string:
  2966                           	opt stack 25
  2967                           
  2968                           ;lcd.c: 102: while (*string != 0) {
  2969                           
  2970                           ;incstack = 0
  2971  00135E  D00F               	goto	l49
  2972  001360                     
  2973                           ;lcd.c: 105: LCD_send(*string++, 1);
  2974  001360  0E01               	movlw	1
  2975  001362  6E08               	movwf	LCD_send@type,c
  2976  001364  C00A  FFD9         	movff	LCD_string@string,fsr2l
  2977  001368  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  2978  00136C  50DF               	movf	indf2,w,c
  2979  00136E  ECDF  F009         	call	_LCD_send
  2980  001372  4A0A               	infsnz	LCD_string@string,f,c
  2981  001374  2A0B               	incf	LCD_string@string+1,f,c
  2982                           
  2983                           ;lcd.c: 106: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2984  001376  0E21               	movlw	33
  2985  001378                     u2047:
  2986  001378  2EE8               	decfsz	wreg,f,c
  2987  00137A  D7FE               	bra	u2047
  2988  00137C  F000               	nop	
  2989  00137E                     l49:
  2990  00137E  C00A  FFD9         	movff	LCD_string@string,fsr2l
  2991  001382  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  2992  001386  50DF               	movf	indf2,w,c
  2993  001388  B4D8               	btfsc	status,2,c
  2994  00138A  0012               	return	
  2995  00138C  D7E9               	goto	l50
  2996  00138E                     __end_of_LCD_string:
  2997                           	opt stack 0
  2998                           tblptru	equ	0xFF8
  2999                           tblptrh	equ	0xFF7
  3000                           tblptrl	equ	0xFF6
  3001                           tablat	equ	0xFF5
  3002                           prodh	equ	0xFF4
  3003                           prodl	equ	0xFF3
  3004                           intcon	equ	0xFF2
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           postinc1	equ	0xFE6
  3008                           postdec1	equ	0xFE5
  3009                           fsr1h	equ	0xFE2
  3010                           fsr1l	equ	0xFE1
  3011                           indf2	equ	0xFDF
  3012                           postinc2	equ	0xFDE
  3013                           postdec2	equ	0xFDD
  3014                           plusw2	equ	0xFDB
  3015                           fsr2h	equ	0xFDA
  3016                           fsr2l	equ	0xFD9
  3017                           status	equ	0xFD8
  3018                           
  3019 ;; *************** function _LCD_line *****************
  3020 ;; Defined at:
  3021 ;;		line 89 in file "lcd.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;  line            1    wreg     unsigned char 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  line            1    9[COMRAM] unsigned char 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, status,0, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3035 ;;      Params:         0       0       0       0
  3036 ;;      Locals:         1       0       0       0
  3037 ;;      Temps:          0       0       0       0
  3038 ;;      Totals:         1       0       0       0
  3039 ;;Total ram usage:        1 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    4
  3042 ;; This function calls:
  3043 ;;		_LCD_send
  3044 ;; This function is called by:
  3045 ;;		_print_IR
  3046 ;;		_main
  3047 ;;		_print_RFID
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text11
  3052  00138E                     __ptext11:
  3053                           	opt stack 0
  3054  00138E                     _LCD_line:
  3055                           	opt stack 25
  3056                           
  3057                           ;incstack = 0
  3058                           ;LCD_line@line stored from wreg
  3059  00138E  6E0A               	movwf	LCD_line@line,c
  3060                           
  3061                           ;lcd.c: 90: if (line == 1) {
  3062  001390  040A               	decf	LCD_line@line,w,c
  3063  001392  A4D8               	btfss	status,2,c
  3064  001394  D006               	goto	l43
  3065                           
  3066                           ;lcd.c: 91: LCD_send(0x80, 0);
  3067  001396  0E00               	movlw	0
  3068  001398  6E08               	movwf	LCD_send@type,c
  3069  00139A  0E80               	movlw	128
  3070  00139C  ECDF  F009         	call	_LCD_send
  3071                           
  3072                           ;lcd.c: 92: } else if (line == 2) {
  3073  0013A0  D009               	goto	l45
  3074  0013A2                     l43:
  3075  0013A2  0E02               	movlw	2
  3076  0013A4  180A               	xorwf	LCD_line@line,w,c
  3077  0013A6  A4D8               	btfss	status,2,c
  3078  0013A8  D005               	goto	l45
  3079                           
  3080                           ;lcd.c: 93: LCD_send(0xC0, 0);
  3081  0013AA  0E00               	movlw	0
  3082  0013AC  6E08               	movwf	LCD_send@type,c
  3083  0013AE  0EC0               	movlw	192
  3084  0013B0  ECDF  F009         	call	_LCD_send
  3085  0013B4                     l45:
  3086                           
  3087                           ;lcd.c: 94: };lcd.c: 95: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3088  0013B4  0E21               	movlw	33
  3089  0013B6                     u2057:
  3090  0013B6  2EE8               	decfsz	wreg,f,c
  3091  0013B8  D7FE               	bra	u2057
  3092  0013BA  F000               	nop	
  3093  0013BC  0012               	return		;funcret
  3094  0013BE                     __end_of_LCD_line:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           prodh	equ	0xFF4
  3101                           prodl	equ	0xFF3
  3102                           intcon	equ	0xFF2
  3103                           postinc0	equ	0xFEE
  3104                           wreg	equ	0xFE8
  3105                           postinc1	equ	0xFE6
  3106                           postdec1	equ	0xFE5
  3107                           fsr1h	equ	0xFE2
  3108                           fsr1l	equ	0xFE1
  3109                           indf2	equ	0xFDF
  3110                           postinc2	equ	0xFDE
  3111                           postdec2	equ	0xFDD
  3112                           plusw2	equ	0xFDB
  3113                           fsr2h	equ	0xFDA
  3114                           fsr2l	equ	0xFD9
  3115                           status	equ	0xFD8
  3116                           
  3117 ;; *************** function _LCD_clear *****************
  3118 ;; Defined at:
  3119 ;;		line 115 in file "lcd.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3133 ;;      Params:         0       0       0       0
  3134 ;;      Locals:         0       0       0       0
  3135 ;;      Temps:          1       0       0       0
  3136 ;;      Totals:         1       0       0       0
  3137 ;;Total ram usage:        1 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    4
  3140 ;; This function calls:
  3141 ;;		_LCD_send
  3142 ;; This function is called by:
  3143 ;;		_print_IR
  3144 ;;		_print_RFID
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text12
  3149  00144C                     __ptext12:
  3150                           	opt stack 0
  3151  00144C                     _LCD_clear:
  3152                           	opt stack 25
  3153                           
  3154                           ;lcd.c: 116: LCD_send(0b00000001, 0);
  3155                           
  3156                           ;incstack = 0
  3157  00144C  0E00               	movlw	0
  3158  00144E  6E08               	movwf	LCD_send@type,c
  3159  001450  0E01               	movlw	1
  3160  001452  ECDF  F009         	call	_LCD_send
  3161                           
  3162                           ;lcd.c: 117: _delay((unsigned long)((2)*(8000000/4000.0)));
  3163  001456  0E06               	movlw	6
  3164  001458  6E0A               	movwf	??_LCD_clear& (0+255),c
  3165  00145A  0E30               	movlw	48
  3166  00145C                     u2067:
  3167  00145C  2EE8               	decfsz	wreg,f,c
  3168  00145E  D7FE               	bra	u2067
  3169  001460  2E0A               	decfsz	??_LCD_clear& (0+255),f,c
  3170  001462  D7FC               	bra	u2067
  3171  001464  D000               	nop2	
  3172  001466  0012               	return		;funcret
  3173  001468                     __end_of_LCD_clear:
  3174                           	opt stack 0
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           prodh	equ	0xFF4
  3180                           prodl	equ	0xFF3
  3181                           intcon	equ	0xFF2
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           postinc1	equ	0xFE6
  3185                           postdec1	equ	0xFE5
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           postinc2	equ	0xFDE
  3190                           postdec2	equ	0xFDD
  3191                           plusw2	equ	0xFDB
  3192                           fsr2h	equ	0xFDA
  3193                           fsr2l	equ	0xFD9
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _interrupt_EUSART *****************
  3197 ;; Defined at:
  3198 ;;		line 14 in file "rfid.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;		None
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;		None
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3212 ;;      Params:         0       0       0       0
  3213 ;;      Locals:         0       0       0       0
  3214 ;;      Temps:          0       0       0       0
  3215 ;;      Totals:         0       0       0       0
  3216 ;;Total ram usage:        0 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    1
  3219 ;; This function calls:
  3220 ;;		Nothing
  3221 ;; This function is called by:
  3222 ;;		_main
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text13
  3227  0014CC                     __ptext13:
  3228                           	opt stack 0
  3229  0014CC                     _interrupt_EUSART:
  3230                           	opt stack 29
  3231                           
  3232                           ;rfid.c: 15: RCREG;
  3233                           
  3234                           ;incstack = 0
  3235  0014CC  50AE               	movf	4014,w,c	;volatile
  3236                           
  3237                           ;rfid.c: 16: RCREG;
  3238  0014CE  50AE               	movf	4014,w,c	;volatile
  3239                           
  3240                           ;rfid.c: 17: RCREG;
  3241  0014D0  50AE               	movf	4014,w,c	;volatile
  3242                           
  3243                           ;rfid.c: 18: PIE1bits.RCIE = 1;
  3244  0014D2  8A9D               	bsf	3997,5,c	;volatile
  3245                           
  3246                           ;rfid.c: 19: INTCONbits.GIEL = 1;
  3247  0014D4  8CF2               	bsf	intcon,6,c	;volatile
  3248                           
  3249                           ;rfid.c: 20: INTCONbits.GIEH = 1;
  3250  0014D6  8EF2               	bsf	intcon,7,c	;volatile
  3251                           
  3252                           ;rfid.c: 21: INTCON3bits.INT2IE = 1;
  3253  0014D8  88F0               	bsf	intcon3,4,c	;volatile
  3254                           
  3255                           ;rfid.c: 22: INTCONbits.INT0IE = 1;
  3256  0014DA  88F2               	bsf	intcon,4,c	;volatile
  3257                           
  3258                           ;rfid.c: 23: INTCON3bits.INT2IE = 1;
  3259  0014DC  88F0               	bsf	intcon3,4,c	;volatile
  3260  0014DE  0012               	return		;funcret
  3261  0014E0                     __end_of_interrupt_EUSART:
  3262                           	opt stack 0
  3263                           tblptru	equ	0xFF8
  3264                           tblptrh	equ	0xFF7
  3265                           tblptrl	equ	0xFF6
  3266                           tablat	equ	0xFF5
  3267                           prodh	equ	0xFF4
  3268                           prodl	equ	0xFF3
  3269                           intcon	equ	0xFF2
  3270                           intcon3	equ	0xFF0
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           postinc1	equ	0xFE6
  3274                           postdec1	equ	0xFE5
  3275                           fsr1h	equ	0xFE2
  3276                           fsr1l	equ	0xFE1
  3277                           indf2	equ	0xFDF
  3278                           postinc2	equ	0xFDE
  3279                           postdec2	equ	0xFDD
  3280                           plusw2	equ	0xFDB
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _init_capture *****************
  3286 ;; Defined at:
  3287 ;;		line 25 in file "ir.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      void 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3301 ;;      Params:         0       0       0       0
  3302 ;;      Locals:         0       0       0       0
  3303 ;;      Temps:          0       0       0       0
  3304 ;;      Totals:         0       0       0       0
  3305 ;;Total ram usage:        0 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    1
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text14
  3316  001468                     __ptext14:
  3317                           	opt stack 0
  3318  001468                     _init_capture:
  3319                           	opt stack 29
  3320                           
  3321                           ;ir.c: 27: LATA = 0;
  3322                           
  3323                           ;incstack = 0
  3324  001468  0E00               	movlw	0
  3325  00146A  6E89               	movwf	3977,c	;volatile
  3326                           
  3327                           ;ir.c: 28: TRISA = 0b00001100;
  3328  00146C  0E0C               	movlw	12
  3329  00146E  6E92               	movwf	3986,c	;volatile
  3330                           
  3331                           ;ir.c: 29: CAP1CON = 0b01000110;
  3332  001470  0E46               	movlw	70
  3333  001472  6E63               	movwf	3939,c	;volatile
  3334                           
  3335                           ;ir.c: 30: CAP2CON = 0b01000110;
  3336  001474  0E46               	movlw	70
  3337  001476  6E62               	movwf	3938,c	;volatile
  3338                           
  3339                           ;ir.c: 31: T5CON = 0b00001001;
  3340  001478  0E09               	movlw	9
  3341  00147A  6EB7               	movwf	4023,c	;volatile
  3342                           
  3343                           ;ir.c: 32: DFLTCON = 0b00011000;
  3344  00147C  0E18               	movlw	24
  3345  00147E  6E60               	movwf	3936,c	;volatile
  3346  001480  0012               	return		;funcret
  3347  001482                     __end_of_init_capture:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           intcon3	equ	0xFF0
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postinc1	equ	0xFE6
  3360                           postdec1	equ	0xFE5
  3361                           fsr1h	equ	0xFE2
  3362                           fsr1l	equ	0xFE1
  3363                           indf2	equ	0xFDF
  3364                           postinc2	equ	0xFDE
  3365                           postdec2	equ	0xFDD
  3366                           plusw2	equ	0xFDB
  3367                           fsr2h	equ	0xFDA
  3368                           fsr2l	equ	0xFD9
  3369                           status	equ	0xFD8
  3370                           
  3371 ;; *************** function _init_TIMER5 *****************
  3372 ;; Defined at:
  3373 ;;		line 6 in file "ir.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;		None
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;		None
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3387 ;;      Params:         0       0       0       0
  3388 ;;      Locals:         0       0       0       0
  3389 ;;      Temps:          0       0       0       0
  3390 ;;      Totals:         0       0       0       0
  3391 ;;Total ram usage:        0 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    1
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text15
  3402  001482                     __ptext15:
  3403                           	opt stack 0
  3404  001482                     _init_TIMER5:
  3405                           	opt stack 29
  3406                           
  3407                           ;ir.c: 11: T5CON = 0;
  3408                           
  3409                           ;incstack = 0
  3410  001482  0E00               	movlw	0
  3411  001484  6EB7               	movwf	4023,c	;volatile
  3412                           
  3413                           ;ir.c: 12: T5CONbits.T5SEN = 0;
  3414  001486  9EB7               	bcf	4023,7,c	;volatile
  3415                           
  3416                           ;ir.c: 13: T5CONbits.RESEN = 0;
  3417  001488  9CB7               	bcf	4023,6,c	;volatile
  3418                           
  3419                           ;ir.c: 14: T5CONbits.T5PS = 0b10;
  3420  00148A  50B7               	movf	4023,w,c	;volatile
  3421  00148C  0BE7               	andlw	-25
  3422  00148E  0910               	iorlw	16
  3423  001490  6EB7               	movwf	4023,c	;volatile
  3424                           
  3425                           ;ir.c: 15: T5CONbits.T5MOD = 0;
  3426  001492  9AB7               	bcf	4023,5,c	;volatile
  3427                           
  3428                           ;ir.c: 16: T5CONbits.T5SYNC = 0;
  3429  001494  94B7               	bcf	4023,2,c	;volatile
  3430                           
  3431                           ;ir.c: 17: T5CONbits.TMR5CS = 0;
  3432  001496  92B7               	bcf	4023,1,c	;volatile
  3433                           
  3434                           ;ir.c: 18: T5CONbits.TMR5ON = 1;
  3435  001498  80B7               	bsf	4023,0,c	;volatile
  3436  00149A  0012               	return		;funcret
  3437  00149C                     __end_of_init_TIMER5:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           intcon3	equ	0xFF0
  3447                           postinc0	equ	0xFEE
  3448                           wreg	equ	0xFE8
  3449                           postinc1	equ	0xFE6
  3450                           postdec1	equ	0xFE5
  3451                           fsr1h	equ	0xFE2
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           plusw2	equ	0xFDB
  3457                           fsr2h	equ	0xFDA
  3458                           fsr2l	equ	0xFD9
  3459                           status	equ	0xFD8
  3460                           
  3461 ;; *************** function _init_RFID *****************
  3462 ;; Defined at:
  3463 ;;		line 3 in file "rfid.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3477 ;;      Params:         0       0       0       0
  3478 ;;      Locals:         0       0       0       0
  3479 ;;      Temps:          0       0       0       0
  3480 ;;      Totals:         0       0       0       0
  3481 ;;Total ram usage:        0 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    1
  3484 ;; This function calls:
  3485 ;;		Nothing
  3486 ;; This function is called by:
  3487 ;;		_main
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           	psect	text16
  3492  00149C                     __ptext16:
  3493                           	opt stack 0
  3494  00149C                     _init_RFID:
  3495                           	opt stack 29
  3496                           
  3497                           ;rfid.c: 4: TRISC = TRISC | 0b11000000;
  3498                           
  3499                           ;incstack = 0
  3500  00149C  5094               	movf	3988,w,c	;volatile
  3501  00149E  09C0               	iorlw	192
  3502  0014A0  6E94               	movwf	3988,c	;volatile
  3503                           
  3504                           ;rfid.c: 5: SPBRG = 204;
  3505  0014A2  0ECC               	movlw	204
  3506  0014A4  6EAF               	movwf	4015,c	;volatile
  3507                           
  3508                           ;rfid.c: 6: SPBRGH = 0;
  3509  0014A6  0E00               	movlw	0
  3510  0014A8  6EB0               	movwf	4016,c	;volatile
  3511                           
  3512                           ;rfid.c: 7: BAUDCONbits.BRG16 = 1;
  3513  0014AA  86AA               	bsf	4010,3,c	;volatile
  3514                           
  3515                           ;rfid.c: 8: TXSTAbits.BRGH = 1;
  3516  0014AC  84AC               	bsf	4012,2,c	;volatile
  3517                           
  3518                           ;rfid.c: 9: RCSTAbits.CREN = 1;
  3519  0014AE  88AB               	bsf	4011,4,c	;volatile
  3520                           
  3521                           ;rfid.c: 10: RCSTAbits.SPEN = 1;
  3522  0014B0  8EAB               	bsf	4011,7,c	;volatile
  3523                           
  3524                           ;rfid.c: 11: TXSTAbits.TXEN = 1;
  3525  0014B2  8AAC               	bsf	4012,5,c	;volatile
  3526  0014B4  0012               	return		;funcret
  3527  0014B6                     __end_of_init_RFID:
  3528                           	opt stack 0
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           intcon	equ	0xFF2
  3536                           intcon3	equ	0xFF0
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           postinc1	equ	0xFE6
  3540                           postdec1	equ	0xFE5
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           plusw2	equ	0xFDB
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _initPWM *****************
  3552 ;; Defined at:
  3553 ;;		line 10 in file "motor.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3567 ;;      Params:         0       0       0       0
  3568 ;;      Locals:         0       0       0       0
  3569 ;;      Temps:          0       0       0       0
  3570 ;;      Totals:         0       0       0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    1
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_main
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text17
  3582  00142E                     __ptext17:
  3583                           	opt stack 0
  3584  00142E                     _initPWM:
  3585                           	opt stack 29
  3586                           
  3587                           ;motor.c: 11: TRISB = 0;
  3588                           
  3589                           ;incstack = 0
  3590  00142E  0E00               	movlw	0
  3591  001430  6E93               	movwf	3987,c	;volatile
  3592                           
  3593                           ;motor.c: 13: PTCON0 = 0b00000000;
  3594  001432  0E00               	movlw	0
  3595  001434  6E7F               	movwf	3967,c	;volatile
  3596                           
  3597                           ;motor.c: 14: PTCON1 = 0b10000000;
  3598  001436  0E80               	movlw	128
  3599  001438  6E7E               	movwf	3966,c	;volatile
  3600                           
  3601                           ;motor.c: 16: PWMCON0 = 0b01111111;
  3602  00143A  0E7F               	movlw	127
  3603  00143C  6E6F               	movwf	3951,c	;volatile
  3604                           
  3605                           ;motor.c: 17: PWMCON1 = 0x00;
  3606  00143E  0E00               	movlw	0
  3607  001440  6E6E               	movwf	3950,c	;volatile
  3608                           
  3609                           ;motor.c: 20: PTPERL = 0b11000111;
  3610  001442  0EC7               	movlw	199
  3611  001444  6E7B               	movwf	3963,c	;volatile
  3612                           
  3613                           ;motor.c: 21: PTPERH = 0b0000;
  3614  001446  0E00               	movlw	0
  3615  001448  6E7A               	movwf	3962,c	;volatile
  3616  00144A  0012               	return		;funcret
  3617  00144C                     __end_of_initPWM:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           intcon3	equ	0xFF0
  3627                           postinc0	equ	0xFEE
  3628                           wreg	equ	0xFE8
  3629                           postinc1	equ	0xFE6
  3630                           postdec1	equ	0xFE5
  3631                           fsr1h	equ	0xFE2
  3632                           fsr1l	equ	0xFE1
  3633                           indf2	equ	0xFDF
  3634                           postinc2	equ	0xFDE
  3635                           postdec2	equ	0xFDD
  3636                           plusw2	equ	0xFDB
  3637                           fsr2h	equ	0xFDA
  3638                           fsr2l	equ	0xFD9
  3639                           status	equ	0xFD8
  3640                           
  3641 ;; *************** function _forwards *****************
  3642 ;; Defined at:
  3643 ;;		line 152 in file "motor.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  mL              2   26[COMRAM] PTR struct Motor
  3646 ;;		 -> main@mL(9), 
  3647 ;;  mR              2   28[COMRAM] PTR struct Motor
  3648 ;;		 -> main@mR(9), 
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3660 ;;      Params:         4       0       0       0
  3661 ;;      Locals:         0       0       0       0
  3662 ;;      Temps:          1       0       0       0
  3663 ;;      Totals:         5       0       0       0
  3664 ;;Total ram usage:        5 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    3
  3667 ;; This function calls:
  3668 ;;		_setMotorPWM
  3669 ;; This function is called by:
  3670 ;;		_main
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text18
  3675  000FC8                     __ptext18:
  3676                           	opt stack 0
  3677  000FC8                     _forwards:
  3678                           	opt stack 27
  3679                           
  3680                           ;motor.c: 153: mL->direction = 0;
  3681                           
  3682                           ;incstack = 0
  3683  000FC8  EE20 F001          	lfsr	2,1
  3684  000FCC  501B               	movf	forwards@mL,w,c
  3685  000FCE  26D9               	addwf	fsr2l,f,c
  3686  000FD0  501C               	movf	forwards@mL+1,w,c
  3687  000FD2  22DA               	addwfc	fsr2h,f,c
  3688  000FD4  0E00               	movlw	0
  3689  000FD6  6EDF               	movwf	indf2,c
  3690                           
  3691                           ;motor.c: 154: mR->direction = 0;
  3692  000FD8  EE20 F001          	lfsr	2,1
  3693  000FDC  501D               	movf	forwards@mR,w,c
  3694  000FDE  26D9               	addwf	fsr2l,f,c
  3695  000FE0  501E               	movf	forwards@mR+1,w,c
  3696  000FE2  22DA               	addwfc	fsr2h,f,c
  3697  000FE4  0E00               	movlw	0
  3698  000FE6  6EDF               	movwf	indf2,c
  3699                           
  3700                           ;motor.c: 155: while (mL->power < 90 || mR->power < 90) {
  3701  000FE8  D02B               	goto	l290
  3702  000FEA                     
  3703                           ;motor.c: 156: if (mL->power < 90) {
  3704  000FEA  C01B  FFD9         	movff	forwards@mL,fsr2l
  3705  000FEE  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  3706  000FF2  0E5A               	movlw	90
  3707  000FF4  60DF               	cpfslt	indf2,c
  3708  000FF6  D005               	goto	l292
  3709                           
  3710                           ;motor.c: 157: mL->power++;
  3711  000FF8  C01B  FFD9         	movff	forwards@mL,fsr2l
  3712  000FFC  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  3713  001000  2ADF               	incf	indf2,f,c
  3714  001002                     l292:
  3715                           
  3716                           ;motor.c: 158: };motor.c: 159: if (mR->power < 90) {
  3717  001002  C01D  FFD9         	movff	forwards@mR,fsr2l
  3718  001006  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  3719  00100A  0E5A               	movlw	90
  3720  00100C  60DF               	cpfslt	indf2,c
  3721  00100E  D005               	goto	l293
  3722                           
  3723                           ;motor.c: 160: mR->power++;
  3724  001010  C01D  FFD9         	movff	forwards@mR,fsr2l
  3725  001014  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  3726  001018  2ADF               	incf	indf2,f,c
  3727  00101A                     l293:
  3728                           
  3729                           ;motor.c: 161: };motor.c: 162: setMotorPWM(mL);
  3730  00101A  C01B  F014         	movff	forwards@mL,setMotorPWM@m
  3731  00101E  C01C  F015         	movff	forwards@mL+1,setMotorPWM@m+1
  3732  001022  EC07  F005         	call	_setMotorPWM	;wreg free
  3733                           
  3734                           ;motor.c: 163: setMotorPWM(mR);
  3735  001026  C01D  F014         	movff	forwards@mR,setMotorPWM@m
  3736  00102A  C01E  F015         	movff	forwards@mR+1,setMotorPWM@m+1
  3737  00102E  EC07  F005         	call	_setMotorPWM	;wreg free
  3738                           
  3739                           ;motor.c: 164: _delay((unsigned long)((5)*(8000000/4000.0)));
  3740  001032  0E0D               	movlw	13
  3741  001034  6E1F               	movwf	??_forwards& (0+255),c
  3742  001036  0EFC               	movlw	252
  3743  001038                     u2077:
  3744  001038  2EE8               	decfsz	wreg,f,c
  3745  00103A  D7FE               	bra	u2077
  3746  00103C  2E1F               	decfsz	??_forwards& (0+255),f,c
  3747  00103E  D7FC               	bra	u2077
  3748  001040                     l290:
  3749  001040  C01B  FFD9         	movff	forwards@mL,fsr2l
  3750  001044  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  3751  001048  0E59               	movlw	89
  3752  00104A  64DF               	cpfsgt	indf2,c
  3753  00104C  D7CE               	goto	l291
  3754  00104E  C01D  FFD9         	movff	forwards@mR,fsr2l
  3755  001052  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  3756  001056  0E59               	movlw	89
  3757  001058  64DF               	cpfsgt	indf2,c
  3758  00105A  D7C7               	goto	l291
  3759  00105C  0012               	return	
  3760  00105E                     __end_of_forwards:
  3761                           	opt stack 0
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           prodh	equ	0xFF4
  3767                           prodl	equ	0xFF3
  3768                           intcon	equ	0xFF2
  3769                           intcon3	equ	0xFF0
  3770                           postinc0	equ	0xFEE
  3771                           wreg	equ	0xFE8
  3772                           postinc1	equ	0xFE6
  3773                           postdec1	equ	0xFE5
  3774                           fsr1h	equ	0xFE2
  3775                           fsr1l	equ	0xFE1
  3776                           indf2	equ	0xFDF
  3777                           postinc2	equ	0xFDE
  3778                           postdec2	equ	0xFDD
  3779                           plusw2	equ	0xFDB
  3780                           fsr2h	equ	0xFDA
  3781                           fsr2l	equ	0xFD9
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _backwards *****************
  3785 ;; Defined at:
  3786 ;;		line 181 in file "motor.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  mL              2   26[COMRAM] PTR struct Motor
  3789 ;;		 -> main@mL(9), 
  3790 ;;  mR              2   28[COMRAM] PTR struct Motor
  3791 ;;		 -> main@mR(9), 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;		None
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3803 ;;      Params:         4       0       0       0
  3804 ;;      Locals:         0       0       0       0
  3805 ;;      Temps:          1       0       0       0
  3806 ;;      Totals:         5       0       0       0
  3807 ;;Total ram usage:        5 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    3
  3810 ;; This function calls:
  3811 ;;		_setMotorPWM
  3812 ;; This function is called by:
  3813 ;;		_main
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text19
  3818  00105E                     __ptext19:
  3819                           	opt stack 0
  3820  00105E                     _backwards:
  3821                           	opt stack 27
  3822                           
  3823                           ;motor.c: 182: mL->direction = 1;
  3824                           
  3825                           ;incstack = 0
  3826  00105E  EE20 F001          	lfsr	2,1
  3827  001062  501B               	movf	backwards@mL,w,c
  3828  001064  26D9               	addwf	fsr2l,f,c
  3829  001066  501C               	movf	backwards@mL+1,w,c
  3830  001068  22DA               	addwfc	fsr2h,f,c
  3831  00106A  0E01               	movlw	1
  3832  00106C  6EDF               	movwf	indf2,c
  3833                           
  3834                           ;motor.c: 183: mR->direction = 1;
  3835  00106E  EE20 F001          	lfsr	2,1
  3836  001072  501D               	movf	backwards@mR,w,c
  3837  001074  26D9               	addwf	fsr2l,f,c
  3838  001076  501E               	movf	backwards@mR+1,w,c
  3839  001078  22DA               	addwfc	fsr2h,f,c
  3840  00107A  0E01               	movlw	1
  3841  00107C  6EDF               	movwf	indf2,c
  3842                           
  3843                           ;motor.c: 184: while (mL->power < 90 || mR->power < 90) {
  3844  00107E  D02B               	goto	l298
  3845  001080                     
  3846                           ;motor.c: 185: if (mL->power < 90) {
  3847  001080  C01B  FFD9         	movff	backwards@mL,fsr2l
  3848  001084  C01C  FFDA         	movff	backwards@mL+1,fsr2h
  3849  001088  0E5A               	movlw	90
  3850  00108A  60DF               	cpfslt	indf2,c
  3851  00108C  D005               	goto	l300
  3852                           
  3853                           ;motor.c: 186: mL->power++;
  3854  00108E  C01B  FFD9         	movff	backwards@mL,fsr2l
  3855  001092  C01C  FFDA         	movff	backwards@mL+1,fsr2h
  3856  001096  2ADF               	incf	indf2,f,c
  3857  001098                     l300:
  3858                           
  3859                           ;motor.c: 187: };motor.c: 188: if (mR->power < 90) {
  3860  001098  C01D  FFD9         	movff	backwards@mR,fsr2l
  3861  00109C  C01E  FFDA         	movff	backwards@mR+1,fsr2h
  3862  0010A0  0E5A               	movlw	90
  3863  0010A2  60DF               	cpfslt	indf2,c
  3864  0010A4  D005               	goto	l301
  3865                           
  3866                           ;motor.c: 189: mR->power++;
  3867  0010A6  C01D  FFD9         	movff	backwards@mR,fsr2l
  3868  0010AA  C01E  FFDA         	movff	backwards@mR+1,fsr2h
  3869  0010AE  2ADF               	incf	indf2,f,c
  3870  0010B0                     l301:
  3871                           
  3872                           ;motor.c: 190: };motor.c: 191: setMotorPWM(mL);
  3873  0010B0  C01B  F014         	movff	backwards@mL,setMotorPWM@m
  3874  0010B4  C01C  F015         	movff	backwards@mL+1,setMotorPWM@m+1
  3875  0010B8  EC07  F005         	call	_setMotorPWM	;wreg free
  3876                           
  3877                           ;motor.c: 192: setMotorPWM(mR);
  3878  0010BC  C01D  F014         	movff	backwards@mR,setMotorPWM@m
  3879  0010C0  C01E  F015         	movff	backwards@mR+1,setMotorPWM@m+1
  3880  0010C4  EC07  F005         	call	_setMotorPWM	;wreg free
  3881                           
  3882                           ;motor.c: 193: _delay((unsigned long)((5)*(8000000/4000.0)));
  3883  0010C8  0E0D               	movlw	13
  3884  0010CA  6E1F               	movwf	??_backwards& (0+255),c
  3885  0010CC  0EFC               	movlw	252
  3886  0010CE                     u2087:
  3887  0010CE  2EE8               	decfsz	wreg,f,c
  3888  0010D0  D7FE               	bra	u2087
  3889  0010D2  2E1F               	decfsz	??_backwards& (0+255),f,c
  3890  0010D4  D7FC               	bra	u2087
  3891  0010D6                     l298:
  3892  0010D6  C01B  FFD9         	movff	backwards@mL,fsr2l
  3893  0010DA  C01C  FFDA         	movff	backwards@mL+1,fsr2h
  3894  0010DE  0E59               	movlw	89
  3895  0010E0  64DF               	cpfsgt	indf2,c
  3896  0010E2  D7CE               	goto	l299
  3897  0010E4  C01D  FFD9         	movff	backwards@mR,fsr2l
  3898  0010E8  C01E  FFDA         	movff	backwards@mR+1,fsr2h
  3899  0010EC  0E59               	movlw	89
  3900  0010EE  64DF               	cpfsgt	indf2,c
  3901  0010F0  D7C7               	goto	l299
  3902  0010F2  0012               	return	
  3903  0010F4                     __end_of_backwards:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           intcon3	equ	0xFF0
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           postinc1	equ	0xFE6
  3916                           postdec1	equ	0xFE5
  3917                           fsr1h	equ	0xFE2
  3918                           fsr1l	equ	0xFE1
  3919                           indf2	equ	0xFDF
  3920                           postinc2	equ	0xFDE
  3921                           postdec2	equ	0xFDD
  3922                           plusw2	equ	0xFDB
  3923                           fsr2h	equ	0xFDA
  3924                           fsr2l	equ	0xFD9
  3925                           status	equ	0xFD8
  3926                           
  3927 ;; *************** function _setMotorPWM *****************
  3928 ;; Defined at:
  3929 ;;		line 24 in file "motor.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;  m               2   19[COMRAM] PTR struct Motor
  3932 ;;		 -> main@mR(9), main@mL(9), 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  PWMduty         2   24[COMRAM] int 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3944 ;;      Params:         2       0       0       0
  3945 ;;      Locals:         2       0       0       0
  3946 ;;      Temps:          3       0       0       0
  3947 ;;      Totals:         7       0       0       0
  3948 ;;Total ram usage:        7 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    2
  3951 ;; This function calls:
  3952 ;;		___awdiv
  3953 ;;		___wmul
  3954 ;; This function is called by:
  3955 ;;		_stop
  3956 ;;		_turnLeft
  3957 ;;		_turnRight
  3958 ;;		_forwards
  3959 ;;		_backwards
  3960 ;;		_accelerate
  3961 ;;		_accelerate2
  3962 ;;		_decelerate
  3963 ;;		_smoothRight
  3964 ;;		_smoothLeft
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text20
  3969  000A0E                     __ptext20:
  3970                           	opt stack 0
  3971  000A0E                     _setMotorPWM:
  3972                           	opt stack 27
  3973                           
  3974                           ;motor.c: 25: int PWMduty;;motor.c: 26: if (m->direction) {
  3975                           
  3976                           ;incstack = 0
  3977  000A0E  EE20 F001          	lfsr	2,1
  3978  000A12  5014               	movf	setMotorPWM@m,w,c
  3979  000A14  26D9               	addwf	fsr2l,f,c
  3980  000A16  5015               	movf	setMotorPWM@m+1,w,c
  3981  000A18  22DA               	addwfc	fsr2h,f,c
  3982  000A1A  50DF               	movf	indf2,w,c
  3983  000A1C  B4D8               	btfsc	status,2,c
  3984  000A1E  D034               	goto	l243
  3985                           
  3986                           ;motor.c: 28: PWMduty = m->period - ((int) (m->power)*(m->period)) / 100;
  3987  000A20  EE20 F007          	lfsr	2,7
  3988  000A24  5014               	movf	setMotorPWM@m,w,c
  3989  000A26  26D9               	addwf	fsr2l,f,c
  3990  000A28  5015               	movf	setMotorPWM@m+1,w,c
  3991  000A2A  22DA               	addwfc	fsr2h,f,c
  3992  000A2C  CFDE F016          	movff	postinc2,??_setMotorPWM
  3993  000A30  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  3994  000A34  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  3995  000A38  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3996  000A3C  50DF               	movf	indf2,w,c
  3997  000A3E  6E18               	movwf	(??_setMotorPWM+2)& (0+255),c
  3998  000A40  5018               	movf	??_setMotorPWM+2,w,c
  3999  000A42  6E06               	movwf	___wmul@multiplier,c
  4000  000A44  6A07               	clrf	___wmul@multiplier+1,c
  4001  000A46  EE20 F007          	lfsr	2,7
  4002  000A4A  5014               	movf	setMotorPWM@m,w,c
  4003  000A4C  26D9               	addwf	fsr2l,f,c
  4004  000A4E  5015               	movf	setMotorPWM@m+1,w,c
  4005  000A50  22DA               	addwfc	fsr2h,f,c
  4006  000A52  CFDE F008          	movff	postinc2,___wmul@multiplicand
  4007  000A56  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  4008  000A5A  ECF5  F009         	call	___wmul	;wreg free
  4009  000A5E  C006  F00C         	movff	?___wmul,___awdiv@dividend
  4010  000A62  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  4011  000A66  0E00               	movlw	0
  4012  000A68  6E0F               	movwf	___awdiv@divisor+1,c
  4013  000A6A  0E64               	movlw	100
  4014  000A6C  6E0E               	movwf	___awdiv@divisor,c
  4015  000A6E  EC7A  F008         	call	___awdiv	;wreg free
  4016  000A72  1E0C               	comf	?___awdiv,f,c
  4017  000A74  1E0D               	comf	?___awdiv+1,f,c
  4018  000A76  4A0C               	infsnz	?___awdiv,f,c
  4019  000A78  2A0D               	incf	?___awdiv+1,f,c
  4020  000A7A  5016               	movf	??_setMotorPWM,w,c
  4021  000A7C  240C               	addwf	?___awdiv,w,c
  4022  000A7E  6E19               	movwf	setMotorPWM@PWMduty,c
  4023  000A80  5017               	movf	??_setMotorPWM+1,w,c
  4024  000A82  200D               	addwfc	?___awdiv+1,w,c
  4025  000A84  6E1A               	movwf	setMotorPWM@PWMduty+1,c
  4026                           
  4027                           ;motor.c: 29: } else {
  4028  000A86  D023               	goto	l244
  4029  000A88                     l243:
  4030                           
  4031                           ;motor.c: 31: PWMduty = ((int) (m->power)*(m->period)) / 100;
  4032  000A88  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  4033  000A8C  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4034  000A90  50DF               	movf	indf2,w,c
  4035  000A92  6E16               	movwf	??_setMotorPWM& (0+255),c
  4036  000A94  5016               	movf	??_setMotorPWM,w,c
  4037  000A96  6E06               	movwf	___wmul@multiplier,c
  4038  000A98  6A07               	clrf	___wmul@multiplier+1,c
  4039  000A9A  EE20 F007          	lfsr	2,7
  4040  000A9E  5014               	movf	setMotorPWM@m,w,c
  4041  000AA0  26D9               	addwf	fsr2l,f,c
  4042  000AA2  5015               	movf	setMotorPWM@m+1,w,c
  4043  000AA4  22DA               	addwfc	fsr2h,f,c
  4044  000AA6  CFDE F008          	movff	postinc2,___wmul@multiplicand
  4045  000AAA  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  4046  000AAE  ECF5  F009         	call	___wmul	;wreg free
  4047  000AB2  C006  F00C         	movff	?___wmul,___awdiv@dividend
  4048  000AB6  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  4049  000ABA  0E00               	movlw	0
  4050  000ABC  6E0F               	movwf	___awdiv@divisor+1,c
  4051  000ABE  0E64               	movlw	100
  4052  000AC0  6E0E               	movwf	___awdiv@divisor,c
  4053  000AC2  EC7A  F008         	call	___awdiv	;wreg free
  4054  000AC6  C00C  F019         	movff	?___awdiv,setMotorPWM@PWMduty
  4055  000ACA  C00D  F01A         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4056  000ACE                     l244:
  4057                           
  4058                           ;motor.c: 32: };motor.c: 33: PWMduty = (PWMduty << 2);
  4059  000ACE  C019  F016         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  4060  000AD2  C01A  F017         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  4061  000AD6  90D8               	bcf	status,0,c
  4062  000AD8  3616               	rlcf	??_setMotorPWM,f,c
  4063  000ADA  3617               	rlcf	??_setMotorPWM+1,f,c
  4064  000ADC  90D8               	bcf	status,0,c
  4065  000ADE  3616               	rlcf	??_setMotorPWM,f,c
  4066  000AE0  3617               	rlcf	??_setMotorPWM+1,f,c
  4067  000AE2  C016  F019         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  4068  000AE6  C017  F01A         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  4069                           
  4070                           ;motor.c: 34: *(m->duty_low) = PWMduty & 0xFF;
  4071  000AEA  EE20 F002          	lfsr	2,2
  4072  000AEE  5014               	movf	setMotorPWM@m,w,c
  4073  000AF0  26D9               	addwf	fsr2l,f,c
  4074  000AF2  5015               	movf	setMotorPWM@m+1,w,c
  4075  000AF4  22DA               	addwfc	fsr2h,f,c
  4076  000AF6  CFDE F016          	movff	postinc2,??_setMotorPWM
  4077  000AFA  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  4078  000AFE  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  4079  000B02  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4080  000B06  C019  FFDF         	movff	setMotorPWM@PWMduty,indf2
  4081                           
  4082                           ;motor.c: 35: *(m->duty_high) = (PWMduty >> 8) & 0x3F;
  4083  000B0A  EE20 F004          	lfsr	2,4
  4084  000B0E  5014               	movf	setMotorPWM@m,w,c
  4085  000B10  26D9               	addwf	fsr2l,f,c
  4086  000B12  5015               	movf	setMotorPWM@m+1,w,c
  4087  000B14  22DA               	addwfc	fsr2h,f,c
  4088  000B16  CFDE F016          	movff	postinc2,??_setMotorPWM
  4089  000B1A  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  4090  000B1E  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  4091  000B22  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4092  000B26  501A               	movf	setMotorPWM@PWMduty+1,w,c
  4093  000B28  0B3F               	andlw	63
  4094  000B2A  6EDF               	movwf	indf2,c
  4095                           
  4096                           ;motor.c: 37: if (m->direction) {
  4097  000B2C  EE20 F001          	lfsr	2,1
  4098  000B30  5014               	movf	setMotorPWM@m,w,c
  4099  000B32  26D9               	addwf	fsr2l,f,c
  4100  000B34  5015               	movf	setMotorPWM@m+1,w,c
  4101  000B36  22DA               	addwfc	fsr2h,f,c
  4102  000B38  50DF               	movf	indf2,w,c
  4103  000B3A  B4D8               	btfsc	status,2,c
  4104  000B3C  D014               	goto	l245
  4105                           
  4106                           ;motor.c: 38: LATB = LATB | (1 << (m->dir_pin));
  4107  000B3E  EE20 F006          	lfsr	2,6
  4108  000B42  5014               	movf	setMotorPWM@m,w,c
  4109  000B44  26D9               	addwf	fsr2l,f,c
  4110  000B46  5015               	movf	setMotorPWM@m+1,w,c
  4111  000B48  22DA               	addwfc	fsr2h,f,c
  4112  000B4A  50DF               	movf	indf2,w,c
  4113  000B4C  6E16               	movwf	??_setMotorPWM& (0+255),c
  4114  000B4E  0E01               	movlw	1
  4115  000B50  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  4116  000B52  2A16               	incf	??_setMotorPWM,f,c
  4117  000B54  D002               	goto	u1234
  4118  000B56                     u1235:
  4119  000B56  90D8               	bcf	status,0,c
  4120  000B58  3617               	rlcf	??_setMotorPWM+1,f,c
  4121  000B5A                     u1234:
  4122  000B5A  2E16               	decfsz	??_setMotorPWM,f,c
  4123  000B5C  D7FC               	goto	u1235
  4124  000B5E  5017               	movf	??_setMotorPWM+1,w,c
  4125  000B60  108A               	iorwf	3978,w,c	;volatile
  4126  000B62  6E8A               	movwf	3978,c	;volatile
  4127                           
  4128                           ;motor.c: 39: } else {
  4129  000B64  0012               	return	
  4130  000B66                     l245:
  4131                           
  4132                           ;motor.c: 40: LATB = LATB & (~(1 << (m->dir_pin)));
  4133  000B66  EE20 F006          	lfsr	2,6
  4134  000B6A  5014               	movf	setMotorPWM@m,w,c
  4135  000B6C  26D9               	addwf	fsr2l,f,c
  4136  000B6E  5015               	movf	setMotorPWM@m+1,w,c
  4137  000B70  22DA               	addwfc	fsr2h,f,c
  4138  000B72  50DF               	movf	indf2,w,c
  4139  000B74  6E16               	movwf	??_setMotorPWM& (0+255),c
  4140  000B76  0E01               	movlw	1
  4141  000B78  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  4142  000B7A  2A16               	incf	??_setMotorPWM,f,c
  4143  000B7C  D002               	goto	u1244
  4144  000B7E                     u1245:
  4145  000B7E  90D8               	bcf	status,0,c
  4146  000B80  3617               	rlcf	??_setMotorPWM+1,f,c
  4147  000B82                     u1244:
  4148  000B82  2E16               	decfsz	??_setMotorPWM,f,c
  4149  000B84  D7FC               	goto	u1245
  4150  000B86  5017               	movf	??_setMotorPWM+1,w,c
  4151  000B88  0AFF               	xorlw	255
  4152  000B8A  148A               	andwf	3978,w,c	;volatile
  4153  000B8C  6E8A               	movwf	3978,c	;volatile
  4154  000B8E  0012               	return	
  4155  000B90                     __end_of_setMotorPWM:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           intcon3	equ	0xFF0
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postinc1	equ	0xFE6
  4168                           postdec1	equ	0xFE5
  4169                           fsr1h	equ	0xFE2
  4170                           fsr1l	equ	0xFE1
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           plusw2	equ	0xFDB
  4175                           fsr2h	equ	0xFDA
  4176                           fsr2l	equ	0xFD9
  4177                           status	equ	0xFD8
  4178                           
  4179 ;; *************** function ___wmul *****************
  4180 ;; Defined at:
  4181 ;;		line 15 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/Umul16.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  multiplier      2    5[COMRAM] unsigned int 
  4184 ;;  multiplicand    2    7[COMRAM] unsigned int 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  product         2    9[COMRAM] unsigned int 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  2    5[COMRAM] unsigned int 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2, status,0, prodl, prodh
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4196 ;;      Params:         4       0       0       0
  4197 ;;      Locals:         2       0       0       0
  4198 ;;      Temps:          0       0       0       0
  4199 ;;      Totals:         6       0       0       0
  4200 ;;Total ram usage:        6 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    1
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_setMotorPWM
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text21
  4211  0013EA                     __ptext21:
  4212                           	opt stack 0
  4213  0013EA                     ___wmul:
  4214                           	opt stack 27
  4215                           
  4216                           ;incstack = 0
  4217  0013EA  5006               	movf	___wmul@multiplier,w,c
  4218  0013EC  0208               	mulwf	___wmul@multiplicand,c
  4219  0013EE  CFF3 F00A          	movff	prodl,___wmul@product
  4220  0013F2  CFF4 F00B          	movff	prodh,___wmul@product+1
  4221  0013F6  5006               	movf	___wmul@multiplier,w,c
  4222  0013F8  0209               	mulwf	___wmul@multiplicand+1,c
  4223  0013FA  50F3               	movf	prodl,w,c
  4224  0013FC  260B               	addwf	___wmul@product+1,f,c
  4225  0013FE  5007               	movf	___wmul@multiplier+1,w,c
  4226  001400  0208               	mulwf	___wmul@multiplicand,c
  4227  001402  50F3               	movf	prodl,w,c
  4228  001404  260B               	addwf	___wmul@product+1,f,c
  4229  001406  C00A  F006         	movff	___wmul@product,?___wmul
  4230  00140A  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  4231  00140E  0012               	return	
  4232  001410                     __end_of___wmul:
  4233                           	opt stack 0
  4234                           tblptru	equ	0xFF8
  4235                           tblptrh	equ	0xFF7
  4236                           tblptrl	equ	0xFF6
  4237                           tablat	equ	0xFF5
  4238                           prodh	equ	0xFF4
  4239                           prodl	equ	0xFF3
  4240                           intcon	equ	0xFF2
  4241                           intcon3	equ	0xFF0
  4242                           postinc0	equ	0xFEE
  4243                           wreg	equ	0xFE8
  4244                           postinc1	equ	0xFE6
  4245                           postdec1	equ	0xFE5
  4246                           fsr1h	equ	0xFE2
  4247                           fsr1l	equ	0xFE1
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           plusw2	equ	0xFDB
  4252                           fsr2h	equ	0xFDA
  4253                           fsr2l	equ	0xFD9
  4254                           status	equ	0xFD8
  4255                           
  4256 ;; *************** function ___awdiv *****************
  4257 ;; Defined at:
  4258 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/awdiv.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;  dividend        2   11[COMRAM] int 
  4261 ;;  divisor         2   13[COMRAM] int 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  quotient        2   17[COMRAM] int 
  4264 ;;  sign            1   16[COMRAM] unsigned char 
  4265 ;;  counter         1   15[COMRAM] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  2   11[COMRAM] int 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4275 ;;      Params:         4       0       0       0
  4276 ;;      Locals:         4       0       0       0
  4277 ;;      Temps:          0       0       0       0
  4278 ;;      Totals:         8       0       0       0
  4279 ;;Total ram usage:        8 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_setMotorPWM
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text22
  4290  0010F4                     __ptext22:
  4291                           	opt stack 0
  4292  0010F4                     ___awdiv:
  4293                           	opt stack 27
  4294                           
  4295                           ;incstack = 0
  4296  0010F4  0E00               	movlw	0
  4297  0010F6  6E11               	movwf	___awdiv@sign,c
  4298  0010F8  AE0F               	btfss	___awdiv@divisor+1,7,c
  4299  0010FA  D006               	goto	l658
  4300  0010FC  6C0E               	negf	___awdiv@divisor,c
  4301  0010FE  1E0F               	comf	___awdiv@divisor+1,f,c
  4302  001100  B0D8               	btfsc	status,0,c
  4303  001102  2A0F               	incf	___awdiv@divisor+1,f,c
  4304  001104  0E01               	movlw	1
  4305  001106  6E11               	movwf	___awdiv@sign,c
  4306  001108                     l658:
  4307  001108  AE0D               	btfss	___awdiv@dividend+1,7,c
  4308  00110A  D006               	goto	l659
  4309  00110C  6C0C               	negf	___awdiv@dividend,c
  4310  00110E  1E0D               	comf	___awdiv@dividend+1,f,c
  4311  001110  B0D8               	btfsc	status,0,c
  4312  001112  2A0D               	incf	___awdiv@dividend+1,f,c
  4313  001114  0E01               	movlw	1
  4314  001116  1A11               	xorwf	___awdiv@sign,f,c
  4315  001118                     l659:
  4316  001118  0E00               	movlw	0
  4317  00111A  6E13               	movwf	___awdiv@quotient+1,c
  4318  00111C  0E00               	movlw	0
  4319  00111E  6E12               	movwf	___awdiv@quotient,c
  4320  001120  500E               	movf	___awdiv@divisor,w,c
  4321  001122  100F               	iorwf	___awdiv@divisor+1,w,c
  4322  001124  B4D8               	btfsc	status,2,c
  4323  001126  D01C               	goto	l666
  4324  001128  0E01               	movlw	1
  4325  00112A  6E10               	movwf	___awdiv@counter,c
  4326  00112C  D004               	goto	l661
  4327  00112E  90D8               	bcf	status,0,c
  4328  001130  360E               	rlcf	___awdiv@divisor,f,c
  4329  001132  360F               	rlcf	___awdiv@divisor+1,f,c
  4330  001134  2A10               	incf	___awdiv@counter,f,c
  4331  001136                     l661:
  4332  001136  AE0F               	btfss	___awdiv@divisor+1,7,c
  4333  001138  D7FA               	goto	l662
  4334  00113A                     u1000:
  4335  00113A  90D8               	bcf	status,0,c
  4336  00113C  3612               	rlcf	___awdiv@quotient,f,c
  4337  00113E  3613               	rlcf	___awdiv@quotient+1,f,c
  4338  001140  500E               	movf	___awdiv@divisor,w,c
  4339  001142  5C0C               	subwf	___awdiv@dividend,w,c
  4340  001144  500F               	movf	___awdiv@divisor+1,w,c
  4341  001146  580D               	subwfb	___awdiv@dividend+1,w,c
  4342  001148  A0D8               	btfss	status,0,c
  4343  00114A  D005               	goto	l665
  4344  00114C  500E               	movf	___awdiv@divisor,w,c
  4345  00114E  5E0C               	subwf	___awdiv@dividend,f,c
  4346  001150  500F               	movf	___awdiv@divisor+1,w,c
  4347  001152  5A0D               	subwfb	___awdiv@dividend+1,f,c
  4348  001154  8012               	bsf	___awdiv@quotient,0,c
  4349  001156                     l665:
  4350  001156  90D8               	bcf	status,0,c
  4351  001158  320F               	rrcf	___awdiv@divisor+1,f,c
  4352  00115A  320E               	rrcf	___awdiv@divisor,f,c
  4353  00115C  2E10               	decfsz	___awdiv@counter,f,c
  4354  00115E  D7ED               	goto	u1000
  4355  001160                     l666:
  4356  001160  5011               	movf	___awdiv@sign,w,c
  4357  001162  B4D8               	btfsc	status,2,c
  4358  001164  D004               	goto	l667
  4359  001166  6C12               	negf	___awdiv@quotient,c
  4360  001168  1E13               	comf	___awdiv@quotient+1,f,c
  4361  00116A  B0D8               	btfsc	status,0,c
  4362  00116C  2A13               	incf	___awdiv@quotient+1,f,c
  4363  00116E                     l667:
  4364  00116E  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  4365  001172  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  4366  001176  0012               	return	
  4367  001178                     __end_of___awdiv:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           intcon3	equ	0xFF0
  4377                           postinc0	equ	0xFEE
  4378                           wreg	equ	0xFE8
  4379                           postinc1	equ	0xFE6
  4380                           postdec1	equ	0xFE5
  4381                           fsr1h	equ	0xFE2
  4382                           fsr1l	equ	0xFE1
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           plusw2	equ	0xFDB
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _LCD_init *****************
  4392 ;; Defined at:
  4393 ;;		line 49 in file "lcd.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0, cstack
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4407 ;;      Params:         0       0       0       0
  4408 ;;      Locals:         0       0       0       0
  4409 ;;      Temps:          1       0       0       0
  4410 ;;      Totals:         1       0       0       0
  4411 ;;Total ram usage:        1 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    4
  4414 ;; This function calls:
  4415 ;;		_LCD_out
  4416 ;;		_LCD_send
  4417 ;; This function is called by:
  4418 ;;		_main
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text23
  4423  000D04                     __ptext23:
  4424                           	opt stack 0
  4425  000D04                     _LCD_init:
  4426                           	opt stack 26
  4427                           
  4428                           ;lcd.c: 52: LATA = 0;
  4429                           
  4430                           ;incstack = 0
  4431  000D04  0E00               	movlw	0
  4432  000D06  6E89               	movwf	3977,c	;volatile
  4433                           
  4434                           ;lcd.c: 53: LATC = 0;
  4435  000D08  0E00               	movlw	0
  4436  000D0A  6E8B               	movwf	3979,c	;volatile
  4437                           
  4438                           ;lcd.c: 54: LATD = 0;
  4439  000D0C  0E00               	movlw	0
  4440  000D0E  6E8C               	movwf	3980,c	;volatile
  4441                           
  4442                           ;lcd.c: 57: TRISA = 0;
  4443  000D10  0E00               	movlw	0
  4444  000D12  6E92               	movwf	3986,c	;volatile
  4445                           
  4446                           ;lcd.c: 58: TRISC = 0;
  4447  000D14  0E00               	movlw	0
  4448  000D16  6E94               	movwf	3988,c	;volatile
  4449                           
  4450                           ;lcd.c: 59: TRISD = 0;
  4451  000D18  0E00               	movlw	0
  4452  000D1A  6E95               	movwf	3989,c	;volatile
  4453                           
  4454                           ;lcd.c: 63: _delay((unsigned long)((15)*(8000000/4000.0)));
  4455  000D1C  0E27               	movlw	39
  4456  000D1E  6E0A               	movwf	??_LCD_init& (0+255),c
  4457  000D20  0EF5               	movlw	245
  4458  000D22                     u2097:
  4459  000D22  2EE8               	decfsz	wreg,f,c
  4460  000D24  D7FE               	bra	u2097
  4461  000D26  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4462  000D28  D7FC               	bra	u2097
  4463  000D2A  F000               	nop	
  4464                           
  4465                           ;lcd.c: 64: LCD_out(0b0011);
  4466  000D2C  0E03               	movlw	3
  4467  000D2E  ECFA  F008         	call	_LCD_out
  4468                           
  4469                           ;lcd.c: 65: _delay((unsigned long)((5)*(8000000/4000.0)));
  4470  000D32  0E0D               	movlw	13
  4471  000D34  6E0A               	movwf	??_LCD_init& (0+255),c
  4472  000D36  0EFC               	movlw	252
  4473  000D38                     u2107:
  4474  000D38  2EE8               	decfsz	wreg,f,c
  4475  000D3A  D7FE               	bra	u2107
  4476  000D3C  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4477  000D3E  D7FC               	bra	u2107
  4478                           
  4479                           ;lcd.c: 66: LCD_out(0b0011);
  4480  000D40  0E03               	movlw	3
  4481  000D42  ECFA  F008         	call	_LCD_out
  4482                           
  4483                           ;lcd.c: 67: _delay((unsigned long)((200)*(8000000/4000000.0)));
  4484  000D46  0E85               	movlw	133
  4485  000D48                     u2117:
  4486  000D48  2EE8               	decfsz	wreg,f,c
  4487  000D4A  D7FE               	bra	u2117
  4488  000D4C  F000               	nop	
  4489                           
  4490                           ;lcd.c: 68: LCD_out(0b0011);
  4491  000D4E  0E03               	movlw	3
  4492  000D50  ECFA  F008         	call	_LCD_out
  4493                           
  4494                           ;lcd.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4495  000D54  0E21               	movlw	33
  4496  000D56                     u2127:
  4497  000D56  2EE8               	decfsz	wreg,f,c
  4498  000D58  D7FE               	bra	u2127
  4499  000D5A  F000               	nop	
  4500                           
  4501                           ;lcd.c: 70: LCD_out(0b0010);
  4502  000D5C  0E02               	movlw	2
  4503  000D5E  ECFA  F008         	call	_LCD_out
  4504                           
  4505                           ;lcd.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4506  000D62  0E21               	movlw	33
  4507  000D64                     u2137:
  4508  000D64  2EE8               	decfsz	wreg,f,c
  4509  000D66  D7FE               	bra	u2137
  4510  000D68  F000               	nop	
  4511                           
  4512                           ;lcd.c: 73: LCD_send(0b00101000, 0);
  4513  000D6A  0E00               	movlw	0
  4514  000D6C  6E08               	movwf	LCD_send@type,c
  4515  000D6E  0E28               	movlw	40
  4516  000D70  ECDF  F009         	call	_LCD_send
  4517                           
  4518                           ;lcd.c: 74: _delay((unsigned long)((2)*(8000000/4000.0)));
  4519  000D74  0E06               	movlw	6
  4520  000D76  6E0A               	movwf	??_LCD_init& (0+255),c
  4521  000D78  0E30               	movlw	48
  4522  000D7A                     u2147:
  4523  000D7A  2EE8               	decfsz	wreg,f,c
  4524  000D7C  D7FE               	bra	u2147
  4525  000D7E  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4526  000D80  D7FC               	bra	u2147
  4527  000D82  D000               	nop2	
  4528                           
  4529                           ;lcd.c: 75: LCD_send(0b00001000, 0);
  4530  000D84  0E00               	movlw	0
  4531  000D86  6E08               	movwf	LCD_send@type,c
  4532  000D88  0E08               	movlw	8
  4533  000D8A  ECDF  F009         	call	_LCD_send
  4534                           
  4535                           ;lcd.c: 76: _delay((unsigned long)((2)*(8000000/4000.0)));
  4536  000D8E  0E06               	movlw	6
  4537  000D90  6E0A               	movwf	??_LCD_init& (0+255),c
  4538  000D92  0E30               	movlw	48
  4539  000D94                     u2157:
  4540  000D94  2EE8               	decfsz	wreg,f,c
  4541  000D96  D7FE               	bra	u2157
  4542  000D98  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4543  000D9A  D7FC               	bra	u2157
  4544  000D9C  D000               	nop2	
  4545                           
  4546                           ;lcd.c: 77: LCD_send(0b00000001, 0);
  4547  000D9E  0E00               	movlw	0
  4548  000DA0  6E08               	movwf	LCD_send@type,c
  4549  000DA2  0E01               	movlw	1
  4550  000DA4  ECDF  F009         	call	_LCD_send
  4551                           
  4552                           ;lcd.c: 78: _delay((unsigned long)((2)*(8000000/4000.0)));
  4553  000DA8  0E06               	movlw	6
  4554  000DAA  6E0A               	movwf	??_LCD_init& (0+255),c
  4555  000DAC  0E30               	movlw	48
  4556  000DAE                     u2167:
  4557  000DAE  2EE8               	decfsz	wreg,f,c
  4558  000DB0  D7FE               	bra	u2167
  4559  000DB2  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4560  000DB4  D7FC               	bra	u2167
  4561  000DB6  D000               	nop2	
  4562                           
  4563                           ;lcd.c: 79: LCD_send(0b00000110, 0);
  4564  000DB8  0E00               	movlw	0
  4565  000DBA  6E08               	movwf	LCD_send@type,c
  4566  000DBC  0E06               	movlw	6
  4567  000DBE  ECDF  F009         	call	_LCD_send
  4568                           
  4569                           ;lcd.c: 80: _delay((unsigned long)((2)*(8000000/4000.0)));
  4570  000DC2  0E06               	movlw	6
  4571  000DC4  6E0A               	movwf	??_LCD_init& (0+255),c
  4572  000DC6  0E30               	movlw	48
  4573  000DC8                     u2177:
  4574  000DC8  2EE8               	decfsz	wreg,f,c
  4575  000DCA  D7FE               	bra	u2177
  4576  000DCC  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4577  000DCE  D7FC               	bra	u2177
  4578  000DD0  D000               	nop2	
  4579                           
  4580                           ;lcd.c: 81: LCD_send(0b00001100, 0);
  4581  000DD2  0E00               	movlw	0
  4582  000DD4  6E08               	movwf	LCD_send@type,c
  4583  000DD6  0E0C               	movlw	12
  4584  000DD8  ECDF  F009         	call	_LCD_send
  4585                           
  4586                           ;lcd.c: 82: _delay((unsigned long)((2)*(8000000/4000.0)));
  4587  000DDC  0E06               	movlw	6
  4588  000DDE  6E0A               	movwf	??_LCD_init& (0+255),c
  4589  000DE0  0E30               	movlw	48
  4590  000DE2                     u2187:
  4591  000DE2  2EE8               	decfsz	wreg,f,c
  4592  000DE4  D7FE               	bra	u2187
  4593  000DE6  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4594  000DE8  D7FC               	bra	u2187
  4595  000DEA  D000               	nop2	
  4596  000DEC  0012               	return		;funcret
  4597  000DEE                     __end_of_LCD_init:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           intcon3	equ	0xFF0
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           postinc1	equ	0xFE6
  4610                           postdec1	equ	0xFE5
  4611                           fsr1h	equ	0xFE2
  4612                           fsr1l	equ	0xFE1
  4613                           indf2	equ	0xFDF
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           plusw2	equ	0xFDB
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8
  4620                           
  4621 ;; *************** function _LCD_send *****************
  4622 ;; Defined at:
  4623 ;;		line 34 in file "lcd.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  Byte            1    wreg     unsigned char 
  4626 ;;  type            1    7[COMRAM] unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  Byte            1    8[COMRAM] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4638 ;;      Params:         1       0       0       0
  4639 ;;      Locals:         1       0       0       0
  4640 ;;      Temps:          0       0       0       0
  4641 ;;      Totals:         2       0       0       0
  4642 ;;Total ram usage:        2 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    3
  4645 ;; This function calls:
  4646 ;;		_LCD_out
  4647 ;; This function is called by:
  4648 ;;		_LCD_init
  4649 ;;		_LCD_line
  4650 ;;		_LCD_string
  4651 ;;		_LCD_clear
  4652 ;;		_print_RFID
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text24
  4657  0013BE                     __ptext24:
  4658                           	opt stack 0
  4659  0013BE                     _LCD_send:
  4660                           	opt stack 26
  4661                           
  4662                           ;incstack = 0
  4663                           ;LCD_send@Byte stored from wreg
  4664  0013BE  6E09               	movwf	LCD_send@Byte,c
  4665                           
  4666                           ;lcd.c: 38: PORTAbits.RA6 = type;
  4667  0013C0  B008               	btfsc	LCD_send@type,0,c
  4668  0013C2  D002               	bra	u965
  4669  0013C4  9C80               	bcf	3968,6,c	;volatile
  4670  0013C6  D001               	bra	u966
  4671  0013C8                     u965:
  4672  0013C8  8C80               	bsf	3968,6,c	;volatile
  4673  0013CA                     u966:
  4674                           
  4675                           ;lcd.c: 41: LCD_out(Byte >> 4);
  4676  0013CA  3809               	swapf	LCD_send@Byte,w,c
  4677  0013CC  0B0F               	andlw	15
  4678  0013CE  ECFA  F008         	call	_LCD_out
  4679                           
  4680                           ;lcd.c: 42: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4681  0013D2  0E06               	movlw	6
  4682  0013D4                     u2197:
  4683  0013D4  2EE8               	decfsz	wreg,f,c
  4684  0013D6  D7FE               	bra	u2197
  4685  0013D8  D000               	nop2	
  4686                           
  4687                           ;lcd.c: 44: LCD_out(Byte);
  4688  0013DA  5009               	movf	LCD_send@Byte,w,c
  4689  0013DC  ECFA  F008         	call	_LCD_out
  4690                           
  4691                           ;lcd.c: 45: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4692  0013E0  0E21               	movlw	33
  4693  0013E2                     u2207:
  4694  0013E2  2EE8               	decfsz	wreg,f,c
  4695  0013E4  D7FE               	bra	u2207
  4696  0013E6  F000               	nop	
  4697  0013E8  0012               	return		;funcret
  4698  0013EA                     __end_of_LCD_send:
  4699                           	opt stack 0
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           intcon3	equ	0xFF0
  4708                           postinc0	equ	0xFEE
  4709                           wreg	equ	0xFE8
  4710                           postinc1	equ	0xFE6
  4711                           postdec1	equ	0xFE5
  4712                           fsr1h	equ	0xFE2
  4713                           fsr1l	equ	0xFE1
  4714                           indf2	equ	0xFDF
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           plusw2	equ	0xFDB
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _LCD_out *****************
  4723 ;; Defined at:
  4724 ;;		line 19 in file "lcd.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  number          1    wreg     unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  number          1    6[COMRAM] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4738 ;;      Params:         0       0       0       0
  4739 ;;      Locals:         1       0       0       0
  4740 ;;      Temps:          1       0       0       0
  4741 ;;      Totals:         2       0       0       0
  4742 ;;Total ram usage:        2 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    2
  4745 ;; This function calls:
  4746 ;;		_E_TOG
  4747 ;; This function is called by:
  4748 ;;		_LCD_send
  4749 ;;		_LCD_init
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text25
  4754  0011F4                     __ptext25:
  4755                           	opt stack 0
  4756  0011F4                     _LCD_out:
  4757                           	opt stack 26
  4758                           
  4759                           ;incstack = 0
  4760                           ;LCD_out@number stored from wreg
  4761  0011F4  6E07               	movwf	LCD_out@number,c
  4762                           
  4763                           ;lcd.c: 22: PORTCbits.RC1 = (number & 0b0001);
  4764  0011F6  C007  F006         	movff	LCD_out@number,??_LCD_out
  4765  0011FA  0E01               	movlw	1
  4766  0011FC  1606               	andwf	??_LCD_out,f,c
  4767  0011FE  4606               	rlncf	??_LCD_out,f,c
  4768  001200  5082               	movf	3970,w,c	;volatile
  4769  001202  1806               	xorwf	??_LCD_out,w,c
  4770  001204  0BFD               	andlw	-3
  4771  001206  1806               	xorwf	??_LCD_out,w,c
  4772  001208  6E82               	movwf	3970,c	;volatile
  4773                           
  4774                           ;lcd.c: 23: PORTCbits.RC2 = (number & 0b0010) >> 1;
  4775  00120A  C007  F006         	movff	LCD_out@number,??_LCD_out
  4776  00120E  90D8               	bcf	status,0,c
  4777  001210  3206               	rrcf	??_LCD_out,f,c
  4778  001212  0E01               	movlw	1
  4779  001214  1606               	andwf	??_LCD_out,f,c
  4780  001216  4606               	rlncf	??_LCD_out,f,c
  4781  001218  4606               	rlncf	??_LCD_out,f,c
  4782  00121A  5082               	movf	3970,w,c	;volatile
  4783  00121C  1806               	xorwf	??_LCD_out,w,c
  4784  00121E  0BFB               	andlw	-5
  4785  001220  1806               	xorwf	??_LCD_out,w,c
  4786  001222  6E82               	movwf	3970,c	;volatile
  4787                           
  4788                           ;lcd.c: 24: PORTDbits.RD0 = (number & 0b0100) >> 2;
  4789  001224  C007  F006         	movff	LCD_out@number,??_LCD_out
  4790  001228  90D8               	bcf	status,0,c
  4791  00122A  3206               	rrcf	??_LCD_out,f,c
  4792  00122C  90D8               	bcf	status,0,c
  4793  00122E  3206               	rrcf	??_LCD_out,f,c
  4794  001230  0E01               	movlw	1
  4795  001232  1606               	andwf	??_LCD_out,f,c
  4796  001234  5083               	movf	3971,w,c	;volatile
  4797  001236  1806               	xorwf	??_LCD_out,w,c
  4798  001238  0BFE               	andlw	-2
  4799  00123A  1806               	xorwf	??_LCD_out,w,c
  4800  00123C  6E83               	movwf	3971,c	;volatile
  4801                           
  4802                           ;lcd.c: 25: PORTDbits.RD1 = (number & 0b1000) >> 3;
  4803  00123E  C007  F006         	movff	LCD_out@number,??_LCD_out
  4804  001242  90D8               	bcf	status,0,c
  4805  001244  3206               	rrcf	??_LCD_out,f,c
  4806  001246  90D8               	bcf	status,0,c
  4807  001248  3206               	rrcf	??_LCD_out,f,c
  4808  00124A  90D8               	bcf	status,0,c
  4809  00124C  3206               	rrcf	??_LCD_out,f,c
  4810  00124E  0E01               	movlw	1
  4811  001250  1606               	andwf	??_LCD_out,f,c
  4812  001252  4606               	rlncf	??_LCD_out,f,c
  4813  001254  5083               	movf	3971,w,c	;volatile
  4814  001256  1806               	xorwf	??_LCD_out,w,c
  4815  001258  0BFD               	andlw	-3
  4816  00125A  1806               	xorwf	??_LCD_out,w,c
  4817  00125C  6E83               	movwf	3971,c	;volatile
  4818                           
  4819                           ;lcd.c: 27: E_TOG();
  4820  00125E  EC5B  F00A         	call	_E_TOG	;wreg free
  4821                           
  4822                           ;lcd.c: 28: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4823  001262  0E03               	movlw	3
  4824  001264                     u2217:
  4825  001264  2EE8               	decfsz	wreg,f,c
  4826  001266  D7FE               	bra	u2217
  4827  001268  F000               	nop	
  4828  00126A  0012               	return		;funcret
  4829  00126C                     __end_of_LCD_out:
  4830                           	opt stack 0
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           intcon3	equ	0xFF0
  4839                           postinc0	equ	0xFEE
  4840                           wreg	equ	0xFE8
  4841                           postinc1	equ	0xFE6
  4842                           postdec1	equ	0xFE5
  4843                           fsr1h	equ	0xFE2
  4844                           fsr1l	equ	0xFE1
  4845                           indf2	equ	0xFDF
  4846                           postinc2	equ	0xFDE
  4847                           postdec2	equ	0xFDD
  4848                           plusw2	equ	0xFDB
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function _E_TOG *****************
  4854 ;; Defined at:
  4855 ;;		line 4 in file "lcd.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;		None
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4869 ;;      Params:         0       0       0       0
  4870 ;;      Locals:         0       0       0       0
  4871 ;;      Temps:          0       0       0       0
  4872 ;;      Totals:         0       0       0       0
  4873 ;;Total ram usage:        0 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    1
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_LCD_out
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text26
  4884  0014B6                     __ptext26:
  4885                           	opt stack 0
  4886  0014B6                     _E_TOG:
  4887                           	opt stack 26
  4888                           
  4889                           ;lcd.c: 5: PORTCbits.RC0 = 1;
  4890                           
  4891                           ;incstack = 0
  4892  0014B6  8082               	bsf	3970,0,c	;volatile
  4893                           
  4894                           ;lcd.c: 6: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4895  0014B8  0E03               	movlw	3
  4896  0014BA                     u2227:
  4897  0014BA  2EE8               	decfsz	wreg,f,c
  4898  0014BC  D7FE               	bra	u2227
  4899  0014BE  F000               	nop	
  4900                           
  4901                           ;lcd.c: 7: PORTCbits.RC0 = 0;
  4902  0014C0  9082               	bcf	3970,0,c	;volatile
  4903                           
  4904                           ;lcd.c: 8: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4905  0014C2  0E03               	movlw	3
  4906  0014C4                     u2237:
  4907  0014C4  2EE8               	decfsz	wreg,f,c
  4908  0014C6  D7FE               	bra	u2237
  4909  0014C8  F000               	nop	
  4910  0014CA  0012               	return		;funcret
  4911  0014CC                     __end_of_E_TOG:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon	equ	0xFF2
  4920                           intcon3	equ	0xFF0
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           postinc1	equ	0xFE6
  4924                           postdec1	equ	0xFE5
  4925                           fsr1h	equ	0xFE2
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           plusw2	equ	0xFDB
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _InterruptHandlerHigh *****************
  4936 ;; Defined at:
  4937 ;;		line 21 in file "main.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  rx_char         1    4[COMRAM] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4951 ;;      Params:         0       0       0       0
  4952 ;;      Locals:         1       0       0       0
  4953 ;;      Temps:          4       0       0       0
  4954 ;;      Totals:         5       0       0       0
  4955 ;;Total ram usage:        5 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		Interrupt level 2
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	intcode
  4965  000008                     __pintcode:
  4966                           	opt stack 0
  4967  000008                     _InterruptHandlerHigh:
  4968                           	opt stack 25
  4969                           
  4970                           ;incstack = 0
  4971  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4972  00000A  CFD9 F001          	movff	fsr2l,??_InterruptHandlerHigh
  4973  00000E  CFDA F002          	movff	fsr2h,??_InterruptHandlerHigh+1
  4974  000012  CFF3 F003          	movff	prodl,??_InterruptHandlerHigh+2
  4975  000016  CFF4 F004          	movff	prodh,??_InterruptHandlerHigh+3
  4976                           
  4977                           ;main.c: 24: static char count = 0;;main.c: 25: char rx_char;;main.c: 27: if (PIR1bits.R
      +                          CIF) {
  4978  00001A  AA9E               	btfss	3998,5,c	;volatile
  4979  00001C  D01A               	goto	i2l133
  4980                           
  4981                           ;main.c: 28: rx_char = RCREG;
  4982  00001E  CFAE F005          	movff	4014,InterruptHandlerHigh@rx_char	;volatile
  4983                           
  4984                           ;main.c: 29: if (rx_char == 0x02) {
  4985  000022  0E02               	movlw	2
  4986  000024  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  4987  000026  A4D8               	btfss	status,2,c
  4988  000028  D002               	goto	i2l134
  4989                           
  4990                           ;main.c: 30: count = 0;
  4991  00002A  0E00               	movlw	0
  4992  00002C  6E39               	movwf	InterruptHandlerHigh@count,c
  4993  00002E                     i2l134:
  4994                           
  4995                           ;main.c: 31: };main.c: 32: if (rx_char == 0x03) {
  4996  00002E  0E03               	movlw	3
  4997  000030  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  4998  000032  A4D8               	btfss	status,2,c
  4999  000034  D003               	goto	i2l135
  5000                           
  5001                           ;main.c: 33: card_read = 1;
  5002  000036  0E01               	movlw	1
  5003  000038  0100               	movlb	0	; () banked
  5004  00003A  6FF8               	movwf	_card_read& (0+255),b	;volatile
  5005  00003C                     i2l135:
  5006                           
  5007                           ;main.c: 34: };main.c: 35: string_rfid[count] = rx_char;
  5008                           
  5009                           ; BSR set to: 0
  5010  00003C  5039               	movf	InterruptHandlerHigh@count,w,c
  5011  00003E  0D01               	mullw	1
  5012  000040  0E3C               	movlw	low _string_rfid
  5013  000042  24F3               	addwf	prodl,w,c
  5014  000044  6ED9               	movwf	fsr2l,c
  5015  000046  0E00               	movlw	high _string_rfid
  5016  000048  20F4               	addwfc	prodh,w,c
  5017  00004A  6EDA               	movwf	fsr2h,c
  5018  00004C  C005  FFDF         	movff	InterruptHandlerHigh@rx_char,indf2
  5019                           
  5020                           ;main.c: 36: count++;
  5021  000050  2A39               	incf	InterruptHandlerHigh@count,f,c
  5022  000052                     i2l133:
  5023                           
  5024                           ;main.c: 37: };main.c: 45: if (INTCONbits.INT0IF) {
  5025  000052  A2F2               	btfss	intcon,1,c	;volatile
  5026  000054  D007               	goto	i2l136
  5027                           
  5028                           ;main.c: 47: if (PORTCbits.RC3 == 1) {
  5029  000056  B682               	btfsc	3970,3,c	;volatile
  5030                           
  5031                           ;main.c: 48: if (PORTCbits.RC3 == 1) {
  5032  000058  A682               	btfss	3970,3,c	;volatile
  5033  00005A  D003               	goto	i2l138
  5034                           
  5035                           ;main.c: 51: card_read = 0;
  5036  00005C  0E00               	movlw	0
  5037  00005E  0100               	movlb	0	; () banked
  5038  000060  6FF8               	movwf	_card_read& (0+255),b	;volatile
  5039  000062                     i2l138:
  5040                           
  5041                           ;main.c: 53: };main.c: 54: };main.c: 56: INTCONbits.INT0IF = 0;
  5042                           
  5043                           ; BSR set to: 0
  5044                           
  5045                           ; BSR set to: 0
  5046  000062  92F2               	bcf	intcon,1,c	;volatile
  5047  000064                     i2l136:
  5048  000064  C004  FFF4         	movff	??_InterruptHandlerHigh+3,prodh
  5049  000068  C003  FFF3         	movff	??_InterruptHandlerHigh+2,prodl
  5050  00006C  C002  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  5051  000070  C001  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  5052  000074  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5053  000076  0011               	retfie		f
  5054  000078                     __end_of_InterruptHandlerHigh:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           intcon3	equ	0xFF0
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postinc1	equ	0xFE6
  5067                           postdec1	equ	0xFE5
  5068                           fsr1h	equ	0xFE2
  5069                           fsr1l	equ	0xFE1
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           plusw2	equ	0xFDB
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           intcon	equ	0xFF2
  5084                           intcon3	equ	0xFF0
  5085                           postinc0	equ	0xFEE
  5086                           wreg	equ	0xFE8
  5087                           postinc1	equ	0xFE6
  5088                           postdec1	equ	0xFE5
  5089                           fsr1h	equ	0xFE2
  5090                           fsr1l	equ	0xFE1
  5091                           indf2	equ	0xFDF
  5092                           postinc2	equ	0xFDE
  5093                           postdec2	equ	0xFDD
  5094                           plusw2	equ	0xFDB
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099                           	psect	rparam
  5100  0000                     tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           intcon	equ	0xFF2
  5107                           intcon3	equ	0xFF0
  5108                           postinc0	equ	0xFEE
  5109                           wreg	equ	0xFE8
  5110                           postinc1	equ	0xFE6
  5111                           postdec1	equ	0xFE5
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122                           	psect	temp
  5123  00004D                     btemp:
  5124                           	opt stack 0
  5125  00004D                     	ds	1
  5126  0000                     int$flags	set	btemp
  5127  0000                     wtemp8	set	btemp+1
  5128  0000                     ttemp5	set	btemp+1
  5129  0000                     ttemp6	set	btemp+4
  5130  0000                     ttemp7	set	btemp+8
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           intcon3	equ	0xFF0
  5139                           postinc0	equ	0xFEE
  5140                           wreg	equ	0xFE8
  5141                           postinc1	equ	0xFE6
  5142                           postdec1	equ	0xFE5
  5143                           fsr1h	equ	0xFE2
  5144                           fsr1l	equ	0xFE1
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           postdec2	equ	0xFDD
  5148                           plusw2	equ	0xFDB
  5149                           fsr2h	equ	0xFDA
  5150                           fsr2l	equ	0xFD9
  5151                           status	equ	0xFD8


Data Sizes:
    Strings     55
    Constant    10
    Data        0
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      76
    BANK0           160    152     153
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[14]), STR_3(CODE[6]), STR_2(CODE[10]), 
		 -> STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), main@buf(BANK0[16]), print_IR@buf(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    print_RFID@dis	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(COMRAM[17]), 

    print_RFID@pa	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(COMRAM[17]), 

    smoothLeft@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothLeft@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    smoothLeft@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothLeft@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    smoothRight@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothRight@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    smoothRight@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothRight@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    backwards@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    backwards@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    backwards@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    forwards@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    forwards@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    decelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    decelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    accelerate2@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    accelerate2@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    accelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    accelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    read_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S537Motor$duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S537Motor$duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    print_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    LCD_string@string	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), main@buf(BANK0[16]), print_IR@buf(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_print_IR
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _print_RFID->_LCD_clear
    _print_RFID->_LCD_line
    _print_IR->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_string->_LCD_send
    _LCD_line->_LCD_send
    _LCD_clear->_LCD_send
    _forwards->_setMotorPWM
    _backwards->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _LCD_init->_LCD_send
    _LCD_send->_LCD_out

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               158   158      0   32018
                                             50 COMRAM     6     6      0
                                              0 BANK0    152   152      0
                           _LCD_init
                           _LCD_line
                         _LCD_string
                          _backwards
                           _forwards
                            _initPWM
                          _init_RFID
                        _init_TIMER5
                       _init_capture
                   _interrupt_EUSART
                           _print_IR
                         _print_RFID
                            _read_IR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     1      4    3130
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     1      4    2978
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    3954
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              6     4      2     560
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _print_RFID                                          10     6      4    3028
                                             10 COMRAM    10     6      4
                          _LCD_clear
                           _LCD_line
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _print_IR                                            19    17      2    5338
                                             31 COMRAM    19    17      2
                          _LCD_clear
                           _LCD_line
                         _LCD_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    1909
                                             17 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             12 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              5 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           2     0      2    1339
                                              9 COMRAM     2     0      2
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_line                                             1     1      0     958
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            1     1      0     914
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _interrupt_EUSART                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_capture                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _forwards                                             5     1      4    2978
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _backwards                                            5     1      4    2826
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    2454
                                             19 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             11 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0    1002
                                              9 COMRAM     1     1      0
                            _LCD_out
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_send                                             2     1      1     914
                                              7 COMRAM     2     1      1
                            _LCD_out
 ---------------------------------------------------------------------------------
 (3) _LCD_out                                              2     2      0      88
                                              5 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                 5     5      0      67
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _LCD_out
       _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _LCD_line
     _LCD_send
       _LCD_out
         _E_TOG
   _LCD_string
     _LCD_send
       _LCD_out
         _E_TOG
   _backwards
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _forwards
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initPWM
   _init_RFID
   _init_TIMER5
   _init_capture
   _interrupt_EUSART
   _print_IR
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_string
       _LCD_send
         _LCD_out
           _E_TOG
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _print_RFID
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _read_IR
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5       3        0.0%
DATA                 0      0      E5      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Dec  7 17:20:16 2018

                 print_RFID@pa 000B                             l50 1360                             l43 13A2  
                           l45 13B4                             l49 137E                   ___awdiv@sign 0011  
                print_RFID@dis 000D            ___wmul@multiplicand 0008                            l300 1098  
                          l301 10B0                            l215 0900                            l216 0954  
                          l160 05C2                            l152 0444                            l217 09A8  
                          l161 0572                            l153 04A6                            l145 0356  
                          l170 0826                            l243 0A88                            l171 06AA  
                          l163 064A                            l244 0ACE                            l420 0BEC  
                          l172 0806                            l148 0430                            l245 0B66  
                          l413 0B9A                            l173 06EA                            l157 053E  
                          l149 040A                            l430 0CD6                            l422 0BBA  
                          l414 0BB4                            l174 0736                            l166 05FA  
                          l158 04EE                            l431 0C84                            l423 0C1A  
                          l415 0BBE                            l167 06A0                            l360 1188  
                          l176 0786                            l168 066A                            l425 0C32  
                          l361 1184                            l290 1040                            l274 0FAA  
                          l282 0F14                            l178 07D6                            l291 0FEA  
                          l363 11BC                            l275 0F54                            l283 0EBE  
                          l179 07EA                            l292 1002                            l364 119A  
                          l268 12AC                            l276 0F6C                            l284 0ED6  
                          l293 101A                            l429 0C7E                            l269 126E  
                          l277 0F84                            l285 0EEE                            l298 10D6  
                          l299 1080                            l661 1136                            l662 112E  
                          l665 1156                            l921 1308                            l666 1160  
                          l658 1108                            l922 1312                            l667 116E  
                          l659 1118                            l931 134A                            l932 1354  
                          l917 12E8                            l918 12E0                            l927 1332  
                          l928 132A                            u965 13C8                            u966 13CA  
               print_IR@Values 0020                            prod 000FF3                            wreg 000FE8  
                  ?_LCD_string 000A                   __CFG_LVP$OFF 000000                __end_of_LCD_out 126C  
                         l2100 0C36                           l2300 0900                           l2522 05DC  
                         l2482 049E                           STR_1 0333                           STR_2 0329  
                         STR_3 033C                           STR_4 031B                           STR_5 030B  
                         u1000 113A                           u1040 12EC                           u1200 0CF6  
                         u1070 1336                           u2007 0E68                           u2017 0E76  
                         u1234 0B5A                           u1170 0C62                           u2107 0D38  
                         u1235 0B56                           u2027 0E84                           u1244 0B82  
                         u2117 0D48                           u1245 0B7E                           u2037 0E92  
                         _LATA 000F89                           u1190 0CDE                           _LATB 000F8A  
                         u2207 13E2                           u2127 0D56                           u2047 1378  
                         _LATC 000F8B                           u1360 0998                           _LATD 000F8C  
                         u2217 1264                           u2137 0D64                           u2057 13B6  
                         u2227 14BA                           u2147 0D7A                           u2067 145C  
                         u1355 0968                           u1380 09F8                           u1620 049E  
                         u2237 14C4                           u2157 0D94                           u2077 1038  
                         u2167 0DAE                           u2087 10CE                           u1375 09C0  
                         u2177 0DC8                           u2097 0D22                           u2187 0DE2  
                         u2197 13D4                           u1680 05DC                    main@counter 00DD  
                         u1907 0530                           u1917 05B4                           u1927 063C  
                         u1937 0692                           u1947 06D8                           u1957 07F4  
                         u1967 0F0C                           u1977 0FA2                           u1987 12A4  
                         u1997 11B2       __end_of_interrupt_EUSART 14E0                           _main 0344  
                         fsr1h 000FE2                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 004D  
                         _stop 126C                           prodh 000FF4                           prodl 000FF3  
                         start 0078             __size_of_LCD_clear 001C                   ?_init_TIMER5 0001  
                 ___param_bank 000000                    _string_rfid 003C               __end_of_LCD_line 13BE  
             __end_of_LCD_init 0DEE               __end_of_LCD_send 13EA                          ?_main 0001  
              __end_of___awdiv 1178                          ?_stop 001B                ___awdiv@divisor 000E  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                __end_of___lwdiv 131C  
              __end_of___lwmod 135E                          i2l133 0052                          i2l134 002E  
                        i2l135 003C                          i2l136 0064                          i2l138 0062  
              ___awdiv@counter 0010                          _RCREG 000FAE                          _E_TOG 14B6  
                        _TMR0H 000FD7                          _TMR0L 000FD6                          _SPBRG 000FAF  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                __end_of_initPWM 144C                __end_of_dpowers 030B  
              __end_of_read_IR 0A0E                          tablat 000FF5                          plusw2 000FDB  
                        ttemp5 004E                          ttemp6 0051                          ttemp7 0055  
                        status 000FD8                          wtemp8 004E                __end_of_sprintf 0D04  
               __CFG_MCLRE$OFF 000000                __initialization 1410            __size_of_LCD_string 0030  
                 __end_of_main 0830                   __end_of_stop 12CA                 __CFG_OSC$IRCIO 000000  
                _count_encoder 003A                         ??_main 0033                         ??_stop 001F  
                __activetblptr 000002                         ?_E_TOG 0001                      ??_LCD_out 0006  
                main@direction 00DB              __end_of_LCD_clear 1468                   ?_setMotorPWM 0014  
             ___awdiv@dividend 000C                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                ?_init_capture 0001                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                         ___wmul 13EA                      ??___awdiv 0010  
                    ??___lwdiv 000A                      ??___lwmod 0011                         clear_0 141A  
             __end_of_forwards 105E               ___awdiv@quotient 0012                         main@mL 00E6  
                       main@mR 00EF                         main@ii 00DA                      ??_initPWM 0006  
                    ??_read_IR 0008                  main@threshold 00D8                   __mediumconst 0000  
             __end_of_print_IR 0E9C                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         stop@mL 001B                         stop@mR 001D  
                    ??_sprintf 0018                 ??_init_capture 0006               __end_of_turnLeft 0FC8  
                   __accesstop 0060        __end_of__initialization 1420                      ?_LCD_line 0001  
                    ?_LCD_init 0001                      ?_LCD_send 0008                  ___rparam_used 000001  
                __end_of_E_TOG 14CC             __size_of_backwards 0096                   LCD_line@line 000A  
               __pcstackCOMRAM 0001           __size_of_init_TIMER5 001A                   LCD_send@Byte 0009  
                 LCD_send@type 0008                        ??_E_TOG 0006  __size_of_InterruptHandlerHigh 0070  
                 ??_LCD_string 000C                     __pbssBANK0 00F8               LCD_string@string 000A  
           __size_of_init_RFID 001A              ?_interrupt_EUSART 0001                     ??_LCD_line 000A  
                   ??_LCD_init 000A                     ??_LCD_send 0009             ??_interrupt_EUSART 0006  
                      ?___wmul 0006             __end_of_LCD_string 138E                        _CAP1CON 000F63  
                      _CAP2CON 000F62                        _DFLTCON 000F60                        _LCD_out 11F4  
            __end_of_backwards 10F4                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
         __size_of_setMotorPWM 0182                      ?_forwards 001B             __size_of_turnRight 0096  
                      __Hparam 0000                        __Lparam 0000                      ?_print_IR 0020  
                      ___awdiv 10F4                __size_of___wmul 0026                        ___lwdiv 12CA  
                      ___lwmod 131C           __end_of_init_capture 1482                   __psmallconst 0300  
                      __pcinit 1410                        __ramtop 0300                      ?_turnLeft 001B  
                      __ptext0 0344                        __ptext1 0E9C                        __ptext2 0F32  
                      __ptext3 126C                        __ptext4 0830                        __ptext5 1178  
                      __ptext6 0DEE                        __ptext7 0B90                        __ptext8 131C  
                      __ptext9 12CA              __end_of_init_RFID 14B6                      _T0CONbits 000FD5  
                      _initPWM 142E                        _dpowers 0301                        _read_IR 0830  
                    _T5CONbits 000FB7                        main@buf 00C4                        _sprintf 0B90  
                    _LCD_clear 144C           end_of_initialization 1420             setMotorPWM@PWMduty 0019  
                __Lmediumconst 0000                     ??_forwards 001F                      _RCSTAbits 000FAB  
                   ??_print_IR 0022                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                   ??_turnLeft 001F                     _print_RFID 1178                      _PORTAbits 000F80  
                    _PORTCbits 000F82                      _PORTDbits 000F83              __end_of_turnRight 0F32  
                    _TRISCbits 000F94                    print_IR@buf 0023                     ?_LCD_clear 0001  
                   main@Values 00DE                      _TXSTAbits 000FAC              __size_of_LCD_line 0030  
            __size_of_LCD_init 00EA              __size_of_LCD_send 002C                      _Direction 003B  
               __end_of___wmul 1410                    _BAUDCONbits 000FAA            start_initialization 1410  
    InterruptHandlerHigh@count 0039   __end_of_InterruptHandlerHigh 0078                  ??_init_TIMER5 0006  
        __size_of_init_capture 001A                  LCD_out@number 0007                       ??___wmul 000A  
                   forwards@mL 001B                     forwards@mR 001D      __size_of_interrupt_EUSART 0014  
                  ?_print_RFID 000B                       ?_LCD_out 0001                    __pbssCOMRAM 0039  
                __pcstackBANK0 0060                    ??_LCD_clear 000A                      _backwards 105E  
                 _init_capture 1468                    sprintf@flag 001C                    sprintf@prec 0019  
                    _card_read 00F8              __size_of_forwards 0096               ___lwdiv@dividend 0006  
                    __pintcode 0008                       ?___awdiv 000C                       ?___lwdiv 0006  
                     ?___lwmod 000D              __size_of_print_IR 00AE            __end_of_init_TIMER5 149C  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66                       ?_initPWM 0001                    __smallconst 0300  
                     ?_read_IR 0006                 __size_of_E_TOG 0016              __size_of_turnLeft 0096  
                    _init_RFID 149C                  ??_setMotorPWM 0016               ___lwdiv@quotient 000A  
                     ?_sprintf 0012                  read_IR@Values 0006                     ?_backwards 001B  
                  backwards@mL 001B                    backwards@mR 001D                 ___wmul@product 000A  
                     _LATCbits 000F8B            __size_of_print_RFID 007C                       _LCD_line 138E  
                     _LCD_init 0D04                       _LCD_send 13BE                       _PIE1bits 000F9D  
                  turnRight@mL 001B                    turnRight@mR 001D                       _PIR1bits 000F9E  
            ___wmul@multiplier 0006                   setMotorPWM@m 0014           _InterruptHandlerHigh 0008  
                   ?_init_RFID 0001               __size_of_LCD_out 0078                      _turnRight 0E9C  
                  _INTCON2bits 000FF1                    _INTCON3bits 000FF0            __end_of_setMotorPWM 0B90  
                     __Hrparam 0000                    _init_TIMER5 1482                       __Lrparam 0000  
             __size_of___awdiv 0084               __size_of___lwdiv 0052               __size_of___lwmod 0042  
             _interrupt_EUSART 14CC          ?_InterruptHandlerHigh 0001                     sprintf@val 001D  
             __size_of_initPWM 001E               __size_of_read_IR 01DE                ___lwdiv@divisor 0008  
              ___lwdiv@counter 000C                     ?_turnRight 001B                       __ptext10 135E  
                     __ptext11 138E                       __ptext20 0A0E                       __ptext12 144C  
                     __ptext21 13EA                       __ptext13 14CC                       __ptext22 10F4  
                     __ptext14 1468                       __ptext23 0D04                       __ptext15 1482  
                     __ptext24 13BE                       __ptext16 149C                       __ptext25 11F4  
                     __ptext17 142E                       __ptext26 14B6                       __ptext18 0FC8  
                     __ptext19 105E                    ??_backwards 001F               __size_of_sprintf 0174  
                __size_of_main 04EC                       _forwards 0FC8                  __size_of_stop 005E  
                   turnLeft@mL 001B                     turnLeft@mR 001D                       _print_IR 0DEE  
                     int$flags 004D                       main@diff 00D6                   ??_print_RFID 000F  
                     _turnLeft 0F32                     _INTCONbits 000FF2                    ??_init_RFID 0006  
                   _LCD_string 135E                    _setMotorPWM 0A0E                       intlevel2 0000  
                    sprintf@ap 001A                      sprintf@sp 0012               ___lwmod@dividend 000D  
  InterruptHandlerHigh@rx_char 0005             __end_of_print_RFID 11F4                     _OSCCONbits 000FD3  
       ??_InterruptHandlerHigh 0001                       sprintf@c 001F                       sprintf@f 0014  
              ___lwmod@divisor 000F                ___lwmod@counter 0011                    ??_turnRight 001F  
        main@forwardsDirection 0060                   main@PWMcycle 00D4  
