

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Dec  6 19:50:08 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.00
    48                           ; Generated 27/05/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	smallconst
    83  000300                     __psmallconst:
    84                           	opt stack 0
    85  000300  00                 	db	0
    86  000301                     _dpowers:
    87                           	opt stack 0
    88  000301  0001               	dw	1
    89  000303  000A               	dw	10
    90  000305  0064               	dw	100
    91  000307  03E8               	dw	1000
    92  000309  2710               	dw	10000
    93  00030B                     __end_of_dpowers:
    94                           	opt stack 0
    95  0000                     _TRISCbits	set	3988
    96  0000                     _LATCbits	set	3979
    97  0000                     _LATB	set	3978
    98  0000                     _PTPERH	set	3962
    99  0000                     _PTPERL	set	3963
   100  0000                     _PWMCON1	set	3950
   101  0000                     _PWMCON0	set	3951
   102  0000                     _PTCON1	set	3966
   103  0000                     _PTCON0	set	3967
   104  0000                     _TRISB	set	3987
   105  0000                     _CAP1BUFL	set	3944
   106  0000                     _CAP1BUFH	set	3945
   107  0000                     _CAP2BUFL	set	3942
   108  0000                     _CAP2BUFH	set	3943
   109  0000                     _DFLTCON	set	3936
   110  0000                     _CAP2CON	set	3938
   111  0000                     _CAP1CON	set	3939
   112  0000                     _TRISD	set	3989
   113  0000                     _TRISC	set	3988
   114  0000                     _TRISA	set	3986
   115  0000                     _LATD	set	3980
   116  0000                     _LATC	set	3979
   117  0000                     _LATA	set	3977
   118  0000                     _PORTAbits	set	3968
   119  0000                     _PORTDbits	set	3971
   120  0000                     _PORTCbits	set	3970
   121  0000                     _PDC1H	set	3958
   122  0000                     _PDC1L	set	3959
   123  0000                     _PDC0H	set	3960
   124  0000                     _PDC0L	set	3961
   125  0000                     _PIE1bits	set	3997
   126  0000                     _RCSTAbits	set	4011
   127  0000                     _TXSTAbits	set	4012
   128  0000                     _BAUDCONbits	set	4010
   129  0000                     _SPBRGH	set	4016
   130  0000                     _SPBRG	set	4015
   131  0000                     _T5CONbits	set	4023
   132  0000                     _T5CON	set	4023
   133  0000                     _RCONbits	set	4048
   134  0000                     _OSCCONbits	set	4051
   135  0000                     _OSCCON	set	4051
   136  0000                     _ANSEL1	set	4025
   137  0000                     _ANSEL0	set	4024
   138  0000                     _RCREG	set	4014
   139  0000                     _PIR1bits	set	3998
   140  0000                     _TMR0H	set	4055
   141  0000                     _TMR0L	set	4054
   142  0000                     _T0CONbits	set	4053
   143  0000                     _INTCON2bits	set	4081
   144  0000                     _INTCON3bits	set	4080
   145  0000                     _INTCONbits	set	4082
   146  00030B  43                 	db	67	;'C'
   147  00030C  53                 	db	83	;'S'
   148  00030D  20                 	db	32
   149  00030E  49                 	db	73	;'I'
   150  00030F  4E                 	db	78	;'N'
   151  000310  43                 	db	67	;'C'
   152  000311  4F                 	db	79	;'O'
   153  000312  52                 	db	82	;'R'
   154  000313  52                 	db	82	;'R'
   155  000314  45                 	db	69	;'E'
   156  000315  43                 	db	67	;'C'
   157  000316  54                 	db	84	;'T'
   158  000317  20                 	db	32
   159  000318  25                 	db	37
   160  000319  64                 	db	100	;'d'
   161  00031A  00                 	db	0
   162  00031B  43                 	db	67	;'C'
   163  00031C  53                 	db	83	;'S'
   164  00031D  20                 	db	32
   165  00031E  43                 	db	67	;'C'
   166  00031F  4F                 	db	79	;'O'
   167  000320  52                 	db	82	;'R'
   168  000321  52                 	db	82	;'R'
   169  000322  45                 	db	69	;'E'
   170  000323  43                 	db	67	;'C'
   171  000324  54                 	db	84	;'T'
   172  000325  20                 	db	32
   173  000326  25                 	db	37
   174  000327  64                 	db	100	;'d'
   175  000328  00                 	db	0
   176  000329                     STR_4:
   177  000329  43                 	db	67	;'C'
   178  00032A  6F                 	db	111	;'o'
   179  00032B  75                 	db	117	;'u'
   180  00032C  6E                 	db	110	;'n'
   181  00032D  74                 	db	116	;'t'
   182  00032E  3A                 	db	58	;':'
   183  00032F  20                 	db	32
   184  000330  25                 	db	37
   185  000331  63                 	db	99	;'c'
   186  000332  00                 	db	0
   187  000333                     STR_2:
   188  000333  52                 	db	82	;'R'
   189  000334  69                 	db	105	;'i'
   190  000335  67                 	db	103	;'g'
   191  000336  68                 	db	104	;'h'
   192  000337  74                 	db	116	;'t'
   193  000338  3A                 	db	58	;':'
   194  000339  20                 	db	32
   195  00033A  25                 	db	37
   196  00033B  75                 	db	117	;'u'
   197  00033C  00                 	db	0
   198  00033D                     STR_1:
   199  00033D  4C                 	db	76	;'L'
   200  00033E  65                 	db	101	;'e'
   201  00033F  66                 	db	102	;'f'
   202  000340  74                 	db	116	;'t'
   203  000341  3A                 	db	58	;':'
   204  000342  20                 	db	32
   205  000343  25                 	db	37
   206  000344  75                 	db	117	;'u'
   207  000345  00                 	db	0
   208  000346                     STR_3:
   209  000346  52                 	db	82	;'R'
   210  000347  65                 	db	101	;'e'
   211  000348  61                 	db	97	;'a'
   212  000349  64                 	db	100	;'d'
   213  00034A  79                 	db	121	;'y'
   214  00034B  00                 	db	0
   215                           
   216                           ; #config settings
   217  00034C  00                 	db	0	; dummy byte at the end
   218  0000                     
   219                           	psect	cinit
   220  001430                     __pcinit:
   221                           	opt stack 0
   222  001430                     start_initialization:
   223                           	opt stack 0
   224  001430                     __initialization:
   225                           	opt stack 0
   226                           
   227                           ; Clear objects allocated to BANK1 (200 bytes)
   228  001430  EE01  F000         	lfsr	0,__pbssBANK1
   229  001434  0EC8               	movlw	200
   230  001436                     clear_0:
   231  001436  6AEE               	clrf	postinc0,c
   232  001438  06E8               	decf	wreg,f,c
   233  00143A  E1FD               	bnz	clear_0
   234                           
   235                           ; Clear objects allocated to BANK0 (3 bytes)
   236  00143C  0100               	movlb	0
   237  00143E  6BA6               	clrf	(__pbssBANK0+2)& (0+255),b
   238  001440  6BA5               	clrf	(__pbssBANK0+1)& (0+255),b
   239  001442  6BA4               	clrf	__pbssBANK0& (0+255),b
   240                           
   241                           ; Clear objects allocated to COMRAM (20 bytes)
   242  001444  EE00  F036         	lfsr	0,__pbssCOMRAM
   243  001448  0E14               	movlw	20
   244  00144A                     clear_1:
   245  00144A  6AEE               	clrf	postinc0,c
   246  00144C  06E8               	decf	wreg,f,c
   247  00144E  E1FD               	bnz	clear_1
   248  001450                     end_of_initialization:
   249                           	opt stack 0
   250  001450                     __end_of__initialization:
   251                           	opt stack 0
   252  001450  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   253  001452  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   254  001454  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  001456  6EF8               	movwf	tblptru,c
   256  001458  0100               	movlb	0
   257  00145A  EFA7  F001         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000036                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000036                     InterruptHandlerHigh@count:
   266                           	opt stack 0
   267  000036                     	ds	1
   268  000037                     _count_encoder:
   269                           	opt stack 0
   270  000037                     	ds	1
   271  000038                     _Direction:
   272                           	opt stack 0
   273  000038                     	ds	1
   274  000039                     _string_rfid:
   275                           	opt stack 0
   276  000039                     	ds	17
   277                           tblptru	equ	0xFF8
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssBANK0
   282  0000A4                     __pbssBANK0:
   283                           	opt stack 0
   284  0000A4                     _millis:
   285                           	opt stack 0
   286  0000A4                     	ds	2
   287  0000A6                     _card_read:
   288                           	opt stack 0
   289  0000A6                     	ds	1
   290                           tblptru	equ	0xFF8
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           
   294                           	psect	bssBANK1
   295  000100                     __pbssBANK1:
   296                           	opt stack 0
   297  000100                     _forwardsTime:
   298                           	opt stack 0
   299  000100                     	ds	100
   300  000164                     _forwardsDir:
   301                           	opt stack 0
   302  000164                     	ds	100
   303                           tblptru	equ	0xFF8
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           
   307                           	psect	cstackBANK0
   308  000060                     __pcstackBANK0:
   309                           	opt stack 0
   310  000060                     main@buf:
   311                           	opt stack 0
   312                           
   313                           ; 16 bytes @ 0x0
   314  000060                     	ds	16
   315  000070                     main@buf_793:
   316                           	opt stack 0
   317                           
   318                           ; 16 bytes @ 0x10
   319  000070                     	ds	16
   320  000080                     main@PWMcycle:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x20
   324  000080                     	ds	2
   325  000082                     main@diff:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x22
   329  000082                     	ds	2
   330  000084                     main@threshold:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x24
   334  000084                     	ds	2
   335  000086                     main@time:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x26
   339  000086                     	ds	1
   340  000087                     main@direction:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x27
   344  000087                     	ds	2
   345  000089                     main@counter:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x29
   349  000089                     	ds	1
   350  00008A                     main@Values:
   351                           	opt stack 0
   352                           
   353                           ; 8 bytes @ 0x2A
   354  00008A                     	ds	8
   355  000092                     main@mL:
   356                           	opt stack 0
   357                           
   358                           ; 9 bytes @ 0x32
   359  000092                     	ds	9
   360  00009B                     main@mR:
   361                           	opt stack 0
   362                           
   363                           ; 9 bytes @ 0x3B
   364  00009B                     	ds	9
   365                           tblptru	equ	0xFF8
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           
   369                           	psect	cstackCOMRAM
   370  000001                     __pcstackCOMRAM:
   371                           	opt stack 0
   372  000001                     ??_InterruptHandlerHigh:
   373  000001                     
   374                           ; 1 bytes @ 0x0
   375  000001                     	ds	4
   376  000005                     InterruptHandlerHigh@rx_char:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x4
   380  000005                     	ds	1
   381  000006                     ??_LCD_out:
   382  000006                     ??_delay_tenth_s:
   383  000006                     ?___wmul:
   384                           	opt stack 0
   385  000006                     ?___lwdiv:
   386                           	opt stack 0
   387  000006                     store@dir:
   388                           	opt stack 0
   389  000006                     read_IR@Values:
   390                           	opt stack 0
   391  000006                     ___wmul@multiplier:
   392                           	opt stack 0
   393  000006                     ___lwdiv@dividend:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x5
   397  000006                     	ds	1
   398  000007                     LCD_out@number:
   399                           	opt stack 0
   400  000007                     store@time:
   401                           	opt stack 0
   402  000007                     delay_tenth_s@tenth_seconds:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x6
   406  000007                     	ds	1
   407  000008                     ??_read_IR:
   408  000008                     ??_store:
   409  000008                     LCD_send@type:
   410                           	opt stack 0
   411  000008                     delay_tenth_s@i:
   412                           	opt stack 0
   413  000008                     ___wmul@multiplicand:
   414                           	opt stack 0
   415  000008                     ___lwdiv@divisor:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x7
   419  000008                     	ds	1
   420  000009                     LCD_send@Byte:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x8
   424  000009                     	ds	1
   425  00000A                     ??_LCD_init:
   426  00000A                     ??_LCD_clear:
   427  00000A                     LCD_line@line:
   428                           	opt stack 0
   429  00000A                     store@counter:
   430                           	opt stack 0
   431  00000A                     LCD_string@string:
   432                           	opt stack 0
   433  00000A                     ___wmul@product:
   434                           	opt stack 0
   435  00000A                     ___lwdiv@quotient:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x9
   439  00000A                     	ds	1
   440  00000B                     print_RFID@pa:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0xA
   444  00000B                     	ds	1
   445  00000C                     ?___awdiv:
   446                           	opt stack 0
   447  00000C                     ___lwdiv@counter:
   448                           	opt stack 0
   449  00000C                     ___awdiv@dividend:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0xB
   453  00000C                     	ds	1
   454  00000D                     ?___lwmod:
   455                           	opt stack 0
   456  00000D                     print_RFID@dis:
   457                           	opt stack 0
   458  00000D                     ___lwmod@dividend:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0xC
   462  00000D                     	ds	1
   463  00000E                     ___awdiv@divisor:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0xD
   467  00000E                     	ds	1
   468  00000F                     ??_print_RFID:
   469  00000F                     ___lwmod@divisor:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0xE
   473  00000F                     	ds	1
   474  000010                     ___awdiv@counter:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0xF
   478  000010                     	ds	1
   479  000011                     ___awdiv@sign:
   480                           	opt stack 0
   481  000011                     ___lwmod@counter:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x10
   485  000011                     	ds	1
   486  000012                     ?_sprintf:
   487                           	opt stack 0
   488  000012                     sprintf@sp:
   489                           	opt stack 0
   490  000012                     ___awdiv@quotient:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x11
   494  000012                     	ds	2
   495  000014                     setMotorPWM@m:
   496                           	opt stack 0
   497  000014                     sprintf@f:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x13
   501  000014                     	ds	2
   502  000016                     ??_setMotorPWM:
   503                           
   504                           ; 1 bytes @ 0x15
   505  000016                     	ds	2
   506  000018                     ??_sprintf:
   507                           
   508                           ; 1 bytes @ 0x17
   509  000018                     	ds	1
   510  000019                     sprintf@prec:
   511                           	opt stack 0
   512  000019                     setMotorPWM@PWMduty:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x18
   516  000019                     	ds	1
   517  00001A                     sprintf@flag:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x19
   521  00001A                     	ds	1
   522  00001B                     stop@mL:
   523                           	opt stack 0
   524  00001B                     turnLeft@mL:
   525                           	opt stack 0
   526  00001B                     turnRight@mL:
   527                           	opt stack 0
   528  00001B                     forwards@mL:
   529                           	opt stack 0
   530  00001B                     backwards@mL:
   531                           	opt stack 0
   532  00001B                     sprintf@ap:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x1A
   536  00001B                     	ds	2
   537  00001D                     stop@mR:
   538                           	opt stack 0
   539  00001D                     turnLeft@mR:
   540                           	opt stack 0
   541  00001D                     turnRight@mR:
   542                           	opt stack 0
   543  00001D                     forwards@mR:
   544                           	opt stack 0
   545  00001D                     backwards@mR:
   546                           	opt stack 0
   547  00001D                     sprintf@val:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x1C
   551  00001D                     	ds	2
   552  00001F                     ??_forwards:
   553  00001F                     ??_stop:
   554  00001F                     ??_turnLeft:
   555  00001F                     ??_turnRight:
   556  00001F                     ??_backwards:
   557  00001F                     sprintf@c:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x1E
   561  00001F                     	ds	1
   562  000020                     print_IR@Values:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x1F
   566  000020                     	ds	2
   567  000022                     ??_print_IR:
   568                           
   569                           ; 1 bytes @ 0x21
   570  000022                     	ds	1
   571  000023                     print_IR@buf:
   572                           	opt stack 0
   573                           
   574                           ; 16 bytes @ 0x22
   575  000023                     	ds	16
   576  000033                     ??_main:
   577                           
   578                           ; 1 bytes @ 0x32
   579  000033                     	ds	3
   580                           tblptru	equ	0xFF8
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           
   584 ;;
   585 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   586 ;;
   587 ;; *************** function _main *****************
   588 ;; Defined at:
   589 ;;		line 94 in file "main.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;  buf            16   16[BANK0 ] unsigned char [16]
   594 ;;  threshold       2   36[BANK0 ] int 
   595 ;;  diff            2   34[BANK0 ] int 
   596 ;;  buf            16    0[BANK0 ] unsigned char [16]
   597 ;;  direction       2   39[BANK0 ] int 
   598 ;;  mR              9   59[BANK0 ] struct Motor
   599 ;;  mL              9   50[BANK0 ] struct Motor
   600 ;;  Values          8   42[BANK0 ] struct Sensor_ir
   601 ;;  PWMcycle        2   32[BANK0 ] int 
   602 ;;  counter         1   41[BANK0 ] unsigned char 
   603 ;;  time            1   38[BANK0 ] unsigned char 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   613 ;;      Params:         0       0       0       0
   614 ;;      Locals:         0      68       0       0
   615 ;;      Temps:          3       0       0       0
   616 ;;      Totals:         3      68       0       0
   617 ;;Total ram usage:       71 bytes
   618 ;; Hardware stack levels required when called:    6
   619 ;; This function calls:
   620 ;;		_LCD_clear
   621 ;;		_LCD_init
   622 ;;		_LCD_line
   623 ;;		_LCD_string
   624 ;;		_backwards
   625 ;;		_delay_tenth_s
   626 ;;		_forwards
   627 ;;		_initPWM
   628 ;;		_initTIMER0
   629 ;;		_init_RFID
   630 ;;		_init_TIMER5
   631 ;;		_init_capture
   632 ;;		_interrupt_EUSART
   633 ;;		_print_IR
   634 ;;		_print_RFID
   635 ;;		_read_IR
   636 ;;		_sprintf
   637 ;;		_stop
   638 ;;		_store
   639 ;;		_turnLeft
   640 ;;		_turnRight
   641 ;; This function is called by:
   642 ;;		Startup code after reset
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           	psect	text0
   647  00034E                     __ptext0:
   648                           	opt stack 0
   649  00034E                     _main:
   650                           	opt stack 25
   651                           
   652                           ;main.c: 97: char counter = 0;
   653                           
   654                           ;incstack = 0
   655  00034E  0E00               	movlw	0
   656  000350  0100               	movlb	0	; () banked
   657  000352  6F89               	movwf	main@counter& (0+255),b
   658                           
   659                           ;main.c: 101: ANSEL0 = 0;
   660  000354  0E00               	movlw	0
   661  000356  6EB8               	movwf	4024,c	;volatile
   662                           
   663                           ;main.c: 102: ANSEL1 = 0;
   664  000358  0E00               	movlw	0
   665  00035A  6EB9               	movwf	4025,c	;volatile
   666                           
   667                           ;main.c: 103: OSCCON = 0x72;
   668  00035C  0E72               	movlw	114
   669  00035E  6ED3               	movwf	4051,c	;volatile
   670  000360                     
   671                           ; BSR set to: 0
   672  000360  A4D3               	btfss	4051,2,c	;volatile
   673  000362  D7FE               	goto	l174
   674                           
   675                           ;main.c: 106: LCD_init();
   676  000364  EC7F  F006         	call	_LCD_init	;wreg free
   677                           
   678                           ;main.c: 108: init_TIMER5();
   679  000368  EC82  F00A         	call	_init_TIMER5	;wreg free
   680                           
   681                           ;main.c: 109: initPWM();
   682  00036C  EC58  F00A         	call	_initPWM	;wreg free
   683                           
   684                           ;main.c: 110: init_capture();
   685  000370  EC75  F00A         	call	_init_capture	;wreg free
   686                           
   687                           ;main.c: 111: init_RFID();
   688  000374  EC8F  F00A         	call	_init_RFID	;wreg free
   689                           
   690                           ;main.c: 112: initTIMER0();
   691  000378  ECB1  F00A         	call	_initTIMER0	;wreg free
   692                           
   693                           ;main.c: 115: interrupt_EUSART();
   694  00037C  ECA7  F00A         	call	_interrupt_EUSART	;wreg free
   695                           
   696                           ;main.c: 116: RCONbits.IPEN = 1;
   697  000380  8ED0               	bsf	4048,7,c	;volatile
   698                           
   699                           ;main.c: 117: struct Sensor_ir Values;;main.c: 118: struct Motor mL, mR;;main.c: 119: in
      +                          t PWMcycle = 199;
   700  000382  0E00               	movlw	0
   701  000384  0100               	movlb	0	; () banked
   702  000386  6F81               	movwf	(main@PWMcycle+1)& (0+255),b
   703  000388  0EC7               	movlw	199
   704  00038A  6F80               	movwf	main@PWMcycle& (0+255),b
   705                           
   706                           ; BSR set to: 0
   707                           ;main.c: 120: mL.power = 0;
   708  00038C  0E00               	movlw	0
   709  00038E  6F92               	movwf	main@mL& (0+255),b
   710                           
   711                           ; BSR set to: 0
   712                           ;main.c: 121: mL.direction = 1;
   713  000390  0E01               	movlw	1
   714  000392  6F93               	movwf	(main@mL+1)& (0+255),b
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 122: mL.duty_low = (unsigned char *) (&PDC0L);
   718  000394  0E79               	movlw	121
   719  000396  6F94               	movwf	(main@mL+2)& (0+255),b
   720  000398  0E0F               	movlw	15
   721  00039A  6F95               	movwf	(main@mL+3)& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 123: mL.duty_high = (unsigned char *) (&PDC0H);
   725  00039C  0E78               	movlw	120
   726  00039E  6F96               	movwf	(main@mL+4)& (0+255),b
   727  0003A0  0E0F               	movlw	15
   728  0003A2  6F97               	movwf	(main@mL+5)& (0+255),b
   729                           
   730                           ; BSR set to: 0
   731                           ;main.c: 124: mL.dir_pin = 0;
   732  0003A4  0E00               	movlw	0
   733  0003A6  6F98               	movwf	(main@mL+6)& (0+255),b
   734                           
   735                           ; BSR set to: 0
   736                           ;main.c: 125: mL.period = PWMcycle;
   737  0003A8  C080  F099         	movff	main@PWMcycle,main@mL+7
   738  0003AC  C081  F09A         	movff	main@PWMcycle+1,main@mL+8
   739                           
   740                           ; BSR set to: 0
   741                           ;main.c: 128: mR.power = 0;
   742  0003B0  0E00               	movlw	0
   743  0003B2  6F9B               	movwf	main@mR& (0+255),b
   744                           
   745                           ; BSR set to: 0
   746                           ;main.c: 129: mR.direction = 1;
   747  0003B4  0E01               	movlw	1
   748  0003B6  6F9C               	movwf	(main@mR+1)& (0+255),b
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 130: mR.duty_low = (unsigned char *) (&PDC1L);
   752  0003B8  0E77               	movlw	119
   753  0003BA  6F9D               	movwf	(main@mR+2)& (0+255),b
   754  0003BC  0E0F               	movlw	15
   755  0003BE  6F9E               	movwf	(main@mR+3)& (0+255),b
   756                           
   757                           ; BSR set to: 0
   758                           ;main.c: 131: mR.duty_high = (unsigned char *) (&PDC1H);
   759  0003C0  0E76               	movlw	118
   760  0003C2  6F9F               	movwf	(main@mR+4)& (0+255),b
   761  0003C4  0E0F               	movlw	15
   762  0003C6  6FA0               	movwf	(main@mR+5)& (0+255),b
   763                           
   764                           ; BSR set to: 0
   765                           ;main.c: 132: mR.dir_pin = 2;
   766  0003C8  0E02               	movlw	2
   767  0003CA  6FA1               	movwf	(main@mR+6)& (0+255),b
   768                           
   769                           ; BSR set to: 0
   770                           ;main.c: 133: mR.period = PWMcycle;
   771  0003CC  C080  F0A2         	movff	main@PWMcycle,main@mR+7
   772  0003D0  C081  F0A3         	movff	main@PWMcycle+1,main@mR+8
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 135: forwards(&mL, &mR);
   776  0003D4  0E92               	movlw	low main@mL
   777  0003D6  6E1B               	movwf	forwards@mL,c
   778  0003D8  0E00               	movlw	high main@mL
   779  0003DA  6E1C               	movwf	forwards@mL+1,c
   780  0003DC  0E9B               	movlw	low main@mR
   781  0003DE  6E1D               	movwf	forwards@mR,c
   782  0003E0  0E00               	movlw	high main@mR
   783  0003E2  6E1E               	movwf	forwards@mR+1,c
   784  0003E4  ECE1  F007         	call	_forwards	;wreg free
   785                           
   786                           ;main.c: 136: stop(&mL, &mR);
   787  0003E8  0E92               	movlw	low main@mL
   788  0003EA  6E1B               	movwf	stop@mL,c
   789  0003EC  0E00               	movlw	high main@mL
   790  0003EE  6E1C               	movwf	stop@mL+1,c
   791  0003F0  0E9B               	movlw	low main@mR
   792  0003F2  6E1D               	movwf	stop@mR,c
   793  0003F4  0E00               	movlw	high main@mR
   794  0003F6  6E1E               	movwf	stop@mR+1,c
   795  0003F8  EC33  F009         	call	_stop	;wreg free
   796                           
   797                           ;main.c: 137: stop(&mL, &mR);
   798  0003FC  0E92               	movlw	low main@mL
   799  0003FE  6E1B               	movwf	stop@mL,c
   800  000400  0E00               	movlw	high main@mL
   801  000402  6E1C               	movwf	stop@mL+1,c
   802  000404  0E9B               	movlw	low main@mR
   803  000406  6E1D               	movwf	stop@mR,c
   804  000408  0E00               	movlw	high main@mR
   805  00040A  6E1E               	movwf	stop@mR+1,c
   806  00040C  EC33  F009         	call	_stop	;wreg free
   807                           
   808                           ;main.c: 138: INTCONbits.INT0IE = 1;
   809  000410  88F2               	bsf	intcon,4,c	;volatile
   810                           
   811                           ;main.c: 140: card_read = 3;
   812  000412  0E03               	movlw	3
   813  000414  0100               	movlb	0	; () banked
   814  000416  6FA6               	movwf	_card_read& (0+255),b	;volatile
   815                           
   816                           ; BSR set to: 0
   817                           ;main.c: 143: while (card_read == 3) {
   818                           
   819                           ;main.c: 141: char time;;main.c: 142: while (1) {
   820  000418  D013               	goto	l177
   821  00041A                     
   822                           ; BSR set to: 0
   823                           ;main.c: 145: LCD_line(1);
   824                           
   825                           ; BSR set to: 0
   826  00041A  0E01               	movlw	1
   827  00041C  EC00  F00A         	call	_LCD_line
   828                           
   829                           ;main.c: 146: char buf[16];;main.c: 147: sprintf(buf, "Ready");
   830  000420  0E60               	movlw	low main@buf
   831  000422  6E12               	movwf	sprintf@sp,c
   832  000424  0E00               	movlw	high main@buf
   833  000426  6E13               	movwf	sprintf@sp+1,c
   834  000428  0E46               	movlw	low STR_3
   835  00042A  6E14               	movwf	sprintf@f,c
   836  00042C  0E03               	movlw	high STR_3
   837  00042E  6E15               	movwf	sprintf@f+1,c
   838  000430  ECF5  F004         	call	_sprintf	;wreg free
   839                           
   840                           ;main.c: 148: LCD_string(buf);
   841  000434  0E60               	movlw	low main@buf
   842  000436  6E0A               	movwf	LCD_string@string,c
   843  000438  0E00               	movlw	high main@buf
   844  00043A  6E0B               	movwf	LCD_string@string+1,c
   845  00043C  ECE8  F009         	call	_LCD_string	;wreg free
   846  000440                     l177:
   847  000440  0E03               	movlw	3
   848  000442  0100               	movlb	0	; () banked
   849  000444  19A6               	xorwf	_card_read& (0+255),w,b	;volatile
   850  000446  B4D8               	btfsc	status,2,c
   851  000448  D7E8               	goto	l178
   852                           
   853                           ; BSR set to: 0
   854                           ;main.c: 150: };main.c: 152: int direction = 0;
   855                           
   856                           ; BSR set to: 0
   857  00044A  0E00               	movlw	0
   858  00044C  6F88               	movwf	(main@direction+1)& (0+255),b
   859  00044E  0E00               	movlw	0
   860  000450  6F87               	movwf	main@direction& (0+255),b
   861                           
   862                           ;main.c: 155: while (card_read == 0) {
   863  000452  D12C               	goto	l196
   864  000454                     
   865                           ; BSR set to: 0
   866                           ;main.c: 156: read_IR(&Values);
   867                           
   868                           ; BSR set to: 0
   869  000454  0E8A               	movlw	low main@Values
   870  000456  6E06               	movwf	read_IR@Values,c
   871  000458  0E00               	movlw	high main@Values
   872  00045A  6E07               	movwf	read_IR@Values+1,c
   873  00045C  EC06  F004         	call	_read_IR	;wreg free
   874                           
   875                           ;main.c: 160: print_IR(&Values);
   876  000460  0E8A               	movlw	low main@Values
   877  000462  6E20               	movwf	print_IR@Values,c
   878  000464  0E00               	movlw	high main@Values
   879  000466  6E21               	movwf	print_IR@Values+1,c
   880  000468  ECF4  F006         	call	_print_IR	;wreg free
   881                           
   882                           ;main.c: 161: LCD_clear();
   883  00046C  EC67  F00A         	call	_LCD_clear	;wreg free
   884                           
   885                           ;main.c: 162: char buf[16];;main.c: 163: LCD_line(1);
   886  000470  0E01               	movlw	1
   887  000472  EC00  F00A         	call	_LCD_line
   888                           
   889                           ;main.c: 164: sprintf(buf, "Count: %c", counter);
   890  000476  0E70               	movlw	low main@buf_793
   891  000478  6E12               	movwf	sprintf@sp,c
   892  00047A  0E00               	movlw	high main@buf_793
   893  00047C  6E13               	movwf	sprintf@sp+1,c
   894  00047E  0E29               	movlw	low STR_4
   895  000480  6E14               	movwf	sprintf@f,c
   896  000482  0E03               	movlw	high STR_4
   897  000484  6E15               	movwf	sprintf@f+1,c
   898  000486  C089  F016         	movff	main@counter,?_sprintf+4
   899  00048A  6A17               	clrf	?_sprintf+5,c
   900  00048C  ECF5  F004         	call	_sprintf	;wreg free
   901                           
   902                           ;main.c: 165: LCD_string(buf);
   903  000490  0E70               	movlw	low main@buf_793
   904  000492  6E0A               	movwf	LCD_string@string,c
   905  000494  0E00               	movlw	high main@buf_793
   906  000496  6E0B               	movwf	LCD_string@string+1,c
   907  000498  ECE8  F009         	call	_LCD_string	;wreg free
   908                           
   909                           ;main.c: 167: delay_tenth_s(6);
   910  00049C  0E06               	movlw	6
   911  00049E  ECCC  F009         	call	_delay_tenth_s
   912                           
   913                           ;main.c: 170: int threshold = 50;
   914  0004A2  0E00               	movlw	0
   915  0004A4  0100               	movlb	0	; () banked
   916  0004A6  6F85               	movwf	(main@threshold+1)& (0+255),b
   917  0004A8  0E32               	movlw	50
   918  0004AA  6F84               	movwf	main@threshold& (0+255),b
   919                           
   920                           ; BSR set to: 0
   921                           ;main.c: 171: int diff = Values.left - Values.right;
   922  0004AC  EE20  F08C         	lfsr	2,main@Values+2
   923  0004B0  CFDE F033          	movff	postinc2,??_main
   924  0004B4  CFDD F034          	movff	postdec2,??_main+1
   925  0004B8  1E33               	comf	??_main,f,c
   926  0004BA  1E34               	comf	??_main+1,f,c
   927  0004BC  4A33               	infsnz	??_main,f,c
   928  0004BE  2A34               	incf	??_main+1,f,c
   929  0004C0  518A               	movf	main@Values& (0+255),w,b
   930  0004C2  2433               	addwf	??_main,w,c
   931  0004C4  6F82               	movwf	main@diff& (0+255),b
   932  0004C6  518B               	movf	(main@Values+1)& (0+255),w,b
   933  0004C8  2034               	addwfc	??_main+1,w,c
   934  0004CA  6F83               	movwf	(main@diff+1)& (0+255),b
   935                           
   936                           ; BSR set to: 0
   937                           ;main.c: 172: if (Values.left > 100 | Values.right > 100) {
   938  0004CC  518B               	movf	(main@Values+1)& (0+255),w,b
   939  0004CE  E10A               	bnz	l2616
   940  0004D0  0E65               	movlw	101
   941  0004D2  5D8A               	subwf	main@Values& (0+255),w,b
   942  0004D4  B0D8               	btfsc	status,0,c
   943  0004D6  D006               	goto	u1670
   944                           
   945                           ; BSR set to: 0
   946  0004D8  518D               	movf	(main@Values+3)& (0+255),w,b
   947  0004DA  E104               	bnz	l2616
   948  0004DC  0E65               	movlw	101
   949  0004DE  5D8C               	subwf	(main@Values+2)& (0+255),w,b
   950  0004E0  A0D8               	btfss	status,0,c
   951  0004E2  D004               	goto	l182
   952  0004E4                     u1670:
   953  0004E4                     l2616:
   954                           
   955                           ; BSR set to: 0
   956                           ;main.c: 173: threshold = 20;
   957  0004E4  0E00               	movlw	0
   958  0004E6  6F85               	movwf	(main@threshold+1)& (0+255),b
   959  0004E8  0E14               	movlw	20
   960  0004EA  D003               	goto	L1
   961  0004EC                     l182:
   962                           
   963                           ; BSR set to: 0
   964                           ;main.c: 175: threshold = 5;
   965                           
   966                           ; BSR set to: 0
   967  0004EC  0E00               	movlw	0
   968  0004EE  6F85               	movwf	(main@threshold+1)& (0+255),b
   969  0004F0  0E05               	movlw	5
   970  0004F2                     L1:
   971  0004F2  6F84               	movwf	main@threshold& (0+255),b
   972                           
   973                           ; BSR set to: 0
   974                           ;main.c: 176: };main.c: 178: if ((diff < -threshold)) {
   975                           
   976                           ; BSR set to: 0
   977  0004F4  C084  F033         	movff	main@threshold,??_main
   978  0004F8  C085  F034         	movff	main@threshold+1,??_main+1
   979  0004FC  1E33               	comf	??_main,f,c
   980  0004FE  1E34               	comf	??_main+1,f,c
   981  000500  4A33               	infsnz	??_main,f,c
   982  000502  2A34               	incf	??_main+1,f,c
   983  000504  5033               	movf	??_main,w,c
   984  000506  5D82               	subwf	main@diff& (0+255),w,b
   985  000508  5183               	movf	(main@diff+1)& (0+255),w,b
   986  00050A  0A80               	xorlw	128
   987  00050C  6E35               	movwf	(??_main+2)& (0+255),c
   988  00050E  5034               	movf	??_main+1,w,c
   989  000510  0A80               	xorlw	128
   990  000512  5835               	subwfb	(??_main+2)& (0+255),w,c
   991  000514  B0D8               	btfsc	status,0,c
   992  000516  D02C               	goto	l186
   993                           
   994                           ; BSR set to: 0
   995                           ;main.c: 179: if (direction != 1) {
   996  000518  0587               	decf	main@direction& (0+255),w,b
   997  00051A  1188               	iorwf	(main@direction+1)& (0+255),w,b
   998  00051C  B4D8               	btfsc	status,2,c
   999  00051E  D00A               	goto	l187
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;main.c: 180: stop(&mL, &mR);
  1003  000520  0E92               	movlw	low main@mL
  1004  000522  6E1B               	movwf	stop@mL,c
  1005  000524  0E00               	movlw	high main@mL
  1006  000526  6E1C               	movwf	stop@mL+1,c
  1007  000528  0E9B               	movlw	low main@mR
  1008  00052A  6E1D               	movwf	stop@mR,c
  1009  00052C  0E00               	movlw	high main@mR
  1010  00052E  6E1E               	movwf	stop@mR+1,c
  1011  000530  EC33  F009         	call	_stop	;wreg free
  1012  000534                     l187:
  1013                           
  1014                           ;main.c: 181: };main.c: 185: direction = 1;
  1015  000534  0E00               	movlw	0
  1016  000536  0100               	movlb	0	; () banked
  1017  000538  6F88               	movwf	(main@direction+1)& (0+255),b
  1018  00053A  0E01               	movlw	1
  1019  00053C  6F87               	movwf	main@direction& (0+255),b
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;main.c: 186: counter++;
  1023  00053E  2B89               	incf	main@counter& (0+255),f,b
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;main.c: 189: turnLeft(&mL, &mR);
  1027  000540  0E92               	movlw	low main@mL
  1028  000542  6E1B               	movwf	turnLeft@mL,c
  1029  000544  0E00               	movlw	high main@mL
  1030  000546  6E1C               	movwf	turnLeft@mL+1,c
  1031  000548  0E9B               	movlw	low main@mR
  1032  00054A  6E1D               	movwf	turnLeft@mR,c
  1033  00054C  0E00               	movlw	high main@mR
  1034  00054E  6E1E               	movwf	turnLeft@mR+1,c
  1035  000550  EC96  F007         	call	_turnLeft	;wreg free
  1036                           
  1037                           ;main.c: 190: delay_tenth_s(6);
  1038  000554  0E06               	movlw	6
  1039  000556  ECCC  F009         	call	_delay_tenth_s
  1040                           
  1041                           ;main.c: 191: time = 6;
  1042  00055A  0E06               	movlw	6
  1043  00055C  0100               	movlb	0	; () banked
  1044  00055E  6F86               	movwf	main@time& (0+255),b
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 192: store(counter, direction, time);
  1048  000560  C087  F006         	movff	main@direction,store@dir
  1049  000564  C086  F007         	movff	main@time,store@time
  1050  000568  5189               	movf	main@counter& (0+255),w,b
  1051  00056A  ECAC  F009         	call	_store
  1052                           
  1053                           ;main.c: 194: } else if (diff > threshold) {
  1054  00056E  D09E               	goto	l196
  1055  000570                     l186:
  1056  000570  0100               	movlb	0	; () banked
  1057  000572  5182               	movf	main@diff& (0+255),w,b
  1058  000574  5D84               	subwf	main@threshold& (0+255),w,b
  1059  000576  5185               	movf	(main@threshold+1)& (0+255),w,b
  1060  000578  0A80               	xorlw	128
  1061  00057A  6E33               	movwf	??_main& (0+255),c
  1062  00057C  5183               	movf	(main@diff+1)& (0+255),w,b
  1063  00057E  0A80               	xorlw	128
  1064  000580  5833               	subwfb	??_main& (0+255),w,c
  1065  000582  B0D8               	btfsc	status,0,c
  1066  000584  D02D               	goto	l189
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;main.c: 195: if (direction != 2) {
  1070  000586  0E02               	movlw	2
  1071  000588  1987               	xorwf	main@direction& (0+255),w,b
  1072  00058A  1188               	iorwf	(main@direction+1)& (0+255),w,b
  1073  00058C  B4D8               	btfsc	status,2,c
  1074  00058E  D00A               	goto	l190
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;main.c: 196: stop(&mL, &mR);
  1078  000590  0E92               	movlw	low main@mL
  1079  000592  6E1B               	movwf	stop@mL,c
  1080  000594  0E00               	movlw	high main@mL
  1081  000596  6E1C               	movwf	stop@mL+1,c
  1082  000598  0E9B               	movlw	low main@mR
  1083  00059A  6E1D               	movwf	stop@mR,c
  1084  00059C  0E00               	movlw	high main@mR
  1085  00059E  6E1E               	movwf	stop@mR+1,c
  1086  0005A0  EC33  F009         	call	_stop	;wreg free
  1087  0005A4                     l190:
  1088                           
  1089                           ;main.c: 197: };main.c: 200: direction = 2;
  1090  0005A4  0E00               	movlw	0
  1091  0005A6  0100               	movlb	0	; () banked
  1092  0005A8  6F88               	movwf	(main@direction+1)& (0+255),b
  1093  0005AA  0E02               	movlw	2
  1094  0005AC  6F87               	movwf	main@direction& (0+255),b
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;main.c: 201: counter++;
  1098  0005AE  2B89               	incf	main@counter& (0+255),f,b
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;main.c: 203: turnRight(&mL, &mR);
  1102  0005B0  0E92               	movlw	low main@mL
  1103  0005B2  6E1B               	movwf	turnRight@mL,c
  1104  0005B4  0E00               	movlw	high main@mL
  1105  0005B6  6E1C               	movwf	turnRight@mL+1,c
  1106  0005B8  0E9B               	movlw	low main@mR
  1107  0005BA  6E1D               	movwf	turnRight@mR,c
  1108  0005BC  0E00               	movlw	high main@mR
  1109  0005BE  6E1E               	movwf	turnRight@mR+1,c
  1110  0005C0  EC4B  F007         	call	_turnRight	;wreg free
  1111                           
  1112                           ;main.c: 205: delay_tenth_s(6);
  1113  0005C4  0E06               	movlw	6
  1114  0005C6  ECCC  F009         	call	_delay_tenth_s
  1115                           
  1116                           ;main.c: 206: time = 6;
  1117  0005CA  0E06               	movlw	6
  1118  0005CC  0100               	movlb	0	; () banked
  1119  0005CE  6F86               	movwf	main@time& (0+255),b
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 207: store(counter, direction, time);
  1123  0005D0  C087  F006         	movff	main@direction,store@dir
  1124  0005D4  C086  F007         	movff	main@time,store@time
  1125  0005D8  5189               	movf	main@counter& (0+255),w,b
  1126  0005DA  ECAC  F009         	call	_store
  1127                           
  1128                           ;main.c: 209: } else {
  1129  0005DE  D066               	goto	l196
  1130  0005E0                     l189:
  1131                           
  1132                           ;main.c: 210: if ((Values.left > 199) | (Values.right > 199)) {
  1133  0005E0  0100               	movlb	0	; () banked
  1134  0005E2  518B               	movf	(main@Values+1)& (0+255),w,b
  1135  0005E4  E10A               	bnz	l2660
  1136  0005E6  0EC8               	movlw	200
  1137  0005E8  5D8A               	subwf	main@Values& (0+255),w,b
  1138  0005EA  B0D8               	btfsc	status,0,c
  1139  0005EC  D006               	goto	u1730
  1140                           
  1141                           ; BSR set to: 0
  1142  0005EE  518D               	movf	(main@Values+3)& (0+255),w,b
  1143  0005F0  E104               	bnz	l2660
  1144  0005F2  0EC8               	movlw	200
  1145  0005F4  5D8C               	subwf	(main@Values+2)& (0+255),w,b
  1146  0005F6  A0D8               	btfss	status,0,c
  1147  0005F8  D02C               	goto	l192
  1148  0005FA                     u1730:
  1149  0005FA                     l2660:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 211: if (direction != 0) {
  1153  0005FA  5187               	movf	main@direction& (0+255),w,b
  1154  0005FC  1188               	iorwf	(main@direction+1)& (0+255),w,b
  1155  0005FE  B4D8               	btfsc	status,2,c
  1156  000600  D00A               	goto	l195
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 212: stop(&mL, &mR);
  1160  000602  0E92               	movlw	low main@mL
  1161  000604  6E1B               	movwf	stop@mL,c
  1162  000606  0E00               	movlw	high main@mL
  1163  000608  6E1C               	movwf	stop@mL+1,c
  1164  00060A  0E9B               	movlw	low main@mR
  1165  00060C  6E1D               	movwf	stop@mR,c
  1166  00060E  0E00               	movlw	high main@mR
  1167  000610  6E1E               	movwf	stop@mR+1,c
  1168  000612  EC33  F009         	call	_stop	;wreg free
  1169  000616                     l195:
  1170                           
  1171                           ;main.c: 213: };main.c: 216: direction = 3;
  1172  000616  0E00               	movlw	0
  1173  000618  0100               	movlb	0	; () banked
  1174  00061A  6F88               	movwf	(main@direction+1)& (0+255),b
  1175  00061C  0E03               	movlw	3
  1176  00061E  6F87               	movwf	main@direction& (0+255),b
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;main.c: 217: counter++;
  1180  000620  2B89               	incf	main@counter& (0+255),f,b
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;main.c: 219: forwards(&mL, &mR);
  1184  000622  0E92               	movlw	low main@mL
  1185  000624  6E1B               	movwf	forwards@mL,c
  1186  000626  0E00               	movlw	high main@mL
  1187  000628  6E1C               	movwf	forwards@mL+1,c
  1188  00062A  0E9B               	movlw	low main@mR
  1189  00062C  6E1D               	movwf	forwards@mR,c
  1190  00062E  0E00               	movlw	high main@mR
  1191  000630  6E1E               	movwf	forwards@mR+1,c
  1192  000632  ECE1  F007         	call	_forwards	;wreg free
  1193                           
  1194                           ;main.c: 220: delay_tenth_s(6);
  1195  000636  0E06               	movlw	6
  1196  000638  ECCC  F009         	call	_delay_tenth_s
  1197                           
  1198                           ;main.c: 221: time = 6;
  1199  00063C  0E06               	movlw	6
  1200  00063E  0100               	movlb	0	; () banked
  1201  000640  6F86               	movwf	main@time& (0+255),b
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;main.c: 222: store(counter, direction, time);
  1205  000642  C087  F006         	movff	main@direction,store@dir
  1206  000646  C086  F007         	movff	main@time,store@time
  1207  00064A  5189               	movf	main@counter& (0+255),w,b
  1208  00064C  ECAC  F009         	call	_store
  1209                           
  1210                           ;main.c: 224: } else {
  1211  000650  D02D               	goto	l196
  1212  000652                     l192:
  1213                           
  1214                           ;main.c: 225: if (direction != 2) {
  1215  000652  0E02               	movlw	2
  1216  000654  0100               	movlb	0	; () banked
  1217  000656  1987               	xorwf	main@direction& (0+255),w,b
  1218  000658  1188               	iorwf	(main@direction+1)& (0+255),w,b
  1219  00065A  B4D8               	btfsc	status,2,c
  1220  00065C  D00A               	goto	l197
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;main.c: 226: stop(&mL, &mR);
  1224  00065E  0E92               	movlw	low main@mL
  1225  000660  6E1B               	movwf	stop@mL,c
  1226  000662  0E00               	movlw	high main@mL
  1227  000664  6E1C               	movwf	stop@mL+1,c
  1228  000666  0E9B               	movlw	low main@mR
  1229  000668  6E1D               	movwf	stop@mR,c
  1230  00066A  0E00               	movlw	high main@mR
  1231  00066C  6E1E               	movwf	stop@mR+1,c
  1232  00066E  EC33  F009         	call	_stop	;wreg free
  1233  000672                     l197:
  1234                           
  1235                           ;main.c: 227: };main.c: 230: direction = 2;
  1236  000672  0E00               	movlw	0
  1237  000674  0100               	movlb	0	; () banked
  1238  000676  6F88               	movwf	(main@direction+1)& (0+255),b
  1239  000678  0E02               	movlw	2
  1240  00067A  6F87               	movwf	main@direction& (0+255),b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 231: counter++;
  1244  00067C  2B89               	incf	main@counter& (0+255),f,b
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;main.c: 233: turnRight(&mL, &mR);
  1248  00067E  0E92               	movlw	low main@mL
  1249  000680  6E1B               	movwf	turnRight@mL,c
  1250  000682  0E00               	movlw	high main@mL
  1251  000684  6E1C               	movwf	turnRight@mL+1,c
  1252  000686  0E9B               	movlw	low main@mR
  1253  000688  6E1D               	movwf	turnRight@mR,c
  1254  00068A  0E00               	movlw	high main@mR
  1255  00068C  6E1E               	movwf	turnRight@mR+1,c
  1256  00068E  EC4B  F007         	call	_turnRight	;wreg free
  1257                           
  1258                           ;main.c: 234: delay_tenth_s(6);
  1259  000692  0E06               	movlw	6
  1260  000694  ECCC  F009         	call	_delay_tenth_s
  1261                           
  1262                           ;main.c: 235: time = 6;
  1263  000698  0E06               	movlw	6
  1264  00069A  0100               	movlb	0	; () banked
  1265  00069C  6F86               	movwf	main@time& (0+255),b
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;main.c: 236: store(counter, direction, time);
  1269  00069E  C087  F006         	movff	main@direction,store@dir
  1270  0006A2  C086  F007         	movff	main@time,store@time
  1271  0006A6  5189               	movf	main@counter& (0+255),w,b
  1272  0006A8  ECAC  F009         	call	_store
  1273  0006AC                     l196:
  1274  0006AC  0100               	movlb	0	; () banked
  1275  0006AE  51A6               	movf	_card_read& (0+255),w,b	;volatile
  1276  0006B0  A4D8               	btfss	status,2,c
  1277  0006B2  D0A7               	goto	l199
  1278  0006B4  D6CF               	goto	l181
  1279  0006B6                     
  1280                           ; BSR set to: 0
  1281                           ;main.c: 249: stop(&mL, &mR);
  1282                           
  1283                           ; BSR set to: 0
  1284  0006B6  0E92               	movlw	low main@mL
  1285  0006B8  6E1B               	movwf	stop@mL,c
  1286  0006BA  0E00               	movlw	high main@mL
  1287  0006BC  6E1C               	movwf	stop@mL+1,c
  1288  0006BE  0E9B               	movlw	low main@mR
  1289  0006C0  6E1D               	movwf	stop@mR,c
  1290  0006C2  0E00               	movlw	high main@mR
  1291  0006C4  6E1E               	movwf	stop@mR+1,c
  1292  0006C6  EC33  F009         	call	_stop	;wreg free
  1293                           
  1294                           ;main.c: 252: print_RFID(&string_rfid[0], &string_rfid[0]);
  1295  0006CA  0E39               	movlw	low _string_rfid
  1296  0006CC  6E0B               	movwf	print_RFID@pa,c
  1297  0006CE  0E00               	movlw	high _string_rfid
  1298  0006D0  6E0C               	movwf	print_RFID@pa+1,c
  1299  0006D2  0E39               	movlw	low _string_rfid
  1300  0006D4  6E0D               	movwf	print_RFID@dis,c
  1301  0006D6  0E00               	movlw	high _string_rfid
  1302  0006D8  6E0E               	movwf	print_RFID@dis+1,c
  1303  0006DA  ECB9  F008         	call	_print_RFID	;wreg free
  1304                           
  1305                           ;main.c: 253: _delay((unsigned long)((10)*(8000000/4000.0)));
  1306  0006DE  0E1A               	movlw	26
  1307  0006E0  6E33               	movwf	??_main& (0+255),c
  1308  0006E2  0EF8               	movlw	248
  1309  0006E4                     u1967:
  1310  0006E4  2EE8               	decfsz	wreg,f,c
  1311  0006E6  D7FE               	bra	u1967
  1312  0006E8  2E33               	decfsz	??_main& (0+255),f,c
  1313  0006EA  D7FC               	bra	u1967
  1314  0006EC  D000               	nop2	
  1315  0006EE                     
  1316                           ;main.c: 255: stop(&mL, &mR);
  1317  0006EE  0E92               	movlw	low main@mL
  1318  0006F0  6E1B               	movwf	stop@mL,c
  1319  0006F2  0E00               	movlw	high main@mL
  1320  0006F4  6E1C               	movwf	stop@mL+1,c
  1321  0006F6  0E9B               	movlw	low main@mR
  1322  0006F8  6E1D               	movwf	stop@mR,c
  1323  0006FA  0E00               	movlw	high main@mR
  1324  0006FC  6E1E               	movwf	stop@mR+1,c
  1325  0006FE  EC33  F009         	call	_stop	;wreg free
  1326                           
  1327                           ;main.c: 256: if (forwardsDir[counter] == 3) {
  1328  000702  0100               	movlb	0	; () banked
  1329  000704  5189               	movf	main@counter& (0+255),w,b
  1330  000706  0D02               	mullw	2
  1331  000708  0E64               	movlw	low _forwardsDir
  1332  00070A  24F3               	addwf	prodl,w,c
  1333  00070C  6ED9               	movwf	fsr2l,c
  1334  00070E  0E01               	movlw	high _forwardsDir
  1335  000710  20F4               	addwfc	prodh,w,c
  1336  000712  6EDA               	movwf	fsr2h,c
  1337  000714  0E03               	movlw	3
  1338  000716  18DE               	xorwf	postinc2,w,c
  1339  000718  10DE               	iorwf	postinc2,w,c
  1340  00071A  A4D8               	btfss	status,2,c
  1341  00071C  D017               	goto	l203
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;main.c: 257: backwards(&mL, &mR);
  1345  00071E  0E92               	movlw	low main@mL
  1346  000720  6E1B               	movwf	backwards@mL,c
  1347  000722  0E00               	movlw	high main@mL
  1348  000724  6E1C               	movwf	backwards@mL+1,c
  1349  000726  0E9B               	movlw	low main@mR
  1350  000728  6E1D               	movwf	backwards@mR,c
  1351  00072A  0E00               	movlw	high main@mR
  1352  00072C  6E1E               	movwf	backwards@mR+1,c
  1353  00072E  EC2C  F008         	call	_backwards	;wreg free
  1354                           
  1355                           ;main.c: 258: delay_tenth_s(forwardsTime[counter]);
  1356  000732  0100               	movlb	0	; () banked
  1357  000734  5189               	movf	main@counter& (0+255),w,b
  1358  000736  0D02               	mullw	2
  1359  000738  0E00               	movlw	low _forwardsTime
  1360  00073A  24F3               	addwf	prodl,w,c
  1361  00073C  6ED9               	movwf	fsr2l,c
  1362  00073E  0E01               	movlw	high _forwardsTime
  1363  000740  20F4               	addwfc	prodh,w,c
  1364  000742  6EDA               	movwf	fsr2h,c
  1365  000744  50DF               	movf	indf2,w,c
  1366  000746  ECCC  F009         	call	_delay_tenth_s
  1367                           
  1368                           ;main.c: 259: } else if (forwardsTime[counter] == 1) {
  1369  00074A  D058               	goto	l210
  1370  00074C                     l203:
  1371  00074C  0100               	movlb	0	; () banked
  1372  00074E  5189               	movf	main@counter& (0+255),w,b
  1373  000750  0D02               	mullw	2
  1374  000752  0E00               	movlw	low _forwardsTime
  1375  000754  24F3               	addwf	prodl,w,c
  1376  000756  6ED9               	movwf	fsr2l,c
  1377  000758  0E01               	movlw	high _forwardsTime
  1378  00075A  20F4               	addwfc	prodh,w,c
  1379  00075C  6EDA               	movwf	fsr2h,c
  1380  00075E  04DE               	decf	postinc2,w,c
  1381  000760  10DE               	iorwf	postinc2,w,c
  1382  000762  A4D8               	btfss	status,2,c
  1383  000764  D04B               	goto	l210
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;main.c: 260: T0CONbits.TMR0ON = 0;
  1387  000766  9ED5               	bcf	4053,7,c	;volatile
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 261: TMR0L = 0;
  1391  000768  0E00               	movlw	0
  1392  00076A  6ED6               	movwf	4054,c	;volatile
  1393                           
  1394                           ;main.c: 262: TMR0H = 0;
  1395  00076C  0E00               	movlw	0
  1396  00076E  6ED7               	movwf	4055,c	;volatile
  1397                           
  1398                           ;main.c: 263: millis = 0;
  1399  000770  0E00               	movlw	0
  1400  000772  6FA5               	movwf	(_millis+1)& (0+255),b	;volatile
  1401  000774  0E00               	movlw	0
  1402  000776  6FA4               	movwf	_millis& (0+255),b	;volatile
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 264: if (forwardsTime[counter] == 1) {
  1406  000778  5189               	movf	main@counter& (0+255),w,b
  1407  00077A  0D02               	mullw	2
  1408  00077C  0E00               	movlw	low _forwardsTime
  1409  00077E  24F3               	addwf	prodl,w,c
  1410  000780  6ED9               	movwf	fsr2l,c
  1411  000782  0E01               	movlw	high _forwardsTime
  1412  000784  20F4               	addwfc	prodh,w,c
  1413  000786  6EDA               	movwf	fsr2h,c
  1414  000788  04DE               	decf	postinc2,w,c
  1415  00078A  10DE               	iorwf	postinc2,w,c
  1416  00078C  A4D8               	btfss	status,2,c
  1417  00078E  D01B               	goto	l206
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;main.c: 265: T0CONbits.TMR0ON = 1;
  1421  000790  8ED5               	bsf	4053,7,c	;volatile
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 266: turnRight(&mL, &mR);
  1425  000792  0E92               	movlw	low main@mL
  1426  000794  6E1B               	movwf	turnRight@mL,c
  1427  000796  0E00               	movlw	high main@mL
  1428  000798  6E1C               	movwf	turnRight@mL+1,c
  1429  00079A  0E9B               	movlw	low main@mR
  1430  00079C  6E1D               	movwf	turnRight@mR,c
  1431  00079E  0E00               	movlw	high main@mR
  1432  0007A0  6E1E               	movwf	turnRight@mR+1,c
  1433  0007A2  EC4B  F007         	call	_turnRight	;wreg free
  1434  0007A6  0100               	movlb	0	; () banked
  1435  0007A8  5189               	movf	main@counter& (0+255),w,b
  1436  0007AA  0D02               	mullw	2
  1437  0007AC  0E00               	movlw	low _forwardsTime
  1438  0007AE  24F3               	addwf	prodl,w,c
  1439  0007B0  6ED9               	movwf	fsr2l,c
  1440  0007B2  0E01               	movlw	high _forwardsTime
  1441  0007B4  20F4               	addwfc	prodh,w,c
  1442  0007B6  6EDA               	movwf	fsr2h,c
  1443  0007B8  50DE               	movf	postinc2,w,c
  1444  0007BA  5DA4               	subwf	_millis& (0+255),w,b	;volatile
  1445  0007BC  50DE               	movf	postinc2,w,c
  1446  0007BE  59A5               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1447  0007C0  A0D8               	btfss	status,0,c
  1448  0007C2  D7F1               	goto	l208
  1449  0007C4  D01A               	goto	u1810
  1450  0007C6                     l206:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;main.c: 271: T0CONbits.TMR0ON = 1;
  1454  0007C6  8ED5               	bsf	4053,7,c	;volatile
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;main.c: 272: turnLeft(&mL, &mR);
  1458  0007C8  0E92               	movlw	low main@mL
  1459  0007CA  6E1B               	movwf	turnLeft@mL,c
  1460  0007CC  0E00               	movlw	high main@mL
  1461  0007CE  6E1C               	movwf	turnLeft@mL+1,c
  1462  0007D0  0E9B               	movlw	low main@mR
  1463  0007D2  6E1D               	movwf	turnLeft@mR,c
  1464  0007D4  0E00               	movlw	high main@mR
  1465  0007D6  6E1E               	movwf	turnLeft@mR+1,c
  1466  0007D8  EC96  F007         	call	_turnLeft	;wreg free
  1467  0007DC  0100               	movlb	0	; () banked
  1468  0007DE  5189               	movf	main@counter& (0+255),w,b
  1469  0007E0  0D02               	mullw	2
  1470  0007E2  0E00               	movlw	low _forwardsTime
  1471  0007E4  24F3               	addwf	prodl,w,c
  1472  0007E6  6ED9               	movwf	fsr2l,c
  1473  0007E8  0E01               	movlw	high _forwardsTime
  1474  0007EA  20F4               	addwfc	prodh,w,c
  1475  0007EC  6EDA               	movwf	fsr2h,c
  1476  0007EE  50DE               	movf	postinc2,w,c
  1477  0007F0  5DA4               	subwf	_millis& (0+255),w,b	;volatile
  1478  0007F2  50DE               	movf	postinc2,w,c
  1479  0007F4  59A5               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1480  0007F6  A0D8               	btfss	status,0,c
  1481  0007F8  D7F1               	goto	l212
  1482  0007FA                     u1810:
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 275: T0CONbits.TMR0ON = 0;
  1486  0007FA  9ED5               	bcf	4053,7,c	;volatile
  1487  0007FC                     l210:
  1488                           
  1489                           ; BSR set to: 0
  1490                           
  1491                           ; BSR set to: 0
  1492                           
  1493                           ; BSR set to: 0
  1494  0007FC  0100               	movlb	0	; () banked
  1495  0007FE  0789               	decf	main@counter& (0+255),f,b
  1496  000800  D776               	goto	l201
  1497  000802                     l199:
  1498  000802  0100               	movlb	0	; () banked
  1499  000804  05A6               	decf	_card_read& (0+255),w,b	;volatile
  1500  000806  A4D8               	btfss	status,2,c
  1501  000808  D61B               	goto	l177
  1502  00080A  D755               	goto	l200
  1503  00080C                     __end_of_main:
  1504                           	opt stack 0
  1505                           tblptru	equ	0xFF8
  1506                           prodh	equ	0xFF4
  1507                           prodl	equ	0xFF3
  1508                           intcon	equ	0xFF2
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           indf2	equ	0xFDF
  1512                           postinc2	equ	0xFDE
  1513                           postdec2	equ	0xFDD
  1514                           fsr2h	equ	0xFDA
  1515                           fsr2l	equ	0xFD9
  1516                           status	equ	0xFD8
  1517                           
  1518 ;; *************** function _turnRight *****************
  1519 ;; Defined at:
  1520 ;;		line 114 in file "motor.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  mL              2   26[COMRAM] PTR struct Motor
  1523 ;;		 -> main@mL(9), 
  1524 ;;  mR              2   28[COMRAM] PTR struct Motor
  1525 ;;		 -> main@mR(9), 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;		None
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      void 
  1530 ;; Registers used:
  1531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1537 ;;      Params:         4       0       0       0
  1538 ;;      Locals:         0       0       0       0
  1539 ;;      Temps:          1       0       0       0
  1540 ;;      Totals:         5       0       0       0
  1541 ;;Total ram usage:        5 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; Hardware stack levels required when called:    3
  1544 ;; This function calls:
  1545 ;;		_setMotorPWM
  1546 ;; This function is called by:
  1547 ;;		_main
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text1
  1552  000E96                     __ptext1:
  1553                           	opt stack 0
  1554  000E96                     _turnRight:
  1555                           	opt stack 27
  1556                           
  1557                           ;motor.c: 117: mL->direction = 1;
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;incstack = 0
  1561  000E96  EE20 F001          	lfsr	2,1
  1562  000E9A  501B               	movf	turnRight@mL,w,c
  1563  000E9C  26D9               	addwf	fsr2l,f,c
  1564  000E9E  501C               	movf	turnRight@mL+1,w,c
  1565  000EA0  22DA               	addwfc	fsr2h,f,c
  1566  000EA2  0E01               	movlw	1
  1567  000EA4  6EDF               	movwf	indf2,c
  1568                           
  1569                           ;motor.c: 118: mR->direction = 0;
  1570  000EA6  EE20 F001          	lfsr	2,1
  1571  000EAA  501D               	movf	turnRight@mR,w,c
  1572  000EAC  26D9               	addwf	fsr2l,f,c
  1573  000EAE  501E               	movf	turnRight@mR+1,w,c
  1574  000EB0  22DA               	addwfc	fsr2h,f,c
  1575  000EB2  0E00               	movlw	0
  1576  000EB4  6EDF               	movwf	indf2,c
  1577                           
  1578                           ;motor.c: 119: while (mL->power < 70 || mR->power < 70) {
  1579  000EB6  D02B               	goto	l315
  1580  000EB8                     
  1581                           ;motor.c: 120: if (mL->power < 70) {
  1582  000EB8  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1583  000EBC  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1584  000EC0  0E46               	movlw	70
  1585  000EC2  60DF               	cpfslt	indf2,c
  1586  000EC4  D005               	goto	l317
  1587                           
  1588                           ;motor.c: 121: mL->power++;
  1589  000EC6  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1590  000ECA  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1591  000ECE  2ADF               	incf	indf2,f,c
  1592  000ED0                     l317:
  1593                           
  1594                           ;motor.c: 122: };motor.c: 123: if (mR->power < 70) {
  1595  000ED0  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1596  000ED4  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1597  000ED8  0E46               	movlw	70
  1598  000EDA  60DF               	cpfslt	indf2,c
  1599  000EDC  D005               	goto	l318
  1600                           
  1601                           ;motor.c: 124: mR->power++;
  1602  000EDE  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1603  000EE2  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1604  000EE6  2ADF               	incf	indf2,f,c
  1605  000EE8                     l318:
  1606                           
  1607                           ;motor.c: 125: };motor.c: 126: setMotorPWM(mL);
  1608  000EE8  C01B  F014         	movff	turnRight@mL,setMotorPWM@m
  1609  000EEC  C01C  F015         	movff	turnRight@mL+1,setMotorPWM@m+1
  1610  000EF0  ECBE  F005         	call	_setMotorPWM	;wreg free
  1611                           
  1612                           ;motor.c: 127: setMotorPWM(mR);
  1613  000EF4  C01D  F014         	movff	turnRight@mR,setMotorPWM@m
  1614  000EF8  C01E  F015         	movff	turnRight@mR+1,setMotorPWM@m+1
  1615  000EFC  ECBE  F005         	call	_setMotorPWM	;wreg free
  1616                           
  1617                           ;motor.c: 128: _delay((unsigned long)((5)*(8000000/4000.0)));
  1618  000F00  0E0D               	movlw	13
  1619  000F02  6E1F               	movwf	??_turnRight& (0+255),c
  1620  000F04  0EFC               	movlw	252
  1621  000F06                     u1977:
  1622  000F06  2EE8               	decfsz	wreg,f,c
  1623  000F08  D7FE               	bra	u1977
  1624  000F0A  2E1F               	decfsz	??_turnRight& (0+255),f,c
  1625  000F0C  D7FC               	bra	u1977
  1626  000F0E                     l315:
  1627  000F0E  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1628  000F12  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1629  000F16  0E45               	movlw	69
  1630  000F18  64DF               	cpfsgt	indf2,c
  1631  000F1A  D7CE               	goto	l316
  1632  000F1C  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1633  000F20  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1634  000F24  0E45               	movlw	69
  1635  000F26  64DF               	cpfsgt	indf2,c
  1636  000F28  D7C7               	goto	l316
  1637  000F2A  0012               	return	
  1638  000F2C                     __end_of_turnRight:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           prodh	equ	0xFF4
  1642                           prodl	equ	0xFF3
  1643                           intcon	equ	0xFF2
  1644                           postinc0	equ	0xFEE
  1645                           wreg	equ	0xFE8
  1646                           indf2	equ	0xFDF
  1647                           postinc2	equ	0xFDE
  1648                           postdec2	equ	0xFDD
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _turnLeft *****************
  1654 ;; Defined at:
  1655 ;;		line 95 in file "motor.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  mL              2   26[COMRAM] PTR struct Motor
  1658 ;;		 -> main@mL(9), 
  1659 ;;  mR              2   28[COMRAM] PTR struct Motor
  1660 ;;		 -> main@mR(9), 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1672 ;;      Params:         4       0       0       0
  1673 ;;      Locals:         0       0       0       0
  1674 ;;      Temps:          1       0       0       0
  1675 ;;      Totals:         5       0       0       0
  1676 ;;Total ram usage:        5 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    3
  1679 ;; This function calls:
  1680 ;;		_setMotorPWM
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text2
  1687  000F2C                     __ptext2:
  1688                           	opt stack 0
  1689  000F2C                     _turnLeft:
  1690                           	opt stack 27
  1691                           
  1692                           ;motor.c: 98: mL->direction = 0;
  1693                           
  1694                           ;incstack = 0
  1695  000F2C  EE20 F001          	lfsr	2,1
  1696  000F30  501B               	movf	turnLeft@mL,w,c
  1697  000F32  26D9               	addwf	fsr2l,f,c
  1698  000F34  501C               	movf	turnLeft@mL+1,w,c
  1699  000F36  22DA               	addwfc	fsr2h,f,c
  1700  000F38  0E00               	movlw	0
  1701  000F3A  6EDF               	movwf	indf2,c
  1702                           
  1703                           ;motor.c: 99: mR->direction = 1;
  1704  000F3C  EE20 F001          	lfsr	2,1
  1705  000F40  501D               	movf	turnLeft@mR,w,c
  1706  000F42  26D9               	addwf	fsr2l,f,c
  1707  000F44  501E               	movf	turnLeft@mR+1,w,c
  1708  000F46  22DA               	addwfc	fsr2h,f,c
  1709  000F48  0E01               	movlw	1
  1710  000F4A  6EDF               	movwf	indf2,c
  1711                           
  1712                           ;motor.c: 100: while (mL->power < 70 || mR->power < 70) {
  1713  000F4C  D02B               	goto	l307
  1714  000F4E                     
  1715                           ;motor.c: 101: if (mL->power < 70) {
  1716  000F4E  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1717  000F52  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1718  000F56  0E46               	movlw	70
  1719  000F58  60DF               	cpfslt	indf2,c
  1720  000F5A  D005               	goto	l309
  1721                           
  1722                           ;motor.c: 102: mL->power++;
  1723  000F5C  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1724  000F60  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1725  000F64  2ADF               	incf	indf2,f,c
  1726  000F66                     l309:
  1727                           
  1728                           ;motor.c: 103: };motor.c: 104: if (mR->power < 70) {
  1729  000F66  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1730  000F6A  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1731  000F6E  0E46               	movlw	70
  1732  000F70  60DF               	cpfslt	indf2,c
  1733  000F72  D005               	goto	l310
  1734                           
  1735                           ;motor.c: 105: mR->power++;
  1736  000F74  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1737  000F78  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1738  000F7C  2ADF               	incf	indf2,f,c
  1739  000F7E                     l310:
  1740                           
  1741                           ;motor.c: 106: };motor.c: 107: setMotorPWM(mL);
  1742  000F7E  C01B  F014         	movff	turnLeft@mL,setMotorPWM@m
  1743  000F82  C01C  F015         	movff	turnLeft@mL+1,setMotorPWM@m+1
  1744  000F86  ECBE  F005         	call	_setMotorPWM	;wreg free
  1745                           
  1746                           ;motor.c: 108: setMotorPWM(mR);
  1747  000F8A  C01D  F014         	movff	turnLeft@mR,setMotorPWM@m
  1748  000F8E  C01E  F015         	movff	turnLeft@mR+1,setMotorPWM@m+1
  1749  000F92  ECBE  F005         	call	_setMotorPWM	;wreg free
  1750                           
  1751                           ;motor.c: 109: _delay((unsigned long)((5)*(8000000/4000.0)));
  1752  000F96  0E0D               	movlw	13
  1753  000F98  6E1F               	movwf	??_turnLeft& (0+255),c
  1754  000F9A  0EFC               	movlw	252
  1755  000F9C                     u1987:
  1756  000F9C  2EE8               	decfsz	wreg,f,c
  1757  000F9E  D7FE               	bra	u1987
  1758  000FA0  2E1F               	decfsz	??_turnLeft& (0+255),f,c
  1759  000FA2  D7FC               	bra	u1987
  1760  000FA4                     l307:
  1761  000FA4  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1762  000FA8  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1763  000FAC  0E45               	movlw	69
  1764  000FAE  64DF               	cpfsgt	indf2,c
  1765  000FB0  D7CE               	goto	l308
  1766  000FB2  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1767  000FB6  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1768  000FBA  0E45               	movlw	69
  1769  000FBC  64DF               	cpfsgt	indf2,c
  1770  000FBE  D7C7               	goto	l308
  1771  000FC0  0012               	return	
  1772  000FC2                     __end_of_turnLeft:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           prodh	equ	0xFF4
  1776                           prodl	equ	0xFF3
  1777                           intcon	equ	0xFF2
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           indf2	equ	0xFDF
  1781                           postinc2	equ	0xFDE
  1782                           postdec2	equ	0xFDD
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _store *****************
  1788 ;; Defined at:
  1789 ;;		line 69 in file "main.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  counter         1    wreg     unsigned char 
  1792 ;;  dir             1    5[COMRAM] unsigned char 
  1793 ;;  time            1    6[COMRAM] unsigned char 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  counter         1    9[COMRAM] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1805 ;;      Params:         2       0       0       0
  1806 ;;      Locals:         1       0       0       0
  1807 ;;      Temps:          2       0       0       0
  1808 ;;      Totals:         5       0       0       0
  1809 ;;Total ram usage:        5 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    1
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_main
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text3
  1820  001358                     __ptext3:
  1821                           	opt stack 0
  1822  001358                     _store:
  1823                           	opt stack 29
  1824                           
  1825                           ;incstack = 0
  1826                           ;store@counter stored from wreg
  1827  001358  6E0A               	movwf	store@counter,c
  1828                           
  1829                           ;main.c: 70: forwardsDir[counter] = dir;
  1830  00135A  5006               	movf	store@dir,w,c
  1831  00135C  6E08               	movwf	??_store& (0+255),c
  1832  00135E  6A09               	clrf	(??_store+1)& (0+255),c
  1833  001360  500A               	movf	store@counter,w,c
  1834  001362  0D02               	mullw	2
  1835  001364  0E64               	movlw	low _forwardsDir
  1836  001366  24F3               	addwf	prodl,w,c
  1837  001368  6ED9               	movwf	fsr2l,c
  1838  00136A  0E01               	movlw	high _forwardsDir
  1839  00136C  20F4               	addwfc	prodh,w,c
  1840  00136E  6EDA               	movwf	fsr2h,c
  1841  001370  C008  FFDE         	movff	??_store,postinc2
  1842  001374  C009  FFDD         	movff	??_store+1,postdec2
  1843                           
  1844                           ;main.c: 71: forwardsTime[counter] = time;
  1845  001378  5007               	movf	store@time,w,c
  1846  00137A  6E08               	movwf	??_store& (0+255),c
  1847  00137C  6A09               	clrf	(??_store+1)& (0+255),c
  1848  00137E  500A               	movf	store@counter,w,c
  1849  001380  0D02               	mullw	2
  1850  001382  0E00               	movlw	low _forwardsTime
  1851  001384  24F3               	addwf	prodl,w,c
  1852  001386  6ED9               	movwf	fsr2l,c
  1853  001388  0E01               	movlw	high _forwardsTime
  1854  00138A  20F4               	addwfc	prodh,w,c
  1855  00138C  6EDA               	movwf	fsr2h,c
  1856  00138E  C008  FFDE         	movff	??_store,postinc2
  1857  001392  C009  FFDD         	movff	??_store+1,postdec2
  1858  001396  0012               	return		;funcret
  1859  001398                     __end_of_store:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           prodh	equ	0xFF4
  1863                           prodl	equ	0xFF3
  1864                           intcon	equ	0xFF2
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           indf2	equ	0xFDF
  1868                           postinc2	equ	0xFDE
  1869                           postdec2	equ	0xFDD
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _stop *****************
  1875 ;; Defined at:
  1876 ;;		line 71 in file "motor.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;  mL              2   26[COMRAM] PTR struct Motor
  1879 ;;		 -> main@mL(9), 
  1880 ;;  mR              2   28[COMRAM] PTR struct Motor
  1881 ;;		 -> main@mR(9), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;		None
  1884 ;; Return value:  Size  Location     Type
  1885 ;;                  1    wreg      void 
  1886 ;; Registers used:
  1887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1893 ;;      Params:         4       0       0       0
  1894 ;;      Locals:         0       0       0       0
  1895 ;;      Temps:          1       0       0       0
  1896 ;;      Totals:         5       0       0       0
  1897 ;;Total ram usage:        5 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    3
  1900 ;; This function calls:
  1901 ;;		_setMotorPWM
  1902 ;; This function is called by:
  1903 ;;		_main
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text4
  1908  001266                     __ptext4:
  1909                           	opt stack 0
  1910  001266                     _stop:
  1911                           	opt stack 27
  1912                           
  1913                           ;motor.c: 74: while (((mR->power) > 0) || ((mL->power) > 0)) {
  1914                           
  1915                           ;incstack = 0
  1916  001266  D01F               	goto	l301
  1917  001268                     
  1918                           ;motor.c: 85: mL->power = 0;
  1919  001268  C01B  FFD9         	movff	stop@mL,fsr2l
  1920  00126C  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1921  001270  0E00               	movlw	0
  1922  001272  6EDF               	movwf	indf2,c
  1923                           
  1924                           ;motor.c: 86: mR->power = 0;
  1925  001274  C01D  FFD9         	movff	stop@mR,fsr2l
  1926  001278  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1927  00127C  0E00               	movlw	0
  1928  00127E  6EDF               	movwf	indf2,c
  1929                           
  1930                           ;motor.c: 89: setMotorPWM(mL);
  1931  001280  C01B  F014         	movff	stop@mL,setMotorPWM@m
  1932  001284  C01C  F015         	movff	stop@mL+1,setMotorPWM@m+1
  1933  001288  ECBE  F005         	call	_setMotorPWM	;wreg free
  1934                           
  1935                           ;motor.c: 90: setMotorPWM(mR);
  1936  00128C  C01D  F014         	movff	stop@mR,setMotorPWM@m
  1937  001290  C01E  F015         	movff	stop@mR+1,setMotorPWM@m+1
  1938  001294  ECBE  F005         	call	_setMotorPWM	;wreg free
  1939                           
  1940                           ;motor.c: 91: _delay((unsigned long)((1)*(8000000/4000.0)));
  1941  001298  0E03               	movlw	3
  1942  00129A  6E1F               	movwf	??_stop& (0+255),c
  1943  00129C  0E98               	movlw	152
  1944  00129E                     u1997:
  1945  00129E  2EE8               	decfsz	wreg,f,c
  1946  0012A0  D7FE               	bra	u1997
  1947  0012A2  2E1F               	decfsz	??_stop& (0+255),f,c
  1948  0012A4  D7FC               	bra	u1997
  1949  0012A6                     l301:
  1950  0012A6  C01D  FFD9         	movff	stop@mR,fsr2l
  1951  0012AA  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1952  0012AE  50DF               	movf	indf2,w,c
  1953  0012B0  A4D8               	btfss	status,2,c
  1954  0012B2  D7DA               	goto	l302
  1955  0012B4  C01B  FFD9         	movff	stop@mL,fsr2l
  1956  0012B8  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1957  0012BC  50DF               	movf	indf2,w,c
  1958  0012BE  B4D8               	btfsc	status,2,c
  1959  0012C0  0012               	return	
  1960  0012C2  D7D2               	goto	l302
  1961  0012C4                     __end_of_stop:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           intcon	equ	0xFF2
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           indf2	equ	0xFDF
  1970                           postinc2	equ	0xFDE
  1971                           postdec2	equ	0xFDD
  1972                           fsr2h	equ	0xFDA
  1973                           fsr2l	equ	0xFD9
  1974                           status	equ	0xFD8
  1975                           
  1976 ;; *************** function _read_IR *****************
  1977 ;; Defined at:
  1978 ;;		line 38 in file "ir.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  Values          2    5[COMRAM] PTR struct Sensor_ir
  1981 ;;		 -> main@Values(8), 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1993 ;;      Params:         2       0       0       0
  1994 ;;      Locals:         0       0       0       0
  1995 ;;      Temps:          4       0       0       0
  1996 ;;      Totals:         6       0       0       0
  1997 ;;Total ram usage:        6 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    1
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_main
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text5
  2008  00080C                     __ptext5:
  2009                           	opt stack 0
  2010  00080C                     _read_IR:
  2011                           	opt stack 29
  2012                           
  2013                           ;ir.c: 40: Values->left_prev = Values->left;
  2014                           
  2015                           ;incstack = 0
  2016  00080C  C006  FFD9         	movff	read_IR@Values,fsr2l
  2017  000810  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2018  000814  EE10 F004          	lfsr	1,4
  2019  000818  5006               	movf	read_IR@Values,w,c
  2020  00081A  26E1               	addwf	fsr1l,f,c
  2021  00081C  5007               	movf	read_IR@Values+1,w,c
  2022  00081E  22E2               	addwfc	fsr1h,f,c
  2023  000820  CFDE FFE6          	movff	postinc2,postinc1
  2024  000824  CFDD FFE5          	movff	postdec2,postdec1
  2025                           
  2026                           ;ir.c: 41: Values->right_prev = Values->right;
  2027  000828  EE20 F002          	lfsr	2,2
  2028  00082C  5006               	movf	read_IR@Values,w,c
  2029  00082E  26D9               	addwf	fsr2l,f,c
  2030  000830  5007               	movf	read_IR@Values+1,w,c
  2031  000832  22DA               	addwfc	fsr2h,f,c
  2032  000834  EE10 F006          	lfsr	1,6
  2033  000838  5006               	movf	read_IR@Values,w,c
  2034  00083A  26E1               	addwf	fsr1l,f,c
  2035  00083C  5007               	movf	read_IR@Values+1,w,c
  2036  00083E  22E2               	addwfc	fsr1h,f,c
  2037  000840  CFDE FFE6          	movff	postinc2,postinc1
  2038  000844  CFDD FFE5          	movff	postdec2,postdec1
  2039                           
  2040                           ;ir.c: 42: Values->left = ((CAP2BUFH << 8) | (CAP2BUFL));
  2041  000848  5066               	movf	3942,w,c	;volatile
  2042  00084A  CF67 F008          	movff	3943,??_read_IR	;volatile
  2043  00084E  6A09               	clrf	(??_read_IR+1)& (0+255),c
  2044  000850  C008  F009         	movff	??_read_IR,??_read_IR+1
  2045  000854  6A08               	clrf	??_read_IR,c
  2046  000856  1208               	iorwf	??_read_IR,f,c
  2047  000858  0E00               	movlw	0
  2048  00085A  1209               	iorwf	??_read_IR+1,f,c
  2049  00085C  C006  FFD9         	movff	read_IR@Values,fsr2l
  2050  000860  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2051  000864  C008  FFDE         	movff	??_read_IR,postinc2
  2052  000868  C009  FFDD         	movff	??_read_IR+1,postdec2
  2053                           
  2054                           ;ir.c: 43: Values->right = ((CAP1BUFH << 8) | (CAP1BUFL));
  2055  00086C  5068               	movf	3944,w,c	;volatile
  2056  00086E  CF69 F008          	movff	3945,??_read_IR	;volatile
  2057  000872  6A09               	clrf	(??_read_IR+1)& (0+255),c
  2058  000874  C008  F009         	movff	??_read_IR,??_read_IR+1
  2059  000878  6A08               	clrf	??_read_IR,c
  2060  00087A  1208               	iorwf	??_read_IR,f,c
  2061  00087C  0E00               	movlw	0
  2062  00087E  1209               	iorwf	??_read_IR+1,f,c
  2063  000880  EE20 F002          	lfsr	2,2
  2064  000884  5006               	movf	read_IR@Values,w,c
  2065  000886  26D9               	addwf	fsr2l,f,c
  2066  000888  5007               	movf	read_IR@Values+1,w,c
  2067  00088A  22DA               	addwfc	fsr2h,f,c
  2068  00088C  C008  FFDE         	movff	??_read_IR,postinc2
  2069  000890  C009  FFDD         	movff	??_read_IR+1,postdec2
  2070                           
  2071                           ;ir.c: 45: if ((Values->left == Values->left_prev) && (Values->left <= 200)) {
  2072  000894  EE20 F004          	lfsr	2,4
  2073  000898  5006               	movf	read_IR@Values,w,c
  2074  00089A  26D9               	addwf	fsr2l,f,c
  2075  00089C  5007               	movf	read_IR@Values+1,w,c
  2076  00089E  22DA               	addwfc	fsr2h,f,c
  2077  0008A0  C006  FFE1         	movff	read_IR@Values,fsr1l
  2078  0008A4  C007  FFE2         	movff	read_IR@Values+1,fsr1h
  2079  0008A8  50DE               	movf	postinc2,w,c
  2080  0008AA  18E6               	xorwf	postinc1,w,c
  2081  0008AC  E117               	bnz	l2416
  2082  0008AE  50DE               	movf	postinc2,w,c
  2083  0008B0  18E6               	xorwf	postinc1,w,c
  2084  0008B2  A4D8               	btfss	status,2,c
  2085  0008B4  D013               	goto	l248
  2086  0008B6  C006  FFD9         	movff	read_IR@Values,fsr2l
  2087  0008BA  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2088  0008BE  0E01               	movlw	1
  2089  0008C0  50DB               	movf	plusw2,w,c
  2090  0008C2  E10C               	bnz	l2416
  2091  0008C4  0EC9               	movlw	201
  2092  0008C6  5CDE               	subwf	postinc2,w,c
  2093  0008C8  B0D8               	btfsc	status,0,c
  2094  0008CA  D008               	goto	l248
  2095                           
  2096                           ;ir.c: 46: Values->left = 0;
  2097  0008CC  C006  FFD9         	movff	read_IR@Values,fsr2l
  2098  0008D0  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2099  0008D4  0E00               	movlw	0
  2100  0008D6  6EDE               	movwf	postinc2,c
  2101  0008D8  0E00               	movlw	0
  2102  0008DA  6EDD               	movwf	postdec2,c
  2103  0008DC                     l248:
  2104  0008DC                     l2416:
  2105                           
  2106                           ;ir.c: 47: };ir.c: 49: if ((Values->right == Values->right_prev) && (Values->right <= 20
      +                          0)) {
  2107  0008DC  EE20 F006          	lfsr	2,6
  2108  0008E0  5006               	movf	read_IR@Values,w,c
  2109  0008E2  26D9               	addwf	fsr2l,f,c
  2110  0008E4  5007               	movf	read_IR@Values+1,w,c
  2111  0008E6  22DA               	addwfc	fsr2h,f,c
  2112  0008E8  EE10 F002          	lfsr	1,2
  2113  0008EC  5006               	movf	read_IR@Values,w,c
  2114  0008EE  26E1               	addwf	fsr1l,f,c
  2115  0008F0  5007               	movf	read_IR@Values+1,w,c
  2116  0008F2  22E2               	addwfc	fsr1h,f,c
  2117  0008F4  50DE               	movf	postinc2,w,c
  2118  0008F6  18E6               	xorwf	postinc1,w,c
  2119  0008F8  E11B               	bnz	l249
  2120  0008FA  50DE               	movf	postinc2,w,c
  2121  0008FC  18E6               	xorwf	postinc1,w,c
  2122  0008FE  A4D8               	btfss	status,2,c
  2123  000900  D017               	goto	l249
  2124  000902  EE20 F002          	lfsr	2,2
  2125  000906  5006               	movf	read_IR@Values,w,c
  2126  000908  26D9               	addwf	fsr2l,f,c
  2127  00090A  5007               	movf	read_IR@Values+1,w,c
  2128  00090C  22DA               	addwfc	fsr2h,f,c
  2129  00090E  0E01               	movlw	1
  2130  000910  50DB               	movf	plusw2,w,c
  2131  000912  E10E               	bnz	l249
  2132  000914  0EC9               	movlw	201
  2133  000916  5CDE               	subwf	postinc2,w,c
  2134  000918  B0D8               	btfsc	status,0,c
  2135  00091A  D00A               	goto	l249
  2136                           
  2137                           ;ir.c: 50: Values->right = 0;
  2138  00091C  EE20 F002          	lfsr	2,2
  2139  000920  5006               	movf	read_IR@Values,w,c
  2140  000922  26D9               	addwf	fsr2l,f,c
  2141  000924  5007               	movf	read_IR@Values+1,w,c
  2142  000926  22DA               	addwfc	fsr2h,f,c
  2143  000928  0E00               	movlw	0
  2144  00092A  6EDE               	movwf	postinc2,c
  2145  00092C  0E00               	movlw	0
  2146  00092E  6EDD               	movwf	postdec2,c
  2147  000930                     l249:
  2148                           
  2149                           ;ir.c: 51: };ir.c: 53: Values->left = Values->left / 64;
  2150  000930  C006  FFD9         	movff	read_IR@Values,fsr2l
  2151  000934  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2152  000938  CFDE F008          	movff	postinc2,??_read_IR
  2153  00093C  CFDD F009          	movff	postdec2,??_read_IR+1
  2154  000940  0E06               	movlw	6
  2155  000942  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  2156  000944                     u1395:
  2157  000944  90D8               	bcf	status,0,c
  2158  000946  3209               	rrcf	??_read_IR+1,f,c
  2159  000948  3208               	rrcf	??_read_IR,f,c
  2160  00094A  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  2161  00094C  D7FB               	goto	u1395
  2162  00094E  C006  FFD9         	movff	read_IR@Values,fsr2l
  2163  000952  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2164  000956  C008  FFDE         	movff	??_read_IR,postinc2
  2165  00095A  C009  FFDD         	movff	??_read_IR+1,postdec2
  2166                           
  2167                           ;ir.c: 54: if (Values->left > 200) {
  2168  00095E  C006  FFD9         	movff	read_IR@Values,fsr2l
  2169  000962  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2170  000966  0E01               	movlw	1
  2171  000968  50DB               	movf	plusw2,w,c
  2172  00096A  E104               	bnz	u1400
  2173  00096C  0EC9               	movlw	201
  2174  00096E  5CDE               	subwf	postinc2,w,c
  2175  000970  A0D8               	btfss	status,0,c
  2176  000972  D008               	goto	l250
  2177  000974                     u1400:
  2178                           
  2179                           ;ir.c: 55: Values->left = 200;
  2180  000974  C006  FFD9         	movff	read_IR@Values,fsr2l
  2181  000978  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  2182  00097C  0EC8               	movlw	200
  2183  00097E  6EDE               	movwf	postinc2,c
  2184  000980  0E00               	movlw	0
  2185  000982  6EDD               	movwf	postdec2,c
  2186  000984                     l250:
  2187                           
  2188                           ;ir.c: 56: };ir.c: 58: Values->right = Values->right / 64;
  2189  000984  EE20 F002          	lfsr	2,2
  2190  000988  5006               	movf	read_IR@Values,w,c
  2191  00098A  26D9               	addwf	fsr2l,f,c
  2192  00098C  5007               	movf	read_IR@Values+1,w,c
  2193  00098E  22DA               	addwfc	fsr2h,f,c
  2194  000990  CFDE F008          	movff	postinc2,??_read_IR
  2195  000994  CFDD F009          	movff	postdec2,??_read_IR+1
  2196  000998  0E06               	movlw	6
  2197  00099A  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  2198  00099C                     u1415:
  2199  00099C  90D8               	bcf	status,0,c
  2200  00099E  3209               	rrcf	??_read_IR+1,f,c
  2201  0009A0  3208               	rrcf	??_read_IR,f,c
  2202  0009A2  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  2203  0009A4  D7FB               	goto	u1415
  2204  0009A6  EE20 F002          	lfsr	2,2
  2205  0009AA  5006               	movf	read_IR@Values,w,c
  2206  0009AC  26D9               	addwf	fsr2l,f,c
  2207  0009AE  5007               	movf	read_IR@Values+1,w,c
  2208  0009B0  22DA               	addwfc	fsr2h,f,c
  2209  0009B2  C008  FFDE         	movff	??_read_IR,postinc2
  2210  0009B6  C009  FFDD         	movff	??_read_IR+1,postdec2
  2211                           
  2212                           ;ir.c: 59: if (Values->right > 200) {
  2213  0009BA  EE20 F002          	lfsr	2,2
  2214  0009BE  5006               	movf	read_IR@Values,w,c
  2215  0009C0  26D9               	addwf	fsr2l,f,c
  2216  0009C2  5007               	movf	read_IR@Values+1,w,c
  2217  0009C4  22DA               	addwfc	fsr2h,f,c
  2218  0009C6  0E01               	movlw	1
  2219  0009C8  50DB               	movf	plusw2,w,c
  2220  0009CA  E104               	bnz	u1420
  2221  0009CC  0EC9               	movlw	201
  2222  0009CE  5CDE               	subwf	postinc2,w,c
  2223  0009D0  A0D8               	btfss	status,0,c
  2224  0009D2  0012               	return	
  2225  0009D4                     u1420:
  2226                           
  2227                           ;ir.c: 60: Values->right = 200;
  2228  0009D4  EE20 F002          	lfsr	2,2
  2229  0009D8  5006               	movf	read_IR@Values,w,c
  2230  0009DA  26D9               	addwf	fsr2l,f,c
  2231  0009DC  5007               	movf	read_IR@Values+1,w,c
  2232  0009DE  22DA               	addwfc	fsr2h,f,c
  2233  0009E0  0EC8               	movlw	200
  2234  0009E2  6EDE               	movwf	postinc2,c
  2235  0009E4  0E00               	movlw	0
  2236  0009E6  6EDD               	movwf	postdec2,c
  2237  0009E8  0012               	return	
  2238  0009EA                     __end_of_read_IR:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           postinc1	equ	0xFE6
  2247                           postdec1	equ	0xFE5
  2248                           fsr1h	equ	0xFE2
  2249                           fsr1l	equ	0xFE1
  2250                           indf2	equ	0xFDF
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           plusw2	equ	0xFDB
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _print_RFID *****************
  2259 ;; Defined at:
  2260 ;;		line 27 in file "rfid.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  pa              2   10[COMRAM] PTR unsigned char 
  2263 ;;		 -> string_rfid(17), 
  2264 ;;  dis             2   12[COMRAM] PTR unsigned char 
  2265 ;;		 -> string_rfid(17), 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;		None
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2277 ;;      Params:         4       0       0       0
  2278 ;;      Locals:         0       0       0       0
  2279 ;;      Temps:          6       0       0       0
  2280 ;;      Totals:        10       0       0       0
  2281 ;;Total ram usage:       10 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    5
  2284 ;; This function calls:
  2285 ;;		_LCD_clear
  2286 ;;		_LCD_line
  2287 ;;		_LCD_send
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text6
  2294  001172                     __ptext6:
  2295                           	opt stack 0
  2296  001172                     _print_RFID:
  2297                           	opt stack 25
  2298                           
  2299                           ;rfid.c: 29: LCD_clear();
  2300                           
  2301                           ;incstack = 0
  2302  001172  EC67  F00A         	call	_LCD_clear	;wreg free
  2303                           
  2304                           ;rfid.c: 30: LCD_line(1);
  2305  001176  0E01               	movlw	1
  2306  001178  EC00  F00A         	call	_LCD_line
  2307                           
  2308                           ;rfid.c: 31: while (*pa != 0x03) {
  2309  00117C  D002               	goto	l393
  2310  00117E                     
  2311                           ;rfid.c: 32: pa++;
  2312  00117E  4A0B               	infsnz	print_RFID@pa,f,c
  2313  001180  2A0C               	incf	print_RFID@pa+1,f,c
  2314  001182                     l393:
  2315  001182  C00B  FFD9         	movff	print_RFID@pa,fsr2l
  2316  001186  C00C  FFDA         	movff	print_RFID@pa+1,fsr2h
  2317  00118A  0E03               	movlw	3
  2318  00118C  18DE               	xorwf	postinc2,w,c
  2319  00118E  B4D8               	btfsc	status,2,c
  2320  001190  D012               	goto	l396
  2321  001192  D7F5               	goto	l394
  2322  001194                     
  2323                           ;rfid.c: 38: LCD_send(*(dis + 1), 1);
  2324  001194  0E01               	movlw	1
  2325  001196  6E08               	movwf	LCD_send@type,c
  2326  001198  EE20 F001          	lfsr	2,1
  2327  00119C  500D               	movf	print_RFID@dis,w,c
  2328  00119E  26D9               	addwf	fsr2l,f,c
  2329  0011A0  500E               	movf	print_RFID@dis+1,w,c
  2330  0011A2  22DA               	addwfc	fsr2h,f,c
  2331  0011A4  50DF               	movf	indf2,w,c
  2332  0011A6  EC2F  F00A         	call	_LCD_send
  2333                           
  2334                           ;rfid.c: 39: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2335  0011AA  0E21               	movlw	33
  2336  0011AC                     u2007:
  2337  0011AC  2EE8               	decfsz	wreg,f,c
  2338  0011AE  D7FE               	bra	u2007
  2339  0011B0  F000               	nop	
  2340                           
  2341                           ;rfid.c: 41: dis++;
  2342  0011B2  4A0D               	infsnz	print_RFID@dis,f,c
  2343  0011B4  2A0E               	incf	print_RFID@dis+1,f,c
  2344  0011B6                     l396:
  2345  0011B6  0EFE               	movlw	254
  2346  0011B8  6E0F               	movwf	??_print_RFID& (0+255),c
  2347  0011BA  0EFF               	movlw	255
  2348  0011BC  6E10               	movwf	(??_print_RFID+1)& (0+255),c
  2349  0011BE  C00B  F011         	movff	print_RFID@pa,??_print_RFID+2
  2350  0011C2  C00C  F012         	movff	print_RFID@pa+1,??_print_RFID+3
  2351  0011C6  500F               	movf	??_print_RFID,w,c
  2352  0011C8  2611               	addwf	??_print_RFID+2,f,c
  2353  0011CA  5010               	movf	??_print_RFID+1,w,c
  2354  0011CC  2212               	addwfc	??_print_RFID+3,f,c
  2355  0011CE  0E01               	movlw	1
  2356  0011D0  240D               	addwf	print_RFID@dis,w,c
  2357  0011D2  6E13               	movwf	(??_print_RFID+4)& (0+255),c
  2358  0011D4  0E00               	movlw	0
  2359  0011D6  200E               	addwfc	print_RFID@dis+1,w,c
  2360  0011D8  6E14               	movwf	(??_print_RFID+5)& (0+255),c
  2361  0011DA  5011               	movf	??_print_RFID+2,w,c
  2362  0011DC  5C13               	subwf	??_print_RFID+4,w,c
  2363  0011DE  5012               	movf	??_print_RFID+3,w,c
  2364  0011E0  5814               	subwfb	??_print_RFID+5,w,c
  2365  0011E2  A0D8               	btfss	status,0,c
  2366  0011E4  D7D7               	goto	l397
  2367                           
  2368                           ;rfid.c: 42: };rfid.c: 43: LCD_line(2);
  2369  0011E6  0E02               	movlw	2
  2370  0011E8  EC00  F00A         	call	_LCD_line
  2371  0011EC  0012               	return		;funcret
  2372  0011EE                     __end_of_print_RFID:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           prodh	equ	0xFF4
  2376                           prodl	equ	0xFF3
  2377                           intcon	equ	0xFF2
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           postinc1	equ	0xFE6
  2381                           postdec1	equ	0xFE5
  2382                           fsr1h	equ	0xFE2
  2383                           fsr1l	equ	0xFE1
  2384                           indf2	equ	0xFDF
  2385                           postinc2	equ	0xFDE
  2386                           postdec2	equ	0xFDD
  2387                           plusw2	equ	0xFDB
  2388                           fsr2h	equ	0xFDA
  2389                           fsr2l	equ	0xFD9
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _print_IR *****************
  2393 ;; Defined at:
  2394 ;;		line 123 in file "lcd.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  Values          2   31[COMRAM] PTR struct Sensor_ir
  2397 ;;		 -> main@Values(8), 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  buf            16   34[COMRAM] unsigned char [16]
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2409 ;;      Params:         2       0       0       0
  2410 ;;      Locals:        16       0       0       0
  2411 ;;      Temps:          1       0       0       0
  2412 ;;      Totals:        19       0       0       0
  2413 ;;Total ram usage:       19 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    5
  2416 ;; This function calls:
  2417 ;;		_LCD_clear
  2418 ;;		_LCD_line
  2419 ;;		_LCD_string
  2420 ;;		_sprintf
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text7
  2427  000DE8                     __ptext7:
  2428                           	opt stack 0
  2429  000DE8                     _print_IR:
  2430                           	opt stack 25
  2431                           
  2432                           ;lcd.c: 124: LCD_clear();
  2433                           
  2434                           ;incstack = 0
  2435  000DE8  EC67  F00A         	call	_LCD_clear	;wreg free
  2436                           
  2437                           ;lcd.c: 125: char buf[16];;lcd.c: 126: LCD_line(1);
  2438  000DEC  0E01               	movlw	1
  2439  000DEE  EC00  F00A         	call	_LCD_line
  2440                           
  2441                           ;lcd.c: 127: sprintf(buf, "Left: %u", Values->left);
  2442  000DF2  0E23               	movlw	low print_IR@buf
  2443  000DF4  6E12               	movwf	sprintf@sp,c
  2444  000DF6  0E00               	movlw	high print_IR@buf
  2445  000DF8  6E13               	movwf	sprintf@sp+1,c
  2446  000DFA  0E3D               	movlw	low STR_1
  2447  000DFC  6E14               	movwf	sprintf@f,c
  2448  000DFE  0E03               	movlw	high STR_1
  2449  000E00  6E15               	movwf	sprintf@f+1,c
  2450  000E02  C020  FFD9         	movff	print_IR@Values,fsr2l
  2451  000E06  C021  FFDA         	movff	print_IR@Values+1,fsr2h
  2452  000E0A  CFDE F016          	movff	postinc2,?_sprintf+4
  2453  000E0E  CFDD F017          	movff	postdec2,?_sprintf+5
  2454  000E12  ECF5  F004         	call	_sprintf	;wreg free
  2455                           
  2456                           ;lcd.c: 128: LCD_string(buf);
  2457  000E16  0E23               	movlw	low print_IR@buf
  2458  000E18  6E0A               	movwf	LCD_string@string,c
  2459  000E1A  0E00               	movlw	high print_IR@buf
  2460  000E1C  6E0B               	movwf	LCD_string@string+1,c
  2461  000E1E  ECE8  F009         	call	_LCD_string	;wreg free
  2462                           
  2463                           ;lcd.c: 129: LCD_line(2);
  2464  000E22  0E02               	movlw	2
  2465  000E24  EC00  F00A         	call	_LCD_line
  2466                           
  2467                           ;lcd.c: 130: sprintf(buf, "Right: %u", Values->right);
  2468  000E28  0E23               	movlw	low print_IR@buf
  2469  000E2A  6E12               	movwf	sprintf@sp,c
  2470  000E2C  0E00               	movlw	high print_IR@buf
  2471  000E2E  6E13               	movwf	sprintf@sp+1,c
  2472  000E30  0E33               	movlw	low STR_2
  2473  000E32  6E14               	movwf	sprintf@f,c
  2474  000E34  0E03               	movlw	high STR_2
  2475  000E36  6E15               	movwf	sprintf@f+1,c
  2476  000E38  EE20 F002          	lfsr	2,2
  2477  000E3C  5020               	movf	print_IR@Values,w,c
  2478  000E3E  26D9               	addwf	fsr2l,f,c
  2479  000E40  5021               	movf	print_IR@Values+1,w,c
  2480  000E42  22DA               	addwfc	fsr2h,f,c
  2481  000E44  CFDE F016          	movff	postinc2,?_sprintf+4
  2482  000E48  CFDD F017          	movff	postdec2,?_sprintf+5
  2483  000E4C  ECF5  F004         	call	_sprintf	;wreg free
  2484                           
  2485                           ;lcd.c: 131: LCD_string(buf);
  2486  000E50  0E23               	movlw	low print_IR@buf
  2487  000E52  6E0A               	movwf	LCD_string@string,c
  2488  000E54  0E00               	movlw	high print_IR@buf
  2489  000E56  6E0B               	movwf	LCD_string@string+1,c
  2490  000E58  ECE8  F009         	call	_LCD_string	;wreg free
  2491                           
  2492                           ;lcd.c: 132: _delay((unsigned long)((50)*(8000000/4000.0)));
  2493  000E5C  0E82               	movlw	130
  2494  000E5E  6E22               	movwf	??_print_IR& (0+255),c
  2495  000E60  0EDE               	movlw	222
  2496  000E62                     u2017:
  2497  000E62  2EE8               	decfsz	wreg,f,c
  2498  000E64  D7FE               	bra	u2017
  2499  000E66  2E22               	decfsz	??_print_IR& (0+255),f,c
  2500  000E68  D7FC               	bra	u2017
  2501                           
  2502                           ;lcd.c: 133: _delay((unsigned long)((50)*(8000000/4000.0)));
  2503  000E6A  0E82               	movlw	130
  2504  000E6C  6E22               	movwf	??_print_IR& (0+255),c
  2505  000E6E  0EDE               	movlw	222
  2506  000E70                     u2027:
  2507  000E70  2EE8               	decfsz	wreg,f,c
  2508  000E72  D7FE               	bra	u2027
  2509  000E74  2E22               	decfsz	??_print_IR& (0+255),f,c
  2510  000E76  D7FC               	bra	u2027
  2511                           
  2512                           ;lcd.c: 134: _delay((unsigned long)((50)*(8000000/4000.0)));
  2513  000E78  0E82               	movlw	130
  2514  000E7A  6E22               	movwf	??_print_IR& (0+255),c
  2515  000E7C  0EDE               	movlw	222
  2516  000E7E                     u2037:
  2517  000E7E  2EE8               	decfsz	wreg,f,c
  2518  000E80  D7FE               	bra	u2037
  2519  000E82  2E22               	decfsz	??_print_IR& (0+255),f,c
  2520  000E84  D7FC               	bra	u2037
  2521                           
  2522                           ;lcd.c: 135: _delay((unsigned long)((50)*(8000000/4000.0)));
  2523  000E86  0E82               	movlw	130
  2524  000E88  6E22               	movwf	??_print_IR& (0+255),c
  2525  000E8A  0EDE               	movlw	222
  2526  000E8C                     u2047:
  2527  000E8C  2EE8               	decfsz	wreg,f,c
  2528  000E8E  D7FE               	bra	u2047
  2529  000E90  2E22               	decfsz	??_print_IR& (0+255),f,c
  2530  000E92  D7FC               	bra	u2047
  2531  000E94  0012               	return		;funcret
  2532  000E96                     __end_of_print_IR:
  2533                           	opt stack 0
  2534                           tblptru	equ	0xFF8
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           intcon	equ	0xFF2
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           postinc1	equ	0xFE6
  2541                           postdec1	equ	0xFE5
  2542                           fsr1h	equ	0xFE2
  2543                           fsr1l	equ	0xFE1
  2544                           indf2	equ	0xFDF
  2545                           postinc2	equ	0xFDE
  2546                           postdec2	equ	0xFDD
  2547                           plusw2	equ	0xFDB
  2548                           fsr2h	equ	0xFDA
  2549                           fsr2l	equ	0xFD9
  2550                           status	equ	0xFD8
  2551                           
  2552 ;; *************** function _sprintf *****************
  2553 ;; Defined at:
  2554 ;;		line 500 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/doprnt.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  sp              2   17[COMRAM] PTR unsigned char 
  2557 ;;		 -> check_sum@buf_cs(16), main@buf_793(16), main@buf(16), print_IR@buf(16), 
  2558 ;;  f               2   19[COMRAM] PTR const unsigned char 
  2559 ;;		 -> STR_6(16), STR_5(14), STR_4(10), STR_3(6), 
  2560 ;;		 -> STR_2(10), STR_1(9), 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  tmpval          4    0        struct .
  2563 ;;  cp              3    0        PTR const unsigned char 
  2564 ;;  val             2   28[COMRAM] unsigned int 
  2565 ;;  ap              2   26[COMRAM] PTR void [1]
  2566 ;;		 -> ?_sprintf(2), 
  2567 ;;  len             2    0        unsigned int 
  2568 ;;  c               1   30[COMRAM] unsigned char 
  2569 ;;  flag            1   25[COMRAM] unsigned char 
  2570 ;;  prec            1   24[COMRAM] char 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  2   17[COMRAM] int 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2580 ;;      Params:         6       0       0       0
  2581 ;;      Locals:         7       0       0       0
  2582 ;;      Temps:          1       0       0       0
  2583 ;;      Totals:        14       0       0       0
  2584 ;;Total ram usage:       14 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    2
  2587 ;; This function calls:
  2588 ;;		___lwdiv
  2589 ;;		___lwmod
  2590 ;; This function is called by:
  2591 ;;		_print_IR
  2592 ;;		_main
  2593 ;;		_check_sum
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text8
  2598  0009EA                     __ptext8:
  2599                           	opt stack 0
  2600  0009EA                     _sprintf:
  2601                           	opt stack 28
  2602                           
  2603                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  2604                           
  2605                           ;incstack = 0
  2606  0009EA  0E16               	movlw	low (?_sprintf+4)
  2607  0009EC  6E1B               	movwf	sprintf@ap,c
  2608  0009EE  0E00               	movlw	high (?_sprintf+4)
  2609  0009F0  6E1C               	movwf	sprintf@ap+1,c
  2610                           
  2611                           ;doprnt.c: 548: while((c = *f++)) {
  2612  0009F2  D0B1               	goto	u1220
  2613  0009F4                     
  2614                           ;doprnt.c: 550: if(c != '%')
  2615  0009F4  0E25               	movlw	37
  2616  0009F6  181F               	xorwf	sprintf@c,w,c
  2617  0009F8  B4D8               	btfsc	status,2,c
  2618  0009FA  D004               	goto	l447
  2619  0009FC  D010               	goto	l455
  2620  0009FE                     l2166:
  2621  0009FE  4A12               	infsnz	sprintf@sp,f,c
  2622  000A00  2A13               	incf	sprintf@sp+1,f,c
  2623                           
  2624                           ;doprnt.c: 554: continue;
  2625  000A02  D0A9               	goto	u1220
  2626  000A04                     l447:
  2627                           
  2628                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  2629  000A04  0E00               	movlw	0
  2630  000A06  6E1A               	movwf	sprintf@flag,c
  2631                           
  2632                           ;doprnt.c: 654: switch(c = *f++) {
  2633  000A08  D013               	goto	l448
  2634  000A0A                     
  2635                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2636  000A0A  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2637  000A0E  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2638  000A12  50DF               	movf	indf2,w,c
  2639  000A14  6E1F               	movwf	sprintf@c,c
  2640  000A16  0E02               	movlw	2
  2641  000A18  261B               	addwf	sprintf@ap,f,c
  2642  000A1A  0E00               	movlw	0
  2643  000A1C  221C               	addwfc	sprintf@ap+1,f,c
  2644  000A1E                     l455:
  2645                           
  2646                           ;doprnt.c: 828: ((*sp++ = (c)));
  2647  000A1E  C012  FFD9         	movff	sprintf@sp,fsr2l
  2648  000A22  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2649  000A26  C01F  FFDF         	movff	sprintf@c,indf2
  2650  000A2A  D7E9               	goto	l2166
  2651  000A2C                     
  2652                           ;doprnt.c: 837: flag |= 0x40;
  2653  000A2C  8C1A               	bsf	sprintf@flag,6,c
  2654                           
  2655                           ;doprnt.c: 841: }
  2656                           
  2657                           ;doprnt.c: 838: break;
  2658  000A2E  D01A               	goto	l453
  2659  000A30                     l448:
  2660  000A30  C014  FFF6         	movff	sprintf@f,tblptrl
  2661  000A34  C015  FFF7         	movff	sprintf@f+1,tblptrh
  2662  000A38  4A14               	infsnz	sprintf@f,f,c
  2663  000A3A  2A15               	incf	sprintf@f+1,f,c
  2664  000A3C                     	if	0	;tblptru may be non-zero
  2665  000A3C                     	endif
  2666  000A3C                     	if	0	;tblptru may be non-zero
  2667  000A3C                     	endif
  2668  000A3C  0008               	tblrd		*
  2669  000A3E  CFF5 F01F          	movff	tablat,sprintf@c
  2670  000A42  501F               	movf	sprintf@c,w,c
  2671                           
  2672                           ; Switch size 1, requested type "space"
  2673                           ; Number of cases is 5, Range of values is 0 to 117
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte           16     9 (average)
  2677                           ;	Chosen strategy is simple_byte
  2678  000A44  0A00               	xorlw	0	; case 0
  2679  000A46  B4D8               	btfsc	status,2,c
  2680  000A48  D092               	goto	u1230
  2681  000A4A  0A63               	xorlw	99	; case 99
  2682  000A4C  B4D8               	btfsc	status,2,c
  2683  000A4E  D7DD               	goto	l454
  2684  000A50  0A07               	xorlw	7	; case 100
  2685  000A52  B4D8               	btfsc	status,2,c
  2686  000A54  D007               	goto	l453
  2687  000A56  0A0D               	xorlw	13	; case 105
  2688  000A58  B4D8               	btfsc	status,2,c
  2689  000A5A  D004               	goto	l453
  2690  000A5C  0A1C               	xorlw	28	; case 117
  2691  000A5E  B4D8               	btfsc	status,2,c
  2692  000A60  D7E5               	goto	l456
  2693  000A62  D7DD               	goto	l455
  2694  000A64                     l453:
  2695                           
  2696                           ;doprnt.c: 1270: if((flag & 0x40) == 0x00)
  2697  000A64  BC1A               	btfsc	sprintf@flag,6,c
  2698  000A66  D015               	goto	l457
  2699                           
  2700                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2701  000A68  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2702  000A6C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2703  000A70  CFDE F01D          	movff	postinc2,sprintf@val
  2704  000A74  CFDD F01E          	movff	postdec2,sprintf@val+1
  2705  000A78  0E02               	movlw	2
  2706  000A7A  261B               	addwf	sprintf@ap,f,c
  2707  000A7C  0E00               	movlw	0
  2708  000A7E  221C               	addwfc	sprintf@ap+1,f,c
  2709                           
  2710                           ;doprnt.c: 1280: if((int)val < 0) {
  2711  000A80  AE1E               	btfss	sprintf@val+1,7,c
  2712  000A82  D013               	goto	l459
  2713                           
  2714                           ;doprnt.c: 1281: flag |= 0x03;
  2715  000A84  0E03               	movlw	3
  2716  000A86  121A               	iorwf	sprintf@flag,f,c
  2717                           
  2718                           ;doprnt.c: 1282: val = -val;
  2719  000A88  6C1D               	negf	sprintf@val,c
  2720  000A8A  1E1E               	comf	sprintf@val+1,f,c
  2721  000A8C  B0D8               	btfsc	status,0,c
  2722  000A8E  2A1E               	incf	sprintf@val+1,f,c
  2723                           
  2724                           ;doprnt.c: 1283: };doprnt.c: 1285: }
  2725  000A90  D00C               	goto	l459
  2726  000A92                     l457:
  2727                           
  2728                           ;doprnt.c: 1287: else;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  2729  000A92  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2730  000A96  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2731  000A9A  CFDE F01D          	movff	postinc2,sprintf@val
  2732  000A9E  CFDD F01E          	movff	postdec2,sprintf@val+1
  2733  000AA2  0E02               	movlw	2
  2734  000AA4  261B               	addwf	sprintf@ap,f,c
  2735  000AA6  0E00               	movlw	0
  2736  000AA8  221C               	addwfc	sprintf@ap+1,f,c
  2737  000AAA                     l459:
  2738                           
  2739                           ;doprnt.c: 1306: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  2740  000AAA  0E01               	movlw	1
  2741  000AAC  6E1F               	movwf	sprintf@c,c
  2742  000AAE                     l2200:
  2743  000AAE  0E05               	movlw	5
  2744  000AB0  181F               	xorwf	sprintf@c,w,c
  2745  000AB2  B4D8               	btfsc	status,2,c
  2746  000AB4  D012               	goto	u1200
  2747                           
  2748                           ;doprnt.c: 1325: if(val < dpowers[c])
  2749  000AB6  501F               	movf	sprintf@c,w,c
  2750  000AB8  0D02               	mullw	2
  2751  000ABA  0E01               	movlw	low _dpowers
  2752  000ABC  24F3               	addwf	prodl,w,c
  2753  000ABE  6EF6               	movwf	tblptrl,c
  2754  000AC0  0E03               	movlw	high _dpowers
  2755  000AC2  20F4               	addwfc	prodh,w,c
  2756  000AC4  6EF7               	movwf	tblptrh,c
  2757  000AC6                     	if	0	;There are less than 3 active tblptr bytes
  2758  000AC6                     	endif
  2759  000AC6  0009               	tblrd		*+
  2760  000AC8  50F5               	movf	tablat,w,c
  2761  000ACA  5C1D               	subwf	sprintf@val,w,c
  2762  000ACC  0009               	tblrd		*+
  2763  000ACE  50F5               	movf	tablat,w,c
  2764  000AD0  581E               	subwfb	sprintf@val+1,w,c
  2765  000AD2  A0D8               	btfss	status,0,c
  2766  000AD4  D002               	goto	u1200
  2767                           
  2768                           ;doprnt.c: 1326: break;
  2769  000AD6  2A1F               	incf	sprintf@c,f,c
  2770  000AD8  D7EA               	goto	l2200
  2771  000ADA                     u1200:
  2772                           
  2773                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  2774  000ADA  C01A  F018         	movff	sprintf@flag,??_sprintf
  2775  000ADE  0E03               	movlw	3
  2776  000AE0  1618               	andwf	??_sprintf,f,c
  2777  000AE2  B4D8               	btfsc	status,2,c
  2778  000AE4  D008               	goto	l463
  2779                           
  2780                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  2781  000AE6  C012  FFD9         	movff	sprintf@sp,fsr2l
  2782  000AEA  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2783  000AEE  0E2D               	movlw	45
  2784  000AF0  6EDF               	movwf	indf2,c
  2785  000AF2  4A12               	infsnz	sprintf@sp,f,c
  2786  000AF4  2A13               	incf	sprintf@sp+1,f,c
  2787  000AF6                     l463:
  2788                           
  2789                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  2790  000AF6  C01F  F019         	movff	sprintf@c,sprintf@prec
  2791                           
  2792                           ;doprnt.c: 1493: while(prec--) {
  2793  000AFA  D029               	goto	l464
  2794  000AFC                     
  2795                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  2796  000AFC  5019               	movf	sprintf@prec,w,c
  2797  000AFE  0D02               	mullw	2
  2798  000B00  0E01               	movlw	low _dpowers
  2799  000B02  24F3               	addwf	prodl,w,c
  2800  000B04  6EF6               	movwf	tblptrl,c
  2801  000B06  0E03               	movlw	high _dpowers
  2802  000B08  20F4               	addwfc	prodh,w,c
  2803  000B0A  6EF7               	movwf	tblptrh,c
  2804  000B0C                     	if	0	;There are less than 3 active tblptr bytes
  2805  000B0C                     	endif
  2806  000B0C  0009               	tblrd		*+
  2807  000B0E  CFF5 F008          	movff	tablat,___lwdiv@divisor
  2808  000B12  000A               	tblrd		*-
  2809  000B14  CFF5 F009          	movff	tablat,___lwdiv@divisor+1
  2810  000B18  C01D  F006         	movff	sprintf@val,___lwdiv@dividend
  2811  000B1C  C01E  F007         	movff	sprintf@val+1,___lwdiv@dividend+1
  2812  000B20  EC62  F009         	call	___lwdiv	;wreg free
  2813  000B24  C006  F00D         	movff	?___lwdiv,___lwmod@dividend
  2814  000B28  C007  F00E         	movff	?___lwdiv+1,___lwmod@dividend+1
  2815  000B2C  0E00               	movlw	0
  2816  000B2E  6E10               	movwf	___lwmod@divisor+1,c
  2817  000B30  0E0A               	movlw	10
  2818  000B32  6E0F               	movwf	___lwmod@divisor,c
  2819  000B34  EC8B  F009         	call	___lwmod	;wreg free
  2820  000B38  500D               	movf	?___lwmod,w,c
  2821  000B3A  0F30               	addlw	48
  2822  000B3C  6E1F               	movwf	sprintf@c,c
  2823                           
  2824                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  2825  000B3E  C012  FFD9         	movff	sprintf@sp,fsr2l
  2826  000B42  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2827  000B46  C01F  FFDF         	movff	sprintf@c,indf2
  2828  000B4A  4A12               	infsnz	sprintf@sp,f,c
  2829  000B4C  2A13               	incf	sprintf@sp+1,f,c
  2830  000B4E                     l464:
  2831  000B4E  0619               	decf	sprintf@prec,f,c
  2832  000B50  2819               	incf	sprintf@prec,w,c
  2833  000B52  A4D8               	btfss	status,2,c
  2834  000B54  D7D3               	goto	l465
  2835  000B56                     u1220:
  2836  000B56  C014  FFF6         	movff	sprintf@f,tblptrl
  2837  000B5A  C015  FFF7         	movff	sprintf@f+1,tblptrh
  2838  000B5E  4A14               	infsnz	sprintf@f,f,c
  2839  000B60  2A15               	incf	sprintf@f+1,f,c
  2840  000B62                     	if	0	;tblptru may be non-zero
  2841  000B62                     	endif
  2842  000B62                     	if	0	;tblptru may be non-zero
  2843  000B62                     	endif
  2844  000B62  0008               	tblrd		*
  2845  000B64  CFF5 F01F          	movff	tablat,sprintf@c
  2846  000B68  501F               	movf	sprintf@c,w,c
  2847  000B6A  A4D8               	btfss	status,2,c
  2848  000B6C  D743               	goto	l446
  2849  000B6E                     u1230:
  2850                           
  2851                           ;doprnt.c: 1557: *sp = 0;
  2852                           
  2853                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  2854  000B6E  C012  FFD9         	movff	sprintf@sp,fsr2l
  2855  000B72  C013  FFDA         	movff	sprintf@sp+1,fsr2h
  2856  000B76  0E00               	movlw	0
  2857  000B78  6EDF               	movwf	indf2,c
  2858  000B7A  0012               	return	
  2859  000B7C                     __end_of_sprintf:
  2860                           	opt stack 0
  2861                           tblptru	equ	0xFF8
  2862                           tblptrh	equ	0xFF7
  2863                           tblptrl	equ	0xFF6
  2864                           tablat	equ	0xFF5
  2865                           prodh	equ	0xFF4
  2866                           prodl	equ	0xFF3
  2867                           intcon	equ	0xFF2
  2868                           postinc0	equ	0xFEE
  2869                           wreg	equ	0xFE8
  2870                           postinc1	equ	0xFE6
  2871                           postdec1	equ	0xFE5
  2872                           fsr1h	equ	0xFE2
  2873                           fsr1l	equ	0xFE1
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           plusw2	equ	0xFDB
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function ___lwmod *****************
  2883 ;; Defined at:
  2884 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/lwmod.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  dividend        2   12[COMRAM] unsigned int 
  2887 ;;  divisor         2   14[COMRAM] unsigned int 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  counter         1   16[COMRAM] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  2   12[COMRAM] unsigned int 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2899 ;;      Params:         4       0       0       0
  2900 ;;      Locals:         1       0       0       0
  2901 ;;      Temps:          0       0       0       0
  2902 ;;      Totals:         5       0       0       0
  2903 ;;Total ram usage:        5 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_sprintf
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text9
  2914  001316                     __ptext9:
  2915                           	opt stack 0
  2916  001316                     ___lwmod:
  2917                           	opt stack 28
  2918                           
  2919                           ;incstack = 0
  2920  001316  500F               	movf	___lwmod@divisor,w,c
  2921  001318  1010               	iorwf	___lwmod@divisor+1,w,c
  2922  00131A  B4D8               	btfsc	status,2,c
  2923  00131C  D018               	goto	l966
  2924  00131E  0E01               	movlw	1
  2925  001320  6E11               	movwf	___lwmod@counter,c
  2926  001322  D004               	goto	l961
  2927  001324  90D8               	bcf	status,0,c
  2928  001326  360F               	rlcf	___lwmod@divisor,f,c
  2929  001328  3610               	rlcf	___lwmod@divisor+1,f,c
  2930  00132A  2A11               	incf	___lwmod@counter,f,c
  2931  00132C                     l961:
  2932  00132C  AE10               	btfss	___lwmod@divisor+1,7,c
  2933  00132E  D7FA               	goto	l962
  2934  001330                     u1100:
  2935  001330  500F               	movf	___lwmod@divisor,w,c
  2936  001332  5C0D               	subwf	___lwmod@dividend,w,c
  2937  001334  5010               	movf	___lwmod@divisor+1,w,c
  2938  001336  580E               	subwfb	___lwmod@dividend+1,w,c
  2939  001338  A0D8               	btfss	status,0,c
  2940  00133A  D004               	goto	l965
  2941  00133C  500F               	movf	___lwmod@divisor,w,c
  2942  00133E  5E0D               	subwf	___lwmod@dividend,f,c
  2943  001340  5010               	movf	___lwmod@divisor+1,w,c
  2944  001342  5A0E               	subwfb	___lwmod@dividend+1,f,c
  2945  001344                     l965:
  2946  001344  90D8               	bcf	status,0,c
  2947  001346  3210               	rrcf	___lwmod@divisor+1,f,c
  2948  001348  320F               	rrcf	___lwmod@divisor,f,c
  2949  00134A  2E11               	decfsz	___lwmod@counter,f,c
  2950  00134C  D7F1               	goto	u1100
  2951  00134E                     l966:
  2952  00134E  C00D  F00D         	movff	___lwmod@dividend,?___lwmod
  2953  001352  C00E  F00E         	movff	___lwmod@dividend+1,?___lwmod+1
  2954  001356  0012               	return		;funcret
  2955  001358                     __end_of___lwmod:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           intcon	equ	0xFF2
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           postinc1	equ	0xFE6
  2967                           postdec1	equ	0xFE5
  2968                           fsr1h	equ	0xFE2
  2969                           fsr1l	equ	0xFE1
  2970                           indf2	equ	0xFDF
  2971                           postinc2	equ	0xFDE
  2972                           postdec2	equ	0xFDD
  2973                           plusw2	equ	0xFDB
  2974                           fsr2h	equ	0xFDA
  2975                           fsr2l	equ	0xFD9
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function ___lwdiv *****************
  2979 ;; Defined at:
  2980 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/lwdiv.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  dividend        2    5[COMRAM] unsigned int 
  2983 ;;  divisor         2    7[COMRAM] unsigned int 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  quotient        2    9[COMRAM] unsigned int 
  2986 ;;  counter         1   11[COMRAM] unsigned char 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  2    5[COMRAM] unsigned int 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2996 ;;      Params:         4       0       0       0
  2997 ;;      Locals:         3       0       0       0
  2998 ;;      Temps:          0       0       0       0
  2999 ;;      Totals:         7       0       0       0
  3000 ;;Total ram usage:        7 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    1
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_sprintf
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text10
  3011  0012C4                     __ptext10:
  3012                           	opt stack 0
  3013  0012C4                     ___lwdiv:
  3014                           	opt stack 28
  3015                           
  3016                           ;incstack = 0
  3017  0012C4  0E00               	movlw	0
  3018  0012C6  6E0B               	movwf	___lwdiv@quotient+1,c
  3019  0012C8  0E00               	movlw	0
  3020  0012CA  6E0A               	movwf	___lwdiv@quotient,c
  3021  0012CC  5008               	movf	___lwdiv@divisor,w,c
  3022  0012CE  1009               	iorwf	___lwdiv@divisor+1,w,c
  3023  0012D0  B4D8               	btfsc	status,2,c
  3024  0012D2  D01C               	goto	l956
  3025  0012D4  0E01               	movlw	1
  3026  0012D6  6E0C               	movwf	___lwdiv@counter,c
  3027  0012D8  D004               	goto	l951
  3028  0012DA  90D8               	bcf	status,0,c
  3029  0012DC  3608               	rlcf	___lwdiv@divisor,f,c
  3030  0012DE  3609               	rlcf	___lwdiv@divisor+1,f,c
  3031  0012E0  2A0C               	incf	___lwdiv@counter,f,c
  3032  0012E2                     l951:
  3033  0012E2  AE09               	btfss	___lwdiv@divisor+1,7,c
  3034  0012E4  D7FA               	goto	l952
  3035  0012E6                     u1070:
  3036  0012E6  90D8               	bcf	status,0,c
  3037  0012E8  360A               	rlcf	___lwdiv@quotient,f,c
  3038  0012EA  360B               	rlcf	___lwdiv@quotient+1,f,c
  3039  0012EC  5008               	movf	___lwdiv@divisor,w,c
  3040  0012EE  5C06               	subwf	___lwdiv@dividend,w,c
  3041  0012F0  5009               	movf	___lwdiv@divisor+1,w,c
  3042  0012F2  5807               	subwfb	___lwdiv@dividend+1,w,c
  3043  0012F4  A0D8               	btfss	status,0,c
  3044  0012F6  D005               	goto	l955
  3045  0012F8  5008               	movf	___lwdiv@divisor,w,c
  3046  0012FA  5E06               	subwf	___lwdiv@dividend,f,c
  3047  0012FC  5009               	movf	___lwdiv@divisor+1,w,c
  3048  0012FE  5A07               	subwfb	___lwdiv@dividend+1,f,c
  3049  001300  800A               	bsf	___lwdiv@quotient,0,c
  3050  001302                     l955:
  3051  001302  90D8               	bcf	status,0,c
  3052  001304  3209               	rrcf	___lwdiv@divisor+1,f,c
  3053  001306  3208               	rrcf	___lwdiv@divisor,f,c
  3054  001308  2E0C               	decfsz	___lwdiv@counter,f,c
  3055  00130A  D7ED               	goto	u1070
  3056  00130C                     l956:
  3057  00130C  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  3058  001310  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3059  001314  0012               	return		;funcret
  3060  001316                     __end_of___lwdiv:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           postinc0	equ	0xFEE
  3070                           wreg	equ	0xFE8
  3071                           postinc1	equ	0xFE6
  3072                           postdec1	equ	0xFE5
  3073                           fsr1h	equ	0xFE2
  3074                           fsr1l	equ	0xFE1
  3075                           indf2	equ	0xFDF
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           plusw2	equ	0xFDB
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _LCD_string *****************
  3084 ;; Defined at:
  3085 ;;		line 101 in file "lcd.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  string          2    9[COMRAM] PTR unsigned char 
  3088 ;;		 -> check_sum@buf_cs(16), main@buf_793(16), main@buf(16), print_IR@buf(16), 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3100 ;;      Params:         2       0       0       0
  3101 ;;      Locals:         0       0       0       0
  3102 ;;      Temps:          0       0       0       0
  3103 ;;      Totals:         2       0       0       0
  3104 ;;Total ram usage:        2 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    4
  3107 ;; This function calls:
  3108 ;;		_LCD_send
  3109 ;; This function is called by:
  3110 ;;		_print_IR
  3111 ;;		_main
  3112 ;;		_check_sum
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text11
  3117  0013D0                     __ptext11:
  3118                           	opt stack 0
  3119  0013D0                     _LCD_string:
  3120                           	opt stack 25
  3121                           
  3122                           ;lcd.c: 102: while (*string != 0) {
  3123                           
  3124                           ;incstack = 0
  3125  0013D0  D00F               	goto	l49
  3126  0013D2                     
  3127                           ;lcd.c: 105: LCD_send(*string++, 1);
  3128  0013D2  0E01               	movlw	1
  3129  0013D4  6E08               	movwf	LCD_send@type,c
  3130  0013D6  C00A  FFD9         	movff	LCD_string@string,fsr2l
  3131  0013DA  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  3132  0013DE  50DF               	movf	indf2,w,c
  3133  0013E0  EC2F  F00A         	call	_LCD_send
  3134  0013E4  4A0A               	infsnz	LCD_string@string,f,c
  3135  0013E6  2A0B               	incf	LCD_string@string+1,f,c
  3136                           
  3137                           ;lcd.c: 106: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3138  0013E8  0E21               	movlw	33
  3139  0013EA                     u2057:
  3140  0013EA  2EE8               	decfsz	wreg,f,c
  3141  0013EC  D7FE               	bra	u2057
  3142  0013EE  F000               	nop	
  3143  0013F0                     l49:
  3144  0013F0  C00A  FFD9         	movff	LCD_string@string,fsr2l
  3145  0013F4  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  3146  0013F8  50DF               	movf	indf2,w,c
  3147  0013FA  B4D8               	btfsc	status,2,c
  3148  0013FC  0012               	return	
  3149  0013FE  D7E9               	goto	l50
  3150  001400                     __end_of_LCD_string:
  3151                           	opt stack 0
  3152                           tblptru	equ	0xFF8
  3153                           tblptrh	equ	0xFF7
  3154                           tblptrl	equ	0xFF6
  3155                           tablat	equ	0xFF5
  3156                           prodh	equ	0xFF4
  3157                           prodl	equ	0xFF3
  3158                           intcon	equ	0xFF2
  3159                           postinc0	equ	0xFEE
  3160                           wreg	equ	0xFE8
  3161                           postinc1	equ	0xFE6
  3162                           postdec1	equ	0xFE5
  3163                           fsr1h	equ	0xFE2
  3164                           fsr1l	equ	0xFE1
  3165                           indf2	equ	0xFDF
  3166                           postinc2	equ	0xFDE
  3167                           postdec2	equ	0xFDD
  3168                           plusw2	equ	0xFDB
  3169                           fsr2h	equ	0xFDA
  3170                           fsr2l	equ	0xFD9
  3171                           status	equ	0xFD8
  3172                           
  3173 ;; *************** function _LCD_line *****************
  3174 ;; Defined at:
  3175 ;;		line 89 in file "lcd.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;  line            1    wreg     unsigned char 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  line            1    9[COMRAM] unsigned char 
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      void 
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, status,0, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3189 ;;      Params:         0       0       0       0
  3190 ;;      Locals:         1       0       0       0
  3191 ;;      Temps:          0       0       0       0
  3192 ;;      Totals:         1       0       0       0
  3193 ;;Total ram usage:        1 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    4
  3196 ;; This function calls:
  3197 ;;		_LCD_send
  3198 ;; This function is called by:
  3199 ;;		_print_IR
  3200 ;;		_main
  3201 ;;		_print_RFID
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text12
  3206  001400                     __ptext12:
  3207                           	opt stack 0
  3208  001400                     _LCD_line:
  3209                           	opt stack 25
  3210                           
  3211                           ;incstack = 0
  3212                           ;LCD_line@line stored from wreg
  3213  001400  6E0A               	movwf	LCD_line@line,c
  3214                           
  3215                           ;lcd.c: 90: if (line == 1) {
  3216  001402  040A               	decf	LCD_line@line,w,c
  3217  001404  A4D8               	btfss	status,2,c
  3218  001406  D006               	goto	l43
  3219                           
  3220                           ;lcd.c: 91: LCD_send(0x80, 0);
  3221  001408  0E00               	movlw	0
  3222  00140A  6E08               	movwf	LCD_send@type,c
  3223  00140C  0E80               	movlw	128
  3224  00140E  EC2F  F00A         	call	_LCD_send
  3225                           
  3226                           ;lcd.c: 92: } else if (line == 2) {
  3227  001412  D009               	goto	l45
  3228  001414                     l43:
  3229  001414  0E02               	movlw	2
  3230  001416  180A               	xorwf	LCD_line@line,w,c
  3231  001418  A4D8               	btfss	status,2,c
  3232  00141A  D005               	goto	l45
  3233                           
  3234                           ;lcd.c: 93: LCD_send(0xC0, 0);
  3235  00141C  0E00               	movlw	0
  3236  00141E  6E08               	movwf	LCD_send@type,c
  3237  001420  0EC0               	movlw	192
  3238  001422  EC2F  F00A         	call	_LCD_send
  3239  001426                     l45:
  3240                           
  3241                           ;lcd.c: 94: };lcd.c: 95: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3242  001426  0E21               	movlw	33
  3243  001428                     u2067:
  3244  001428  2EE8               	decfsz	wreg,f,c
  3245  00142A  D7FE               	bra	u2067
  3246  00142C  F000               	nop	
  3247  00142E  0012               	return		;funcret
  3248  001430                     __end_of_LCD_line:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           postinc1	equ	0xFE6
  3260                           postdec1	equ	0xFE5
  3261                           fsr1h	equ	0xFE2
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           plusw2	equ	0xFDB
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _LCD_clear *****************
  3272 ;; Defined at:
  3273 ;;		line 115 in file "lcd.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;		None
  3276 ;; Auto vars:     Size  Location     Type
  3277 ;;		None
  3278 ;; Return value:  Size  Location     Type
  3279 ;;                  1    wreg      void 
  3280 ;; Registers used:
  3281 ;;		wreg, status,2, status,0, cstack
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3287 ;;      Params:         0       0       0       0
  3288 ;;      Locals:         0       0       0       0
  3289 ;;      Temps:          1       0       0       0
  3290 ;;      Totals:         1       0       0       0
  3291 ;;Total ram usage:        1 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    4
  3294 ;; This function calls:
  3295 ;;		_LCD_send
  3296 ;; This function is called by:
  3297 ;;		_print_IR
  3298 ;;		_main
  3299 ;;		_print_RFID
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text13
  3304  0014CE                     __ptext13:
  3305                           	opt stack 0
  3306  0014CE                     _LCD_clear:
  3307                           	opt stack 25
  3308                           
  3309                           ;lcd.c: 116: LCD_send(0b00000001, 0);
  3310                           
  3311                           ;incstack = 0
  3312  0014CE  0E00               	movlw	0
  3313  0014D0  6E08               	movwf	LCD_send@type,c
  3314  0014D2  0E01               	movlw	1
  3315  0014D4  EC2F  F00A         	call	_LCD_send
  3316                           
  3317                           ;lcd.c: 117: _delay((unsigned long)((2)*(8000000/4000.0)));
  3318  0014D8  0E06               	movlw	6
  3319  0014DA  6E0A               	movwf	??_LCD_clear& (0+255),c
  3320  0014DC  0E30               	movlw	48
  3321  0014DE                     u2077:
  3322  0014DE  2EE8               	decfsz	wreg,f,c
  3323  0014E0  D7FE               	bra	u2077
  3324  0014E2  2E0A               	decfsz	??_LCD_clear& (0+255),f,c
  3325  0014E4  D7FC               	bra	u2077
  3326  0014E6  D000               	nop2	
  3327  0014E8  0012               	return		;funcret
  3328  0014EA                     __end_of_LCD_clear:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           postinc0	equ	0xFEE
  3338                           wreg	equ	0xFE8
  3339                           postinc1	equ	0xFE6
  3340                           postdec1	equ	0xFE5
  3341                           fsr1h	equ	0xFE2
  3342                           fsr1l	equ	0xFE1
  3343                           indf2	equ	0xFDF
  3344                           postinc2	equ	0xFDE
  3345                           postdec2	equ	0xFDD
  3346                           plusw2	equ	0xFDB
  3347                           fsr2h	equ	0xFDA
  3348                           fsr2l	equ	0xFD9
  3349                           status	equ	0xFD8
  3350                           
  3351 ;; *************** function _interrupt_EUSART *****************
  3352 ;; Defined at:
  3353 ;;		line 14 in file "rfid.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3367 ;;      Params:         0       0       0       0
  3368 ;;      Locals:         0       0       0       0
  3369 ;;      Temps:          0       0       0       0
  3370 ;;      Totals:         0       0       0       0
  3371 ;;Total ram usage:        0 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    1
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text14
  3382  00154E                     __ptext14:
  3383                           	opt stack 0
  3384  00154E                     _interrupt_EUSART:
  3385                           	opt stack 29
  3386                           
  3387                           ;rfid.c: 15: RCREG;
  3388                           
  3389                           ;incstack = 0
  3390  00154E  50AE               	movf	4014,w,c	;volatile
  3391                           
  3392                           ;rfid.c: 16: RCREG;
  3393  001550  50AE               	movf	4014,w,c	;volatile
  3394                           
  3395                           ;rfid.c: 17: RCREG;
  3396  001552  50AE               	movf	4014,w,c	;volatile
  3397                           
  3398                           ;rfid.c: 18: PIE1bits.RCIE = 1;
  3399  001554  8A9D               	bsf	3997,5,c	;volatile
  3400                           
  3401                           ;rfid.c: 19: INTCONbits.GIEL = 1;
  3402  001556  8CF2               	bsf	intcon,6,c	;volatile
  3403                           
  3404                           ;rfid.c: 20: INTCONbits.GIEH = 1;
  3405  001558  8EF2               	bsf	intcon,7,c	;volatile
  3406                           
  3407                           ;rfid.c: 21: INTCON3bits.INT2IE = 1;
  3408  00155A  88F0               	bsf	intcon3,4,c	;volatile
  3409                           
  3410                           ;rfid.c: 22: INTCONbits.INT0IE = 1;
  3411  00155C  88F2               	bsf	intcon,4,c	;volatile
  3412                           
  3413                           ;rfid.c: 23: INTCON3bits.INT2IE = 1;
  3414  00155E  88F0               	bsf	intcon3,4,c	;volatile
  3415  001560  0012               	return		;funcret
  3416  001562                     __end_of_interrupt_EUSART:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           intcon	equ	0xFF2
  3425                           intcon3	equ	0xFF0
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postinc1	equ	0xFE6
  3429                           postdec1	equ	0xFE5
  3430                           fsr1h	equ	0xFE2
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           postinc2	equ	0xFDE
  3434                           postdec2	equ	0xFDD
  3435                           plusw2	equ	0xFDB
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _init_capture *****************
  3441 ;; Defined at:
  3442 ;;		line 25 in file "ir.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3456 ;;      Params:         0       0       0       0
  3457 ;;      Locals:         0       0       0       0
  3458 ;;      Temps:          0       0       0       0
  3459 ;;      Totals:         0       0       0       0
  3460 ;;Total ram usage:        0 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    1
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text15
  3471  0014EA                     __ptext15:
  3472                           	opt stack 0
  3473  0014EA                     _init_capture:
  3474                           	opt stack 29
  3475                           
  3476                           ;ir.c: 27: LATA = 0;
  3477                           
  3478                           ;incstack = 0
  3479  0014EA  0E00               	movlw	0
  3480  0014EC  6E89               	movwf	3977,c	;volatile
  3481                           
  3482                           ;ir.c: 28: TRISA = 0b00001100;
  3483  0014EE  0E0C               	movlw	12
  3484  0014F0  6E92               	movwf	3986,c	;volatile
  3485                           
  3486                           ;ir.c: 29: CAP1CON = 0b01000110;
  3487  0014F2  0E46               	movlw	70
  3488  0014F4  6E63               	movwf	3939,c	;volatile
  3489                           
  3490                           ;ir.c: 30: CAP2CON = 0b01000110;
  3491  0014F6  0E46               	movlw	70
  3492  0014F8  6E62               	movwf	3938,c	;volatile
  3493                           
  3494                           ;ir.c: 31: T5CON = 0b00001001;
  3495  0014FA  0E09               	movlw	9
  3496  0014FC  6EB7               	movwf	4023,c	;volatile
  3497                           
  3498                           ;ir.c: 32: DFLTCON = 0b00011000;
  3499  0014FE  0E18               	movlw	24
  3500  001500  6E60               	movwf	3936,c	;volatile
  3501  001502  0012               	return		;funcret
  3502  001504                     __end_of_init_capture:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           intcon	equ	0xFF2
  3511                           intcon3	equ	0xFF0
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postinc1	equ	0xFE6
  3515                           postdec1	equ	0xFE5
  3516                           fsr1h	equ	0xFE2
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           plusw2	equ	0xFDB
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _init_TIMER5 *****************
  3527 ;; Defined at:
  3528 ;;		line 6 in file "ir.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3542 ;;      Params:         0       0       0       0
  3543 ;;      Locals:         0       0       0       0
  3544 ;;      Temps:          0       0       0       0
  3545 ;;      Totals:         0       0       0       0
  3546 ;;Total ram usage:        0 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    1
  3549 ;; This function calls:
  3550 ;;		Nothing
  3551 ;; This function is called by:
  3552 ;;		_main
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text16
  3557  001504                     __ptext16:
  3558                           	opt stack 0
  3559  001504                     _init_TIMER5:
  3560                           	opt stack 29
  3561                           
  3562                           ;ir.c: 11: T5CON = 0;
  3563                           
  3564                           ;incstack = 0
  3565  001504  0E00               	movlw	0
  3566  001506  6EB7               	movwf	4023,c	;volatile
  3567                           
  3568                           ;ir.c: 12: T5CONbits.T5SEN = 0;
  3569  001508  9EB7               	bcf	4023,7,c	;volatile
  3570                           
  3571                           ;ir.c: 13: T5CONbits.RESEN = 0;
  3572  00150A  9CB7               	bcf	4023,6,c	;volatile
  3573                           
  3574                           ;ir.c: 14: T5CONbits.T5PS = 0b10;
  3575  00150C  50B7               	movf	4023,w,c	;volatile
  3576  00150E  0BE7               	andlw	-25
  3577  001510  0910               	iorlw	16
  3578  001512  6EB7               	movwf	4023,c	;volatile
  3579                           
  3580                           ;ir.c: 15: T5CONbits.T5MOD = 0;
  3581  001514  9AB7               	bcf	4023,5,c	;volatile
  3582                           
  3583                           ;ir.c: 16: T5CONbits.T5SYNC = 0;
  3584  001516  94B7               	bcf	4023,2,c	;volatile
  3585                           
  3586                           ;ir.c: 17: T5CONbits.TMR5CS = 0;
  3587  001518  92B7               	bcf	4023,1,c	;volatile
  3588                           
  3589                           ;ir.c: 18: T5CONbits.TMR5ON = 1;
  3590  00151A  80B7               	bsf	4023,0,c	;volatile
  3591  00151C  0012               	return		;funcret
  3592  00151E                     __end_of_init_TIMER5:
  3593                           	opt stack 0
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           intcon3	equ	0xFF0
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postinc1	equ	0xFE6
  3605                           postdec1	equ	0xFE5
  3606                           fsr1h	equ	0xFE2
  3607                           fsr1l	equ	0xFE1
  3608                           indf2	equ	0xFDF
  3609                           postinc2	equ	0xFDE
  3610                           postdec2	equ	0xFDD
  3611                           plusw2	equ	0xFDB
  3612                           fsr2h	equ	0xFDA
  3613                           fsr2l	equ	0xFD9
  3614                           status	equ	0xFD8
  3615                           
  3616 ;; *************** function _init_RFID *****************
  3617 ;; Defined at:
  3618 ;;		line 3 in file "rfid.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;		None
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;		None
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      void 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3632 ;;      Params:         0       0       0       0
  3633 ;;      Locals:         0       0       0       0
  3634 ;;      Temps:          0       0       0       0
  3635 ;;      Totals:         0       0       0       0
  3636 ;;Total ram usage:        0 bytes
  3637 ;; Hardware stack levels used:    1
  3638 ;; Hardware stack levels required when called:    1
  3639 ;; This function calls:
  3640 ;;		Nothing
  3641 ;; This function is called by:
  3642 ;;		_main
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           	psect	text17
  3647  00151E                     __ptext17:
  3648                           	opt stack 0
  3649  00151E                     _init_RFID:
  3650                           	opt stack 29
  3651                           
  3652                           ;rfid.c: 4: TRISC = TRISC | 0b11000000;
  3653                           
  3654                           ;incstack = 0
  3655  00151E  5094               	movf	3988,w,c	;volatile
  3656  001520  09C0               	iorlw	192
  3657  001522  6E94               	movwf	3988,c	;volatile
  3658                           
  3659                           ;rfid.c: 5: SPBRG = 204;
  3660  001524  0ECC               	movlw	204
  3661  001526  6EAF               	movwf	4015,c	;volatile
  3662                           
  3663                           ;rfid.c: 6: SPBRGH = 0;
  3664  001528  0E00               	movlw	0
  3665  00152A  6EB0               	movwf	4016,c	;volatile
  3666                           
  3667                           ;rfid.c: 7: BAUDCONbits.BRG16 = 1;
  3668  00152C  86AA               	bsf	4010,3,c	;volatile
  3669                           
  3670                           ;rfid.c: 8: TXSTAbits.BRGH = 1;
  3671  00152E  84AC               	bsf	4012,2,c	;volatile
  3672                           
  3673                           ;rfid.c: 9: RCSTAbits.CREN = 1;
  3674  001530  88AB               	bsf	4011,4,c	;volatile
  3675                           
  3676                           ;rfid.c: 10: RCSTAbits.SPEN = 1;
  3677  001532  8EAB               	bsf	4011,7,c	;volatile
  3678                           
  3679                           ;rfid.c: 11: TXSTAbits.TXEN = 1;
  3680  001534  8AAC               	bsf	4012,5,c	;volatile
  3681  001536  0012               	return		;funcret
  3682  001538                     __end_of_init_RFID:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           intcon	equ	0xFF2
  3691                           intcon3	equ	0xFF0
  3692                           postinc0	equ	0xFEE
  3693                           wreg	equ	0xFE8
  3694                           postinc1	equ	0xFE6
  3695                           postdec1	equ	0xFE5
  3696                           fsr1h	equ	0xFE2
  3697                           fsr1l	equ	0xFE1
  3698                           indf2	equ	0xFDF
  3699                           postinc2	equ	0xFDE
  3700                           postdec2	equ	0xFDD
  3701                           plusw2	equ	0xFDB
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function _initTIMER0 *****************
  3707 ;; Defined at:
  3708 ;;		line 82 in file "main.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		wreg, status,2
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3722 ;;      Params:         0       0       0       0
  3723 ;;      Locals:         0       0       0       0
  3724 ;;      Temps:          0       0       0       0
  3725 ;;      Totals:         0       0       0       0
  3726 ;;Total ram usage:        0 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_main
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text18
  3737  001562                     __ptext18:
  3738                           	opt stack 0
  3739  001562                     _initTIMER0:
  3740                           	opt stack 29
  3741                           
  3742                           ;main.c: 84: T0CONbits.TMR0ON = 0;
  3743                           
  3744                           ;incstack = 0
  3745  001562  9ED5               	bcf	4053,7,c	;volatile
  3746                           
  3747                           ;main.c: 85: T0CONbits.T016BIT = 1;
  3748  001564  8CD5               	bsf	4053,6,c	;volatile
  3749                           
  3750                           ;main.c: 86: T0CONbits.T0CS = 0;
  3751  001566  9AD5               	bcf	4053,5,c	;volatile
  3752                           
  3753                           ;main.c: 87: T0CONbits.PSA = 0;
  3754  001568  96D5               	bcf	4053,3,c	;volatile
  3755                           
  3756                           ;main.c: 88: T0CONbits.T0PS = 0b010;
  3757  00156A  50D5               	movf	4053,w,c	;volatile
  3758  00156C  0BF8               	andlw	-8
  3759  00156E  0902               	iorlw	2
  3760  001570  6ED5               	movwf	4053,c	;volatile
  3761                           
  3762                           ;main.c: 91: INTCONbits.TMR0IE = 1;
  3763  001572  8AF2               	bsf	intcon,5,c	;volatile
  3764  001574  0012               	return		;funcret
  3765  001576                     __end_of_initTIMER0:
  3766                           	opt stack 0
  3767                           tblptru	equ	0xFF8
  3768                           tblptrh	equ	0xFF7
  3769                           tblptrl	equ	0xFF6
  3770                           tablat	equ	0xFF5
  3771                           prodh	equ	0xFF4
  3772                           prodl	equ	0xFF3
  3773                           intcon	equ	0xFF2
  3774                           intcon3	equ	0xFF0
  3775                           postinc0	equ	0xFEE
  3776                           wreg	equ	0xFE8
  3777                           postinc1	equ	0xFE6
  3778                           postdec1	equ	0xFE5
  3779                           fsr1h	equ	0xFE2
  3780                           fsr1l	equ	0xFE1
  3781                           indf2	equ	0xFDF
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           plusw2	equ	0xFDB
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _initPWM *****************
  3790 ;; Defined at:
  3791 ;;		line 10 in file "motor.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		wreg, status,2
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3805 ;;      Params:         0       0       0       0
  3806 ;;      Locals:         0       0       0       0
  3807 ;;      Temps:          0       0       0       0
  3808 ;;      Totals:         0       0       0       0
  3809 ;;Total ram usage:        0 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    1
  3812 ;; This function calls:
  3813 ;;		Nothing
  3814 ;; This function is called by:
  3815 ;;		_main
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text19
  3820  0014B0                     __ptext19:
  3821                           	opt stack 0
  3822  0014B0                     _initPWM:
  3823                           	opt stack 29
  3824                           
  3825                           ;motor.c: 11: TRISB = 0;
  3826                           
  3827                           ;incstack = 0
  3828  0014B0  0E00               	movlw	0
  3829  0014B2  6E93               	movwf	3987,c	;volatile
  3830                           
  3831                           ;motor.c: 13: PTCON0 = 0b00000000;
  3832  0014B4  0E00               	movlw	0
  3833  0014B6  6E7F               	movwf	3967,c	;volatile
  3834                           
  3835                           ;motor.c: 14: PTCON1 = 0b10000000;
  3836  0014B8  0E80               	movlw	128
  3837  0014BA  6E7E               	movwf	3966,c	;volatile
  3838                           
  3839                           ;motor.c: 16: PWMCON0 = 0b01111111;
  3840  0014BC  0E7F               	movlw	127
  3841  0014BE  6E6F               	movwf	3951,c	;volatile
  3842                           
  3843                           ;motor.c: 17: PWMCON1 = 0x00;
  3844  0014C0  0E00               	movlw	0
  3845  0014C2  6E6E               	movwf	3950,c	;volatile
  3846                           
  3847                           ;motor.c: 20: PTPERL = 0b11000111;
  3848  0014C4  0EC7               	movlw	199
  3849  0014C6  6E7B               	movwf	3963,c	;volatile
  3850                           
  3851                           ;motor.c: 21: PTPERH = 0b0000;
  3852  0014C8  0E00               	movlw	0
  3853  0014CA  6E7A               	movwf	3962,c	;volatile
  3854  0014CC  0012               	return		;funcret
  3855  0014CE                     __end_of_initPWM:
  3856                           	opt stack 0
  3857                           tblptru	equ	0xFF8
  3858                           tblptrh	equ	0xFF7
  3859                           tblptrl	equ	0xFF6
  3860                           tablat	equ	0xFF5
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           intcon	equ	0xFF2
  3864                           intcon3	equ	0xFF0
  3865                           postinc0	equ	0xFEE
  3866                           wreg	equ	0xFE8
  3867                           postinc1	equ	0xFE6
  3868                           postdec1	equ	0xFE5
  3869                           fsr1h	equ	0xFE2
  3870                           fsr1l	equ	0xFE1
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           plusw2	equ	0xFDB
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function _forwards *****************
  3880 ;; Defined at:
  3881 ;;		line 152 in file "motor.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;  mL              2   26[COMRAM] PTR struct Motor
  3884 ;;		 -> main@mL(9), 
  3885 ;;  mR              2   28[COMRAM] PTR struct Motor
  3886 ;;		 -> main@mR(9), 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;		None
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3898 ;;      Params:         4       0       0       0
  3899 ;;      Locals:         0       0       0       0
  3900 ;;      Temps:          1       0       0       0
  3901 ;;      Totals:         5       0       0       0
  3902 ;;Total ram usage:        5 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    3
  3905 ;; This function calls:
  3906 ;;		_setMotorPWM
  3907 ;; This function is called by:
  3908 ;;		_main
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text20
  3913  000FC2                     __ptext20:
  3914                           	opt stack 0
  3915  000FC2                     _forwards:
  3916                           	opt stack 27
  3917                           
  3918                           ;motor.c: 153: mL->direction = 0;
  3919                           
  3920                           ;incstack = 0
  3921  000FC2  EE20 F001          	lfsr	2,1
  3922  000FC6  501B               	movf	forwards@mL,w,c
  3923  000FC8  26D9               	addwf	fsr2l,f,c
  3924  000FCA  501C               	movf	forwards@mL+1,w,c
  3925  000FCC  22DA               	addwfc	fsr2h,f,c
  3926  000FCE  0E00               	movlw	0
  3927  000FD0  6EDF               	movwf	indf2,c
  3928                           
  3929                           ;motor.c: 154: mR->direction = 0;
  3930  000FD2  EE20 F001          	lfsr	2,1
  3931  000FD6  501D               	movf	forwards@mR,w,c
  3932  000FD8  26D9               	addwf	fsr2l,f,c
  3933  000FDA  501E               	movf	forwards@mR+1,w,c
  3934  000FDC  22DA               	addwfc	fsr2h,f,c
  3935  000FDE  0E00               	movlw	0
  3936  000FE0  6EDF               	movwf	indf2,c
  3937                           
  3938                           ;motor.c: 155: while (mL->power < 70 || mR->power < 70) {
  3939  000FE2  D02B               	goto	l323
  3940  000FE4                     
  3941                           ;motor.c: 156: if (mL->power < 70) {
  3942  000FE4  C01B  FFD9         	movff	forwards@mL,fsr2l
  3943  000FE8  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  3944  000FEC  0E46               	movlw	70
  3945  000FEE  60DF               	cpfslt	indf2,c
  3946  000FF0  D005               	goto	l325
  3947                           
  3948                           ;motor.c: 157: mL->power++;
  3949  000FF2  C01B  FFD9         	movff	forwards@mL,fsr2l
  3950  000FF6  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  3951  000FFA  2ADF               	incf	indf2,f,c
  3952  000FFC                     l325:
  3953                           
  3954                           ;motor.c: 158: };motor.c: 159: if (mR->power < 70) {
  3955  000FFC  C01D  FFD9         	movff	forwards@mR,fsr2l
  3956  001000  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  3957  001004  0E46               	movlw	70
  3958  001006  60DF               	cpfslt	indf2,c
  3959  001008  D005               	goto	l326
  3960                           
  3961                           ;motor.c: 160: mR->power++;
  3962  00100A  C01D  FFD9         	movff	forwards@mR,fsr2l
  3963  00100E  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  3964  001012  2ADF               	incf	indf2,f,c
  3965  001014                     l326:
  3966                           
  3967                           ;motor.c: 161: };motor.c: 162: setMotorPWM(mL);
  3968  001014  C01B  F014         	movff	forwards@mL,setMotorPWM@m
  3969  001018  C01C  F015         	movff	forwards@mL+1,setMotorPWM@m+1
  3970  00101C  ECBE  F005         	call	_setMotorPWM	;wreg free
  3971                           
  3972                           ;motor.c: 163: setMotorPWM(mR);
  3973  001020  C01D  F014         	movff	forwards@mR,setMotorPWM@m
  3974  001024  C01E  F015         	movff	forwards@mR+1,setMotorPWM@m+1
  3975  001028  ECBE  F005         	call	_setMotorPWM	;wreg free
  3976                           
  3977                           ;motor.c: 164: _delay((unsigned long)((5)*(8000000/4000.0)));
  3978  00102C  0E0D               	movlw	13
  3979  00102E  6E1F               	movwf	??_forwards& (0+255),c
  3980  001030  0EFC               	movlw	252
  3981  001032                     u2087:
  3982  001032  2EE8               	decfsz	wreg,f,c
  3983  001034  D7FE               	bra	u2087
  3984  001036  2E1F               	decfsz	??_forwards& (0+255),f,c
  3985  001038  D7FC               	bra	u2087
  3986  00103A                     l323:
  3987  00103A  C01B  FFD9         	movff	forwards@mL,fsr2l
  3988  00103E  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  3989  001042  0E45               	movlw	69
  3990  001044  64DF               	cpfsgt	indf2,c
  3991  001046  D7CE               	goto	l324
  3992  001048  C01D  FFD9         	movff	forwards@mR,fsr2l
  3993  00104C  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  3994  001050  0E45               	movlw	69
  3995  001052  64DF               	cpfsgt	indf2,c
  3996  001054  D7C7               	goto	l324
  3997  001056  0012               	return	
  3998  001058                     __end_of_forwards:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           intcon3	equ	0xFF0
  4008                           postinc0	equ	0xFEE
  4009                           wreg	equ	0xFE8
  4010                           postinc1	equ	0xFE6
  4011                           postdec1	equ	0xFE5
  4012                           fsr1h	equ	0xFE2
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           postinc2	equ	0xFDE
  4016                           postdec2	equ	0xFDD
  4017                           plusw2	equ	0xFDB
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _delay_tenth_s *****************
  4023 ;; Defined at:
  4024 ;;		line 74 in file "main.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  tenth_second    1    wreg     unsigned char 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  tenth_second    1    6[COMRAM] unsigned char 
  4029 ;;  i               2    7[COMRAM] unsigned int 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      void 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4039 ;;      Params:         0       0       0       0
  4040 ;;      Locals:         3       0       0       0
  4041 ;;      Temps:          1       0       0       0
  4042 ;;      Totals:         4       0       0       0
  4043 ;;Total ram usage:        4 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    1
  4046 ;; This function calls:
  4047 ;;		Nothing
  4048 ;; This function is called by:
  4049 ;;		_main
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text21
  4054  001398                     __ptext21:
  4055                           	opt stack 0
  4056  001398                     _delay_tenth_s:
  4057                           	opt stack 29
  4058                           
  4059                           ;incstack = 0
  4060                           ;delay_tenth_s@tenth_seconds stored from wreg
  4061  001398  6E07               	movwf	delay_tenth_s@tenth_seconds,c
  4062                           
  4063                           ;main.c: 75: unsigned int i = 0;
  4064  00139A  0E00               	movlw	0
  4065  00139C  6E09               	movwf	delay_tenth_s@i+1,c
  4066  00139E  0E00               	movlw	0
  4067  0013A0  6E08               	movwf	delay_tenth_s@i,c
  4068                           
  4069                           ;main.c: 76: for (i = 1; i <= tenth_seconds * 2; i++) {
  4070  0013A2  0E00               	movlw	0
  4071  0013A4  6E09               	movwf	delay_tenth_s@i+1,c
  4072  0013A6  0E01               	movlw	1
  4073  0013A8  6E08               	movwf	delay_tenth_s@i,c
  4074  0013AA  D009               	goto	l162
  4075  0013AC                     
  4076                           ;main.c: 78: _delay((unsigned long)((50)*(8000000/4000.0)));
  4077  0013AC  0E82               	movlw	130
  4078  0013AE  6E06               	movwf	??_delay_tenth_s& (0+255),c
  4079  0013B0  0EDE               	movlw	222
  4080  0013B2                     u2097:
  4081  0013B2  2EE8               	decfsz	wreg,f,c
  4082  0013B4  D7FE               	bra	u2097
  4083  0013B6  2E06               	decfsz	??_delay_tenth_s& (0+255),f,c
  4084  0013B8  D7FC               	bra	u2097
  4085  0013BA  4A08               	infsnz	delay_tenth_s@i,f,c
  4086  0013BC  2A09               	incf	delay_tenth_s@i+1,f,c
  4087  0013BE                     l162:
  4088  0013BE  5007               	movf	delay_tenth_s@tenth_seconds,w,c
  4089  0013C0  0D02               	mullw	2
  4090  0013C2  5008               	movf	delay_tenth_s@i,w,c
  4091  0013C4  5CF3               	subwf	prodl,w,c
  4092  0013C6  5009               	movf	delay_tenth_s@i+1,w,c
  4093  0013C8  58F4               	subwfb	prodh,w,c
  4094  0013CA  A0D8               	btfss	status,0,c
  4095  0013CC  0012               	return	
  4096  0013CE  D7EE               	goto	l163
  4097  0013D0                     __end_of_delay_tenth_s:
  4098                           	opt stack 0
  4099                           tblptru	equ	0xFF8
  4100                           tblptrh	equ	0xFF7
  4101                           tblptrl	equ	0xFF6
  4102                           tablat	equ	0xFF5
  4103                           prodh	equ	0xFF4
  4104                           prodl	equ	0xFF3
  4105                           intcon	equ	0xFF2
  4106                           intcon3	equ	0xFF0
  4107                           postinc0	equ	0xFEE
  4108                           wreg	equ	0xFE8
  4109                           postinc1	equ	0xFE6
  4110                           postdec1	equ	0xFE5
  4111                           fsr1h	equ	0xFE2
  4112                           fsr1l	equ	0xFE1
  4113                           indf2	equ	0xFDF
  4114                           postinc2	equ	0xFDE
  4115                           postdec2	equ	0xFDD
  4116                           plusw2	equ	0xFDB
  4117                           fsr2h	equ	0xFDA
  4118                           fsr2l	equ	0xFD9
  4119                           status	equ	0xFD8
  4120                           
  4121 ;; *************** function _backwards *****************
  4122 ;; Defined at:
  4123 ;;		line 181 in file "motor.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  mL              2   26[COMRAM] PTR struct Motor
  4126 ;;		 -> main@mL(9), 
  4127 ;;  mR              2   28[COMRAM] PTR struct Motor
  4128 ;;		 -> main@mR(9), 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4140 ;;      Params:         4       0       0       0
  4141 ;;      Locals:         0       0       0       0
  4142 ;;      Temps:          1       0       0       0
  4143 ;;      Totals:         5       0       0       0
  4144 ;;Total ram usage:        5 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    3
  4147 ;; This function calls:
  4148 ;;		_setMotorPWM
  4149 ;; This function is called by:
  4150 ;;		_main
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           	psect	text22
  4155  001058                     __ptext22:
  4156                           	opt stack 0
  4157  001058                     _backwards:
  4158                           	opt stack 27
  4159                           
  4160                           ;motor.c: 182: mL->direction = 1;
  4161                           
  4162                           ;incstack = 0
  4163  001058  EE20 F001          	lfsr	2,1
  4164  00105C  501B               	movf	backwards@mL,w,c
  4165  00105E  26D9               	addwf	fsr2l,f,c
  4166  001060  501C               	movf	backwards@mL+1,w,c
  4167  001062  22DA               	addwfc	fsr2h,f,c
  4168  001064  0E01               	movlw	1
  4169  001066  6EDF               	movwf	indf2,c
  4170                           
  4171                           ;motor.c: 183: mR->direction = 1;
  4172  001068  EE20 F001          	lfsr	2,1
  4173  00106C  501D               	movf	backwards@mR,w,c
  4174  00106E  26D9               	addwf	fsr2l,f,c
  4175  001070  501E               	movf	backwards@mR+1,w,c
  4176  001072  22DA               	addwfc	fsr2h,f,c
  4177  001074  0E01               	movlw	1
  4178  001076  6EDF               	movwf	indf2,c
  4179                           
  4180                           ;motor.c: 184: while (mL->power < 70 || mR->power < 70) {
  4181  001078  D02B               	goto	l331
  4182  00107A                     
  4183                           ;motor.c: 185: if (mL->power < 70) {
  4184  00107A  C01B  FFD9         	movff	backwards@mL,fsr2l
  4185  00107E  C01C  FFDA         	movff	backwards@mL+1,fsr2h
  4186  001082  0E46               	movlw	70
  4187  001084  60DF               	cpfslt	indf2,c
  4188  001086  D005               	goto	l333
  4189                           
  4190                           ;motor.c: 186: mL->power++;
  4191  001088  C01B  FFD9         	movff	backwards@mL,fsr2l
  4192  00108C  C01C  FFDA         	movff	backwards@mL+1,fsr2h
  4193  001090  2ADF               	incf	indf2,f,c
  4194  001092                     l333:
  4195                           
  4196                           ;motor.c: 187: };motor.c: 188: if (mR->power < 70) {
  4197  001092  C01D  FFD9         	movff	backwards@mR,fsr2l
  4198  001096  C01E  FFDA         	movff	backwards@mR+1,fsr2h
  4199  00109A  0E46               	movlw	70
  4200  00109C  60DF               	cpfslt	indf2,c
  4201  00109E  D005               	goto	l334
  4202                           
  4203                           ;motor.c: 189: mR->power++;
  4204  0010A0  C01D  FFD9         	movff	backwards@mR,fsr2l
  4205  0010A4  C01E  FFDA         	movff	backwards@mR+1,fsr2h
  4206  0010A8  2ADF               	incf	indf2,f,c
  4207  0010AA                     l334:
  4208                           
  4209                           ;motor.c: 190: };motor.c: 191: setMotorPWM(mL);
  4210  0010AA  C01B  F014         	movff	backwards@mL,setMotorPWM@m
  4211  0010AE  C01C  F015         	movff	backwards@mL+1,setMotorPWM@m+1
  4212  0010B2  ECBE  F005         	call	_setMotorPWM	;wreg free
  4213                           
  4214                           ;motor.c: 192: setMotorPWM(mR);
  4215  0010B6  C01D  F014         	movff	backwards@mR,setMotorPWM@m
  4216  0010BA  C01E  F015         	movff	backwards@mR+1,setMotorPWM@m+1
  4217  0010BE  ECBE  F005         	call	_setMotorPWM	;wreg free
  4218                           
  4219                           ;motor.c: 193: _delay((unsigned long)((5)*(8000000/4000.0)));
  4220  0010C2  0E0D               	movlw	13
  4221  0010C4  6E1F               	movwf	??_backwards& (0+255),c
  4222  0010C6  0EFC               	movlw	252
  4223  0010C8                     u2107:
  4224  0010C8  2EE8               	decfsz	wreg,f,c
  4225  0010CA  D7FE               	bra	u2107
  4226  0010CC  2E1F               	decfsz	??_backwards& (0+255),f,c
  4227  0010CE  D7FC               	bra	u2107
  4228  0010D0                     l331:
  4229  0010D0  C01B  FFD9         	movff	backwards@mL,fsr2l
  4230  0010D4  C01C  FFDA         	movff	backwards@mL+1,fsr2h
  4231  0010D8  0E45               	movlw	69
  4232  0010DA  64DF               	cpfsgt	indf2,c
  4233  0010DC  D7CE               	goto	l332
  4234  0010DE  C01D  FFD9         	movff	backwards@mR,fsr2l
  4235  0010E2  C01E  FFDA         	movff	backwards@mR+1,fsr2h
  4236  0010E6  0E45               	movlw	69
  4237  0010E8  64DF               	cpfsgt	indf2,c
  4238  0010EA  D7C7               	goto	l332
  4239  0010EC  0012               	return	
  4240  0010EE                     __end_of_backwards:
  4241                           	opt stack 0
  4242                           tblptru	equ	0xFF8
  4243                           tblptrh	equ	0xFF7
  4244                           tblptrl	equ	0xFF6
  4245                           tablat	equ	0xFF5
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           intcon	equ	0xFF2
  4249                           intcon3	equ	0xFF0
  4250                           postinc0	equ	0xFEE
  4251                           wreg	equ	0xFE8
  4252                           postinc1	equ	0xFE6
  4253                           postdec1	equ	0xFE5
  4254                           fsr1h	equ	0xFE2
  4255                           fsr1l	equ	0xFE1
  4256                           indf2	equ	0xFDF
  4257                           postinc2	equ	0xFDE
  4258                           postdec2	equ	0xFDD
  4259                           plusw2	equ	0xFDB
  4260                           fsr2h	equ	0xFDA
  4261                           fsr2l	equ	0xFD9
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _setMotorPWM *****************
  4265 ;; Defined at:
  4266 ;;		line 24 in file "motor.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  m               2   19[COMRAM] PTR struct Motor
  4269 ;;		 -> main@mR(9), main@mL(9), 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  PWMduty         2   24[COMRAM] int 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4281 ;;      Params:         2       0       0       0
  4282 ;;      Locals:         2       0       0       0
  4283 ;;      Temps:          3       0       0       0
  4284 ;;      Totals:         7       0       0       0
  4285 ;;Total ram usage:        7 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    2
  4288 ;; This function calls:
  4289 ;;		___awdiv
  4290 ;;		___wmul
  4291 ;; This function is called by:
  4292 ;;		_stop
  4293 ;;		_turnLeft
  4294 ;;		_turnRight
  4295 ;;		_forwards
  4296 ;;		_backwards
  4297 ;;		_accelerate
  4298 ;;		_accelerate2
  4299 ;;		_decelerate
  4300 ;;		_smoothRight
  4301 ;;		_smoothLeft
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text23
  4306  000B7C                     __ptext23:
  4307                           	opt stack 0
  4308  000B7C                     _setMotorPWM:
  4309                           	opt stack 27
  4310                           
  4311                           ;motor.c: 25: int PWMduty;;motor.c: 26: if (m->direction) {
  4312                           
  4313                           ;incstack = 0
  4314  000B7C  EE20 F001          	lfsr	2,1
  4315  000B80  5014               	movf	setMotorPWM@m,w,c
  4316  000B82  26D9               	addwf	fsr2l,f,c
  4317  000B84  5015               	movf	setMotorPWM@m+1,w,c
  4318  000B86  22DA               	addwfc	fsr2h,f,c
  4319  000B88  50DF               	movf	indf2,w,c
  4320  000B8A  B4D8               	btfsc	status,2,c
  4321  000B8C  D034               	goto	l276
  4322                           
  4323                           ;motor.c: 28: PWMduty = m->period - ((int) (m->power)*(m->period)) / 100;
  4324  000B8E  EE20 F007          	lfsr	2,7
  4325  000B92  5014               	movf	setMotorPWM@m,w,c
  4326  000B94  26D9               	addwf	fsr2l,f,c
  4327  000B96  5015               	movf	setMotorPWM@m+1,w,c
  4328  000B98  22DA               	addwfc	fsr2h,f,c
  4329  000B9A  CFDE F016          	movff	postinc2,??_setMotorPWM
  4330  000B9E  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  4331  000BA2  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  4332  000BA6  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4333  000BAA  50DF               	movf	indf2,w,c
  4334  000BAC  6E18               	movwf	(??_setMotorPWM+2)& (0+255),c
  4335  000BAE  5018               	movf	??_setMotorPWM+2,w,c
  4336  000BB0  6E06               	movwf	___wmul@multiplier,c
  4337  000BB2  6A07               	clrf	___wmul@multiplier+1,c
  4338  000BB4  EE20 F007          	lfsr	2,7
  4339  000BB8  5014               	movf	setMotorPWM@m,w,c
  4340  000BBA  26D9               	addwf	fsr2l,f,c
  4341  000BBC  5015               	movf	setMotorPWM@m+1,w,c
  4342  000BBE  22DA               	addwfc	fsr2h,f,c
  4343  000BC0  CFDE F008          	movff	postinc2,___wmul@multiplicand
  4344  000BC4  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  4345  000BC8  EC45  F00A         	call	___wmul	;wreg free
  4346  000BCC  C006  F00C         	movff	?___wmul,___awdiv@dividend
  4347  000BD0  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  4348  000BD4  0E00               	movlw	0
  4349  000BD6  6E0F               	movwf	___awdiv@divisor+1,c
  4350  000BD8  0E64               	movlw	100
  4351  000BDA  6E0E               	movwf	___awdiv@divisor,c
  4352  000BDC  EC77  F008         	call	___awdiv	;wreg free
  4353  000BE0  1E0C               	comf	?___awdiv,f,c
  4354  000BE2  1E0D               	comf	?___awdiv+1,f,c
  4355  000BE4  4A0C               	infsnz	?___awdiv,f,c
  4356  000BE6  2A0D               	incf	?___awdiv+1,f,c
  4357  000BE8  5016               	movf	??_setMotorPWM,w,c
  4358  000BEA  240C               	addwf	?___awdiv,w,c
  4359  000BEC  6E19               	movwf	setMotorPWM@PWMduty,c
  4360  000BEE  5017               	movf	??_setMotorPWM+1,w,c
  4361  000BF0  200D               	addwfc	?___awdiv+1,w,c
  4362  000BF2  6E1A               	movwf	setMotorPWM@PWMduty+1,c
  4363                           
  4364                           ;motor.c: 29: } else {
  4365  000BF4  D023               	goto	l277
  4366  000BF6                     l276:
  4367                           
  4368                           ;motor.c: 31: PWMduty = ((int) (m->power)*(m->period)) / 100;
  4369  000BF6  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  4370  000BFA  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4371  000BFE  50DF               	movf	indf2,w,c
  4372  000C00  6E16               	movwf	??_setMotorPWM& (0+255),c
  4373  000C02  5016               	movf	??_setMotorPWM,w,c
  4374  000C04  6E06               	movwf	___wmul@multiplier,c
  4375  000C06  6A07               	clrf	___wmul@multiplier+1,c
  4376  000C08  EE20 F007          	lfsr	2,7
  4377  000C0C  5014               	movf	setMotorPWM@m,w,c
  4378  000C0E  26D9               	addwf	fsr2l,f,c
  4379  000C10  5015               	movf	setMotorPWM@m+1,w,c
  4380  000C12  22DA               	addwfc	fsr2h,f,c
  4381  000C14  CFDE F008          	movff	postinc2,___wmul@multiplicand
  4382  000C18  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  4383  000C1C  EC45  F00A         	call	___wmul	;wreg free
  4384  000C20  C006  F00C         	movff	?___wmul,___awdiv@dividend
  4385  000C24  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  4386  000C28  0E00               	movlw	0
  4387  000C2A  6E0F               	movwf	___awdiv@divisor+1,c
  4388  000C2C  0E64               	movlw	100
  4389  000C2E  6E0E               	movwf	___awdiv@divisor,c
  4390  000C30  EC77  F008         	call	___awdiv	;wreg free
  4391  000C34  C00C  F019         	movff	?___awdiv,setMotorPWM@PWMduty
  4392  000C38  C00D  F01A         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4393  000C3C                     l277:
  4394                           
  4395                           ;motor.c: 32: };motor.c: 33: PWMduty = (PWMduty << 2);
  4396  000C3C  C019  F016         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  4397  000C40  C01A  F017         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  4398  000C44  90D8               	bcf	status,0,c
  4399  000C46  3616               	rlcf	??_setMotorPWM,f,c
  4400  000C48  3617               	rlcf	??_setMotorPWM+1,f,c
  4401  000C4A  90D8               	bcf	status,0,c
  4402  000C4C  3616               	rlcf	??_setMotorPWM,f,c
  4403  000C4E  3617               	rlcf	??_setMotorPWM+1,f,c
  4404  000C50  C016  F019         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  4405  000C54  C017  F01A         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  4406                           
  4407                           ;motor.c: 34: *(m->duty_low) = PWMduty & 0xFF;
  4408  000C58  EE20 F002          	lfsr	2,2
  4409  000C5C  5014               	movf	setMotorPWM@m,w,c
  4410  000C5E  26D9               	addwf	fsr2l,f,c
  4411  000C60  5015               	movf	setMotorPWM@m+1,w,c
  4412  000C62  22DA               	addwfc	fsr2h,f,c
  4413  000C64  CFDE F016          	movff	postinc2,??_setMotorPWM
  4414  000C68  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  4415  000C6C  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  4416  000C70  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4417  000C74  C019  FFDF         	movff	setMotorPWM@PWMduty,indf2
  4418                           
  4419                           ;motor.c: 35: *(m->duty_high) = (PWMduty >> 8) & 0x3F;
  4420  000C78  EE20 F004          	lfsr	2,4
  4421  000C7C  5014               	movf	setMotorPWM@m,w,c
  4422  000C7E  26D9               	addwf	fsr2l,f,c
  4423  000C80  5015               	movf	setMotorPWM@m+1,w,c
  4424  000C82  22DA               	addwfc	fsr2h,f,c
  4425  000C84  CFDE F016          	movff	postinc2,??_setMotorPWM
  4426  000C88  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  4427  000C8C  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  4428  000C90  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4429  000C94  501A               	movf	setMotorPWM@PWMduty+1,w,c
  4430  000C96  0B3F               	andlw	63
  4431  000C98  6EDF               	movwf	indf2,c
  4432                           
  4433                           ;motor.c: 37: if (m->direction) {
  4434  000C9A  EE20 F001          	lfsr	2,1
  4435  000C9E  5014               	movf	setMotorPWM@m,w,c
  4436  000CA0  26D9               	addwf	fsr2l,f,c
  4437  000CA2  5015               	movf	setMotorPWM@m+1,w,c
  4438  000CA4  22DA               	addwfc	fsr2h,f,c
  4439  000CA6  50DF               	movf	indf2,w,c
  4440  000CA8  B4D8               	btfsc	status,2,c
  4441  000CAA  D014               	goto	l278
  4442                           
  4443                           ;motor.c: 38: LATB = LATB | (1 << (m->dir_pin));
  4444  000CAC  EE20 F006          	lfsr	2,6
  4445  000CB0  5014               	movf	setMotorPWM@m,w,c
  4446  000CB2  26D9               	addwf	fsr2l,f,c
  4447  000CB4  5015               	movf	setMotorPWM@m+1,w,c
  4448  000CB6  22DA               	addwfc	fsr2h,f,c
  4449  000CB8  50DF               	movf	indf2,w,c
  4450  000CBA  6E16               	movwf	??_setMotorPWM& (0+255),c
  4451  000CBC  0E01               	movlw	1
  4452  000CBE  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  4453  000CC0  2A16               	incf	??_setMotorPWM,f,c
  4454  000CC2  D002               	goto	u1264
  4455  000CC4                     u1265:
  4456  000CC4  90D8               	bcf	status,0,c
  4457  000CC6  3617               	rlcf	??_setMotorPWM+1,f,c
  4458  000CC8                     u1264:
  4459  000CC8  2E16               	decfsz	??_setMotorPWM,f,c
  4460  000CCA  D7FC               	goto	u1265
  4461  000CCC  5017               	movf	??_setMotorPWM+1,w,c
  4462  000CCE  108A               	iorwf	3978,w,c	;volatile
  4463  000CD0  6E8A               	movwf	3978,c	;volatile
  4464                           
  4465                           ;motor.c: 39: } else {
  4466  000CD2  0012               	return	
  4467  000CD4                     l278:
  4468                           
  4469                           ;motor.c: 40: LATB = LATB & (~(1 << (m->dir_pin)));
  4470  000CD4  EE20 F006          	lfsr	2,6
  4471  000CD8  5014               	movf	setMotorPWM@m,w,c
  4472  000CDA  26D9               	addwf	fsr2l,f,c
  4473  000CDC  5015               	movf	setMotorPWM@m+1,w,c
  4474  000CDE  22DA               	addwfc	fsr2h,f,c
  4475  000CE0  50DF               	movf	indf2,w,c
  4476  000CE2  6E16               	movwf	??_setMotorPWM& (0+255),c
  4477  000CE4  0E01               	movlw	1
  4478  000CE6  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  4479  000CE8  2A16               	incf	??_setMotorPWM,f,c
  4480  000CEA  D002               	goto	u1274
  4481  000CEC                     u1275:
  4482  000CEC  90D8               	bcf	status,0,c
  4483  000CEE  3617               	rlcf	??_setMotorPWM+1,f,c
  4484  000CF0                     u1274:
  4485  000CF0  2E16               	decfsz	??_setMotorPWM,f,c
  4486  000CF2  D7FC               	goto	u1275
  4487  000CF4  5017               	movf	??_setMotorPWM+1,w,c
  4488  000CF6  0AFF               	xorlw	255
  4489  000CF8  148A               	andwf	3978,w,c	;volatile
  4490  000CFA  6E8A               	movwf	3978,c	;volatile
  4491  000CFC  0012               	return	
  4492  000CFE                     __end_of_setMotorPWM:
  4493                           	opt stack 0
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           prodh	equ	0xFF4
  4499                           prodl	equ	0xFF3
  4500                           intcon	equ	0xFF2
  4501                           intcon3	equ	0xFF0
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           postinc1	equ	0xFE6
  4505                           postdec1	equ	0xFE5
  4506                           fsr1h	equ	0xFE2
  4507                           fsr1l	equ	0xFE1
  4508                           indf2	equ	0xFDF
  4509                           postinc2	equ	0xFDE
  4510                           postdec2	equ	0xFDD
  4511                           plusw2	equ	0xFDB
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function ___wmul *****************
  4517 ;; Defined at:
  4518 ;;		line 15 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/Umul16.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  multiplier      2    5[COMRAM] unsigned int 
  4521 ;;  multiplicand    2    7[COMRAM] unsigned int 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  product         2    9[COMRAM] unsigned int 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  2    5[COMRAM] unsigned int 
  4526 ;; Registers used:
  4527 ;;		wreg, status,2, status,0, prodl, prodh
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4533 ;;      Params:         4       0       0       0
  4534 ;;      Locals:         2       0       0       0
  4535 ;;      Temps:          0       0       0       0
  4536 ;;      Totals:         6       0       0       0
  4537 ;;Total ram usage:        6 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    1
  4540 ;; This function calls:
  4541 ;;		Nothing
  4542 ;; This function is called by:
  4543 ;;		_setMotorPWM
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text24
  4548  00148A                     __ptext24:
  4549                           	opt stack 0
  4550  00148A                     ___wmul:
  4551                           	opt stack 27
  4552                           
  4553                           ;incstack = 0
  4554  00148A  5006               	movf	___wmul@multiplier,w,c
  4555  00148C  0208               	mulwf	___wmul@multiplicand,c
  4556  00148E  CFF3 F00A          	movff	prodl,___wmul@product
  4557  001492  CFF4 F00B          	movff	prodh,___wmul@product+1
  4558  001496  5006               	movf	___wmul@multiplier,w,c
  4559  001498  0209               	mulwf	___wmul@multiplicand+1,c
  4560  00149A  50F3               	movf	prodl,w,c
  4561  00149C  260B               	addwf	___wmul@product+1,f,c
  4562  00149E  5007               	movf	___wmul@multiplier+1,w,c
  4563  0014A0  0208               	mulwf	___wmul@multiplicand,c
  4564  0014A2  50F3               	movf	prodl,w,c
  4565  0014A4  260B               	addwf	___wmul@product+1,f,c
  4566  0014A6  C00A  F006         	movff	___wmul@product,?___wmul
  4567  0014AA  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  4568  0014AE  0012               	return	
  4569  0014B0                     __end_of___wmul:
  4570                           	opt stack 0
  4571                           tblptru	equ	0xFF8
  4572                           tblptrh	equ	0xFF7
  4573                           tblptrl	equ	0xFF6
  4574                           tablat	equ	0xFF5
  4575                           prodh	equ	0xFF4
  4576                           prodl	equ	0xFF3
  4577                           intcon	equ	0xFF2
  4578                           intcon3	equ	0xFF0
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           postinc1	equ	0xFE6
  4582                           postdec1	equ	0xFE5
  4583                           fsr1h	equ	0xFE2
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           plusw2	equ	0xFDB
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function ___awdiv *****************
  4594 ;; Defined at:
  4595 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c90/common/awdiv.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  dividend        2   11[COMRAM] int 
  4598 ;;  divisor         2   13[COMRAM] int 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  quotient        2   17[COMRAM] int 
  4601 ;;  sign            1   16[COMRAM] unsigned char 
  4602 ;;  counter         1   15[COMRAM] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  2   11[COMRAM] int 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4612 ;;      Params:         4       0       0       0
  4613 ;;      Locals:         4       0       0       0
  4614 ;;      Temps:          0       0       0       0
  4615 ;;      Totals:         8       0       0       0
  4616 ;;Total ram usage:        8 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    1
  4619 ;; This function calls:
  4620 ;;		Nothing
  4621 ;; This function is called by:
  4622 ;;		_setMotorPWM
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text25
  4627  0010EE                     __ptext25:
  4628                           	opt stack 0
  4629  0010EE                     ___awdiv:
  4630                           	opt stack 27
  4631                           
  4632                           ;incstack = 0
  4633  0010EE  0E00               	movlw	0
  4634  0010F0  6E11               	movwf	___awdiv@sign,c
  4635  0010F2  AE0F               	btfss	___awdiv@divisor+1,7,c
  4636  0010F4  D006               	goto	l692
  4637  0010F6  6C0E               	negf	___awdiv@divisor,c
  4638  0010F8  1E0F               	comf	___awdiv@divisor+1,f,c
  4639  0010FA  B0D8               	btfsc	status,0,c
  4640  0010FC  2A0F               	incf	___awdiv@divisor+1,f,c
  4641  0010FE  0E01               	movlw	1
  4642  001100  6E11               	movwf	___awdiv@sign,c
  4643  001102                     l692:
  4644  001102  AE0D               	btfss	___awdiv@dividend+1,7,c
  4645  001104  D006               	goto	l693
  4646  001106  6C0C               	negf	___awdiv@dividend,c
  4647  001108  1E0D               	comf	___awdiv@dividend+1,f,c
  4648  00110A  B0D8               	btfsc	status,0,c
  4649  00110C  2A0D               	incf	___awdiv@dividend+1,f,c
  4650  00110E  0E01               	movlw	1
  4651  001110  1A11               	xorwf	___awdiv@sign,f,c
  4652  001112                     l693:
  4653  001112  0E00               	movlw	0
  4654  001114  6E13               	movwf	___awdiv@quotient+1,c
  4655  001116  0E00               	movlw	0
  4656  001118  6E12               	movwf	___awdiv@quotient,c
  4657  00111A  500E               	movf	___awdiv@divisor,w,c
  4658  00111C  100F               	iorwf	___awdiv@divisor+1,w,c
  4659  00111E  B4D8               	btfsc	status,2,c
  4660  001120  D01C               	goto	l700
  4661  001122  0E01               	movlw	1
  4662  001124  6E10               	movwf	___awdiv@counter,c
  4663  001126  D004               	goto	l695
  4664  001128  90D8               	bcf	status,0,c
  4665  00112A  360E               	rlcf	___awdiv@divisor,f,c
  4666  00112C  360F               	rlcf	___awdiv@divisor+1,f,c
  4667  00112E  2A10               	incf	___awdiv@counter,f,c
  4668  001130                     l695:
  4669  001130  AE0F               	btfss	___awdiv@divisor+1,7,c
  4670  001132  D7FA               	goto	l696
  4671  001134                     u1030:
  4672  001134  90D8               	bcf	status,0,c
  4673  001136  3612               	rlcf	___awdiv@quotient,f,c
  4674  001138  3613               	rlcf	___awdiv@quotient+1,f,c
  4675  00113A  500E               	movf	___awdiv@divisor,w,c
  4676  00113C  5C0C               	subwf	___awdiv@dividend,w,c
  4677  00113E  500F               	movf	___awdiv@divisor+1,w,c
  4678  001140  580D               	subwfb	___awdiv@dividend+1,w,c
  4679  001142  A0D8               	btfss	status,0,c
  4680  001144  D005               	goto	l699
  4681  001146  500E               	movf	___awdiv@divisor,w,c
  4682  001148  5E0C               	subwf	___awdiv@dividend,f,c
  4683  00114A  500F               	movf	___awdiv@divisor+1,w,c
  4684  00114C  5A0D               	subwfb	___awdiv@dividend+1,f,c
  4685  00114E  8012               	bsf	___awdiv@quotient,0,c
  4686  001150                     l699:
  4687  001150  90D8               	bcf	status,0,c
  4688  001152  320F               	rrcf	___awdiv@divisor+1,f,c
  4689  001154  320E               	rrcf	___awdiv@divisor,f,c
  4690  001156  2E10               	decfsz	___awdiv@counter,f,c
  4691  001158  D7ED               	goto	u1030
  4692  00115A                     l700:
  4693  00115A  5011               	movf	___awdiv@sign,w,c
  4694  00115C  B4D8               	btfsc	status,2,c
  4695  00115E  D004               	goto	l701
  4696  001160  6C12               	negf	___awdiv@quotient,c
  4697  001162  1E13               	comf	___awdiv@quotient+1,f,c
  4698  001164  B0D8               	btfsc	status,0,c
  4699  001166  2A13               	incf	___awdiv@quotient+1,f,c
  4700  001168                     l701:
  4701  001168  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  4702  00116C  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  4703  001170  0012               	return	
  4704  001172                     __end_of___awdiv:
  4705                           	opt stack 0
  4706                           tblptru	equ	0xFF8
  4707                           tblptrh	equ	0xFF7
  4708                           tblptrl	equ	0xFF6
  4709                           tablat	equ	0xFF5
  4710                           prodh	equ	0xFF4
  4711                           prodl	equ	0xFF3
  4712                           intcon	equ	0xFF2
  4713                           intcon3	equ	0xFF0
  4714                           postinc0	equ	0xFEE
  4715                           wreg	equ	0xFE8
  4716                           postinc1	equ	0xFE6
  4717                           postdec1	equ	0xFE5
  4718                           fsr1h	equ	0xFE2
  4719                           fsr1l	equ	0xFE1
  4720                           indf2	equ	0xFDF
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           plusw2	equ	0xFDB
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _LCD_init *****************
  4729 ;; Defined at:
  4730 ;;		line 49 in file "lcd.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4744 ;;      Params:         0       0       0       0
  4745 ;;      Locals:         0       0       0       0
  4746 ;;      Temps:          1       0       0       0
  4747 ;;      Totals:         1       0       0       0
  4748 ;;Total ram usage:        1 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    4
  4751 ;; This function calls:
  4752 ;;		_LCD_out
  4753 ;;		_LCD_send
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text26
  4760  000CFE                     __ptext26:
  4761                           	opt stack 0
  4762  000CFE                     _LCD_init:
  4763                           	opt stack 26
  4764                           
  4765                           ;lcd.c: 52: LATA = 0;
  4766                           
  4767                           ;incstack = 0
  4768  000CFE  0E00               	movlw	0
  4769  000D00  6E89               	movwf	3977,c	;volatile
  4770                           
  4771                           ;lcd.c: 53: LATC = 0;
  4772  000D02  0E00               	movlw	0
  4773  000D04  6E8B               	movwf	3979,c	;volatile
  4774                           
  4775                           ;lcd.c: 54: LATD = 0;
  4776  000D06  0E00               	movlw	0
  4777  000D08  6E8C               	movwf	3980,c	;volatile
  4778                           
  4779                           ;lcd.c: 57: TRISA = 0;
  4780  000D0A  0E00               	movlw	0
  4781  000D0C  6E92               	movwf	3986,c	;volatile
  4782                           
  4783                           ;lcd.c: 58: TRISC = 0;
  4784  000D0E  0E00               	movlw	0
  4785  000D10  6E94               	movwf	3988,c	;volatile
  4786                           
  4787                           ;lcd.c: 59: TRISD = 0;
  4788  000D12  0E00               	movlw	0
  4789  000D14  6E95               	movwf	3989,c	;volatile
  4790                           
  4791                           ;lcd.c: 63: _delay((unsigned long)((15)*(8000000/4000.0)));
  4792  000D16  0E27               	movlw	39
  4793  000D18  6E0A               	movwf	??_LCD_init& (0+255),c
  4794  000D1A  0EF5               	movlw	245
  4795  000D1C                     u2117:
  4796  000D1C  2EE8               	decfsz	wreg,f,c
  4797  000D1E  D7FE               	bra	u2117
  4798  000D20  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4799  000D22  D7FC               	bra	u2117
  4800  000D24  F000               	nop	
  4801                           
  4802                           ;lcd.c: 64: LCD_out(0b0011);
  4803  000D26  0E03               	movlw	3
  4804  000D28  ECF7  F008         	call	_LCD_out
  4805                           
  4806                           ;lcd.c: 65: _delay((unsigned long)((5)*(8000000/4000.0)));
  4807  000D2C  0E0D               	movlw	13
  4808  000D2E  6E0A               	movwf	??_LCD_init& (0+255),c
  4809  000D30  0EFC               	movlw	252
  4810  000D32                     u2127:
  4811  000D32  2EE8               	decfsz	wreg,f,c
  4812  000D34  D7FE               	bra	u2127
  4813  000D36  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4814  000D38  D7FC               	bra	u2127
  4815                           
  4816                           ;lcd.c: 66: LCD_out(0b0011);
  4817  000D3A  0E03               	movlw	3
  4818  000D3C  ECF7  F008         	call	_LCD_out
  4819                           
  4820                           ;lcd.c: 67: _delay((unsigned long)((200)*(8000000/4000000.0)));
  4821  000D40  0E85               	movlw	133
  4822  000D42                     u2137:
  4823  000D42  2EE8               	decfsz	wreg,f,c
  4824  000D44  D7FE               	bra	u2137
  4825  000D46  F000               	nop	
  4826                           
  4827                           ;lcd.c: 68: LCD_out(0b0011);
  4828  000D48  0E03               	movlw	3
  4829  000D4A  ECF7  F008         	call	_LCD_out
  4830                           
  4831                           ;lcd.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4832  000D4E  0E21               	movlw	33
  4833  000D50                     u2147:
  4834  000D50  2EE8               	decfsz	wreg,f,c
  4835  000D52  D7FE               	bra	u2147
  4836  000D54  F000               	nop	
  4837                           
  4838                           ;lcd.c: 70: LCD_out(0b0010);
  4839  000D56  0E02               	movlw	2
  4840  000D58  ECF7  F008         	call	_LCD_out
  4841                           
  4842                           ;lcd.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4843  000D5C  0E21               	movlw	33
  4844  000D5E                     u2157:
  4845  000D5E  2EE8               	decfsz	wreg,f,c
  4846  000D60  D7FE               	bra	u2157
  4847  000D62  F000               	nop	
  4848                           
  4849                           ;lcd.c: 73: LCD_send(0b00101000, 0);
  4850  000D64  0E00               	movlw	0
  4851  000D66  6E08               	movwf	LCD_send@type,c
  4852  000D68  0E28               	movlw	40
  4853  000D6A  EC2F  F00A         	call	_LCD_send
  4854                           
  4855                           ;lcd.c: 74: _delay((unsigned long)((2)*(8000000/4000.0)));
  4856  000D6E  0E06               	movlw	6
  4857  000D70  6E0A               	movwf	??_LCD_init& (0+255),c
  4858  000D72  0E30               	movlw	48
  4859  000D74                     u2167:
  4860  000D74  2EE8               	decfsz	wreg,f,c
  4861  000D76  D7FE               	bra	u2167
  4862  000D78  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4863  000D7A  D7FC               	bra	u2167
  4864  000D7C  D000               	nop2	
  4865                           
  4866                           ;lcd.c: 75: LCD_send(0b00001000, 0);
  4867  000D7E  0E00               	movlw	0
  4868  000D80  6E08               	movwf	LCD_send@type,c
  4869  000D82  0E08               	movlw	8
  4870  000D84  EC2F  F00A         	call	_LCD_send
  4871                           
  4872                           ;lcd.c: 76: _delay((unsigned long)((2)*(8000000/4000.0)));
  4873  000D88  0E06               	movlw	6
  4874  000D8A  6E0A               	movwf	??_LCD_init& (0+255),c
  4875  000D8C  0E30               	movlw	48
  4876  000D8E                     u2177:
  4877  000D8E  2EE8               	decfsz	wreg,f,c
  4878  000D90  D7FE               	bra	u2177
  4879  000D92  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4880  000D94  D7FC               	bra	u2177
  4881  000D96  D000               	nop2	
  4882                           
  4883                           ;lcd.c: 77: LCD_send(0b00000001, 0);
  4884  000D98  0E00               	movlw	0
  4885  000D9A  6E08               	movwf	LCD_send@type,c
  4886  000D9C  0E01               	movlw	1
  4887  000D9E  EC2F  F00A         	call	_LCD_send
  4888                           
  4889                           ;lcd.c: 78: _delay((unsigned long)((2)*(8000000/4000.0)));
  4890  000DA2  0E06               	movlw	6
  4891  000DA4  6E0A               	movwf	??_LCD_init& (0+255),c
  4892  000DA6  0E30               	movlw	48
  4893  000DA8                     u2187:
  4894  000DA8  2EE8               	decfsz	wreg,f,c
  4895  000DAA  D7FE               	bra	u2187
  4896  000DAC  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4897  000DAE  D7FC               	bra	u2187
  4898  000DB0  D000               	nop2	
  4899                           
  4900                           ;lcd.c: 79: LCD_send(0b00000110, 0);
  4901  000DB2  0E00               	movlw	0
  4902  000DB4  6E08               	movwf	LCD_send@type,c
  4903  000DB6  0E06               	movlw	6
  4904  000DB8  EC2F  F00A         	call	_LCD_send
  4905                           
  4906                           ;lcd.c: 80: _delay((unsigned long)((2)*(8000000/4000.0)));
  4907  000DBC  0E06               	movlw	6
  4908  000DBE  6E0A               	movwf	??_LCD_init& (0+255),c
  4909  000DC0  0E30               	movlw	48
  4910  000DC2                     u2197:
  4911  000DC2  2EE8               	decfsz	wreg,f,c
  4912  000DC4  D7FE               	bra	u2197
  4913  000DC6  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4914  000DC8  D7FC               	bra	u2197
  4915  000DCA  D000               	nop2	
  4916                           
  4917                           ;lcd.c: 81: LCD_send(0b00001100, 0);
  4918  000DCC  0E00               	movlw	0
  4919  000DCE  6E08               	movwf	LCD_send@type,c
  4920  000DD0  0E0C               	movlw	12
  4921  000DD2  EC2F  F00A         	call	_LCD_send
  4922                           
  4923                           ;lcd.c: 82: _delay((unsigned long)((2)*(8000000/4000.0)));
  4924  000DD6  0E06               	movlw	6
  4925  000DD8  6E0A               	movwf	??_LCD_init& (0+255),c
  4926  000DDA  0E30               	movlw	48
  4927  000DDC                     u2207:
  4928  000DDC  2EE8               	decfsz	wreg,f,c
  4929  000DDE  D7FE               	bra	u2207
  4930  000DE0  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  4931  000DE2  D7FC               	bra	u2207
  4932  000DE4  D000               	nop2	
  4933  000DE6  0012               	return		;funcret
  4934  000DE8                     __end_of_LCD_init:
  4935                           	opt stack 0
  4936                           tblptru	equ	0xFF8
  4937                           tblptrh	equ	0xFF7
  4938                           tblptrl	equ	0xFF6
  4939                           tablat	equ	0xFF5
  4940                           prodh	equ	0xFF4
  4941                           prodl	equ	0xFF3
  4942                           intcon	equ	0xFF2
  4943                           intcon3	equ	0xFF0
  4944                           postinc0	equ	0xFEE
  4945                           wreg	equ	0xFE8
  4946                           postinc1	equ	0xFE6
  4947                           postdec1	equ	0xFE5
  4948                           fsr1h	equ	0xFE2
  4949                           fsr1l	equ	0xFE1
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           plusw2	equ	0xFDB
  4954                           fsr2h	equ	0xFDA
  4955                           fsr2l	equ	0xFD9
  4956                           status	equ	0xFD8
  4957                           
  4958 ;; *************** function _LCD_send *****************
  4959 ;; Defined at:
  4960 ;;		line 34 in file "lcd.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  Byte            1    wreg     unsigned char 
  4963 ;;  type            1    7[COMRAM] unsigned char 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  Byte            1    8[COMRAM] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  1    wreg      void 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2, status,0, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4975 ;;      Params:         1       0       0       0
  4976 ;;      Locals:         1       0       0       0
  4977 ;;      Temps:          0       0       0       0
  4978 ;;      Totals:         2       0       0       0
  4979 ;;Total ram usage:        2 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    3
  4982 ;; This function calls:
  4983 ;;		_LCD_out
  4984 ;; This function is called by:
  4985 ;;		_LCD_init
  4986 ;;		_LCD_line
  4987 ;;		_LCD_string
  4988 ;;		_LCD_clear
  4989 ;;		_print_RFID
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text27
  4994  00145E                     __ptext27:
  4995                           	opt stack 0
  4996  00145E                     _LCD_send:
  4997                           	opt stack 26
  4998                           
  4999                           ;incstack = 0
  5000                           ;LCD_send@Byte stored from wreg
  5001  00145E  6E09               	movwf	LCD_send@Byte,c
  5002                           
  5003                           ;lcd.c: 38: PORTAbits.RA6 = type;
  5004  001460  B008               	btfsc	LCD_send@type,0,c
  5005  001462  D002               	bra	u995
  5006  001464  9C80               	bcf	3968,6,c	;volatile
  5007  001466  D001               	bra	u996
  5008  001468                     u995:
  5009  001468  8C80               	bsf	3968,6,c	;volatile
  5010  00146A                     u996:
  5011                           
  5012                           ;lcd.c: 41: LCD_out(Byte >> 4);
  5013  00146A  3809               	swapf	LCD_send@Byte,w,c
  5014  00146C  0B0F               	andlw	15
  5015  00146E  ECF7  F008         	call	_LCD_out
  5016                           
  5017                           ;lcd.c: 42: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5018  001472  0E06               	movlw	6
  5019  001474                     u2217:
  5020  001474  2EE8               	decfsz	wreg,f,c
  5021  001476  D7FE               	bra	u2217
  5022  001478  D000               	nop2	
  5023                           
  5024                           ;lcd.c: 44: LCD_out(Byte);
  5025  00147A  5009               	movf	LCD_send@Byte,w,c
  5026  00147C  ECF7  F008         	call	_LCD_out
  5027                           
  5028                           ;lcd.c: 45: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5029  001480  0E21               	movlw	33
  5030  001482                     u2227:
  5031  001482  2EE8               	decfsz	wreg,f,c
  5032  001484  D7FE               	bra	u2227
  5033  001486  F000               	nop	
  5034  001488  0012               	return		;funcret
  5035  00148A                     __end_of_LCD_send:
  5036                           	opt stack 0
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           intcon	equ	0xFF2
  5044                           intcon3	equ	0xFF0
  5045                           postinc0	equ	0xFEE
  5046                           wreg	equ	0xFE8
  5047                           postinc1	equ	0xFE6
  5048                           postdec1	equ	0xFE5
  5049                           fsr1h	equ	0xFE2
  5050                           fsr1l	equ	0xFE1
  5051                           indf2	equ	0xFDF
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           plusw2	equ	0xFDB
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _LCD_out *****************
  5060 ;; Defined at:
  5061 ;;		line 19 in file "lcd.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  number          1    wreg     unsigned char 
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;  number          1    6[COMRAM] unsigned char 
  5066 ;; Return value:  Size  Location     Type
  5067 ;;                  1    wreg      void 
  5068 ;; Registers used:
  5069 ;;		wreg, status,2, status,0, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5075 ;;      Params:         0       0       0       0
  5076 ;;      Locals:         1       0       0       0
  5077 ;;      Temps:          1       0       0       0
  5078 ;;      Totals:         2       0       0       0
  5079 ;;Total ram usage:        2 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    2
  5082 ;; This function calls:
  5083 ;;		_E_TOG
  5084 ;; This function is called by:
  5085 ;;		_LCD_send
  5086 ;;		_LCD_init
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text28
  5091  0011EE                     __ptext28:
  5092                           	opt stack 0
  5093  0011EE                     _LCD_out:
  5094                           	opt stack 26
  5095                           
  5096                           ;incstack = 0
  5097                           ;LCD_out@number stored from wreg
  5098  0011EE  6E07               	movwf	LCD_out@number,c
  5099                           
  5100                           ;lcd.c: 22: PORTCbits.RC1 = (number & 0b0001);
  5101  0011F0  C007  F006         	movff	LCD_out@number,??_LCD_out
  5102  0011F4  0E01               	movlw	1
  5103  0011F6  1606               	andwf	??_LCD_out,f,c
  5104  0011F8  4606               	rlncf	??_LCD_out,f,c
  5105  0011FA  5082               	movf	3970,w,c	;volatile
  5106  0011FC  1806               	xorwf	??_LCD_out,w,c
  5107  0011FE  0BFD               	andlw	-3
  5108  001200  1806               	xorwf	??_LCD_out,w,c
  5109  001202  6E82               	movwf	3970,c	;volatile
  5110                           
  5111                           ;lcd.c: 23: PORTCbits.RC2 = (number & 0b0010) >> 1;
  5112  001204  C007  F006         	movff	LCD_out@number,??_LCD_out
  5113  001208  90D8               	bcf	status,0,c
  5114  00120A  3206               	rrcf	??_LCD_out,f,c
  5115  00120C  0E01               	movlw	1
  5116  00120E  1606               	andwf	??_LCD_out,f,c
  5117  001210  4606               	rlncf	??_LCD_out,f,c
  5118  001212  4606               	rlncf	??_LCD_out,f,c
  5119  001214  5082               	movf	3970,w,c	;volatile
  5120  001216  1806               	xorwf	??_LCD_out,w,c
  5121  001218  0BFB               	andlw	-5
  5122  00121A  1806               	xorwf	??_LCD_out,w,c
  5123  00121C  6E82               	movwf	3970,c	;volatile
  5124                           
  5125                           ;lcd.c: 24: PORTDbits.RD0 = (number & 0b0100) >> 2;
  5126  00121E  C007  F006         	movff	LCD_out@number,??_LCD_out
  5127  001222  90D8               	bcf	status,0,c
  5128  001224  3206               	rrcf	??_LCD_out,f,c
  5129  001226  90D8               	bcf	status,0,c
  5130  001228  3206               	rrcf	??_LCD_out,f,c
  5131  00122A  0E01               	movlw	1
  5132  00122C  1606               	andwf	??_LCD_out,f,c
  5133  00122E  5083               	movf	3971,w,c	;volatile
  5134  001230  1806               	xorwf	??_LCD_out,w,c
  5135  001232  0BFE               	andlw	-2
  5136  001234  1806               	xorwf	??_LCD_out,w,c
  5137  001236  6E83               	movwf	3971,c	;volatile
  5138                           
  5139                           ;lcd.c: 25: PORTDbits.RD1 = (number & 0b1000) >> 3;
  5140  001238  C007  F006         	movff	LCD_out@number,??_LCD_out
  5141  00123C  90D8               	bcf	status,0,c
  5142  00123E  3206               	rrcf	??_LCD_out,f,c
  5143  001240  90D8               	bcf	status,0,c
  5144  001242  3206               	rrcf	??_LCD_out,f,c
  5145  001244  90D8               	bcf	status,0,c
  5146  001246  3206               	rrcf	??_LCD_out,f,c
  5147  001248  0E01               	movlw	1
  5148  00124A  1606               	andwf	??_LCD_out,f,c
  5149  00124C  4606               	rlncf	??_LCD_out,f,c
  5150  00124E  5083               	movf	3971,w,c	;volatile
  5151  001250  1806               	xorwf	??_LCD_out,w,c
  5152  001252  0BFD               	andlw	-3
  5153  001254  1806               	xorwf	??_LCD_out,w,c
  5154  001256  6E83               	movwf	3971,c	;volatile
  5155                           
  5156                           ;lcd.c: 27: E_TOG();
  5157  001258  EC9C  F00A         	call	_E_TOG	;wreg free
  5158                           
  5159                           ;lcd.c: 28: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5160  00125C  0E03               	movlw	3
  5161  00125E                     u2237:
  5162  00125E  2EE8               	decfsz	wreg,f,c
  5163  001260  D7FE               	bra	u2237
  5164  001262  F000               	nop	
  5165  001264  0012               	return		;funcret
  5166  001266                     __end_of_LCD_out:
  5167                           	opt stack 0
  5168                           tblptru	equ	0xFF8
  5169                           tblptrh	equ	0xFF7
  5170                           tblptrl	equ	0xFF6
  5171                           tablat	equ	0xFF5
  5172                           prodh	equ	0xFF4
  5173                           prodl	equ	0xFF3
  5174                           intcon	equ	0xFF2
  5175                           intcon3	equ	0xFF0
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           postinc1	equ	0xFE6
  5179                           postdec1	equ	0xFE5
  5180                           fsr1h	equ	0xFE2
  5181                           fsr1l	equ	0xFE1
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           plusw2	equ	0xFDB
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function _E_TOG *****************
  5191 ;; Defined at:
  5192 ;;		line 4 in file "lcd.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;		None
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;		None
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		wreg
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5206 ;;      Params:         0       0       0       0
  5207 ;;      Locals:         0       0       0       0
  5208 ;;      Temps:          0       0       0       0
  5209 ;;      Totals:         0       0       0       0
  5210 ;;Total ram usage:        0 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    1
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_LCD_out
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text29
  5221  001538                     __ptext29:
  5222                           	opt stack 0
  5223  001538                     _E_TOG:
  5224                           	opt stack 26
  5225                           
  5226                           ;lcd.c: 5: PORTCbits.RC0 = 1;
  5227                           
  5228                           ;incstack = 0
  5229  001538  8082               	bsf	3970,0,c	;volatile
  5230                           
  5231                           ;lcd.c: 6: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5232  00153A  0E03               	movlw	3
  5233  00153C                     u2247:
  5234  00153C  2EE8               	decfsz	wreg,f,c
  5235  00153E  D7FE               	bra	u2247
  5236  001540  F000               	nop	
  5237                           
  5238                           ;lcd.c: 7: PORTCbits.RC0 = 0;
  5239  001542  9082               	bcf	3970,0,c	;volatile
  5240                           
  5241                           ;lcd.c: 8: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5242  001544  0E03               	movlw	3
  5243  001546                     u2257:
  5244  001546  2EE8               	decfsz	wreg,f,c
  5245  001548  D7FE               	bra	u2257
  5246  00154A  F000               	nop	
  5247  00154C  0012               	return		;funcret
  5248  00154E                     __end_of_E_TOG:
  5249                           	opt stack 0
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           intcon	equ	0xFF2
  5257                           intcon3	equ	0xFF0
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postinc1	equ	0xFE6
  5261                           postdec1	equ	0xFE5
  5262                           fsr1h	equ	0xFE2
  5263                           fsr1l	equ	0xFE1
  5264                           indf2	equ	0xFDF
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           plusw2	equ	0xFDB
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _InterruptHandlerHigh *****************
  5273 ;; Defined at:
  5274 ;;		line 24 in file "main.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  rx_char         1    4[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5288 ;;      Params:         0       0       0       0
  5289 ;;      Locals:         1       0       0       0
  5290 ;;      Temps:          4       0       0       0
  5291 ;;      Totals:         5       0       0       0
  5292 ;;Total ram usage:        5 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		Interrupt level 2
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           	psect	intcode
  5302  000008                     __pintcode:
  5303                           	opt stack 0
  5304  000008                     _InterruptHandlerHigh:
  5305                           	opt stack 25
  5306                           
  5307                           ;incstack = 0
  5308  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5309  00000A  CFD9 F001          	movff	fsr2l,??_InterruptHandlerHigh
  5310  00000E  CFDA F002          	movff	fsr2h,??_InterruptHandlerHigh+1
  5311  000012  CFF3 F003          	movff	prodl,??_InterruptHandlerHigh+2
  5312  000016  CFF4 F004          	movff	prodh,??_InterruptHandlerHigh+3
  5313                           
  5314                           ;main.c: 27: static char count = 0;;main.c: 28: char rx_char;;main.c: 30: if (PIR1bits.R
      +                          CIF) {
  5315  00001A  AA9E               	btfss	3998,5,c	;volatile
  5316  00001C  D01A               	goto	i2l149
  5317                           
  5318                           ;main.c: 31: rx_char = RCREG;
  5319  00001E  CFAE F005          	movff	4014,InterruptHandlerHigh@rx_char	;volatile
  5320                           
  5321                           ;main.c: 32: if (rx_char == 0x02) {
  5322  000022  0E02               	movlw	2
  5323  000024  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  5324  000026  A4D8               	btfss	status,2,c
  5325  000028  D002               	goto	i2l150
  5326                           
  5327                           ;main.c: 33: count = 0;
  5328  00002A  0E00               	movlw	0
  5329  00002C  6E36               	movwf	InterruptHandlerHigh@count,c
  5330  00002E                     i2l150:
  5331                           
  5332                           ;main.c: 34: };main.c: 35: if (rx_char == 0x03) {
  5333  00002E  0E03               	movlw	3
  5334  000030  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  5335  000032  A4D8               	btfss	status,2,c
  5336  000034  D003               	goto	i2l151
  5337                           
  5338                           ;main.c: 36: card_read = 1;
  5339  000036  0E01               	movlw	1
  5340  000038  0100               	movlb	0	; () banked
  5341  00003A  6FA6               	movwf	_card_read& (0+255),b	;volatile
  5342  00003C                     i2l151:
  5343                           
  5344                           ;main.c: 37: };main.c: 38: string_rfid[count] = rx_char;
  5345                           
  5346                           ; BSR set to: 0
  5347  00003C  5036               	movf	InterruptHandlerHigh@count,w,c
  5348  00003E  0D01               	mullw	1
  5349  000040  0E39               	movlw	low _string_rfid
  5350  000042  24F3               	addwf	prodl,w,c
  5351  000044  6ED9               	movwf	fsr2l,c
  5352  000046  0E00               	movlw	high _string_rfid
  5353  000048  20F4               	addwfc	prodh,w,c
  5354  00004A  6EDA               	movwf	fsr2h,c
  5355  00004C  C005  FFDF         	movff	InterruptHandlerHigh@rx_char,indf2
  5356                           
  5357                           ;main.c: 39: count++;
  5358  000050  2A36               	incf	InterruptHandlerHigh@count,f,c
  5359  000052                     i2l149:
  5360                           
  5361                           ;main.c: 40: };main.c: 48: if (INTCONbits.INT0IF) {
  5362  000052  A2F2               	btfss	intcon,1,c	;volatile
  5363  000054  D007               	goto	i2l152
  5364                           
  5365                           ;main.c: 50: if (PORTCbits.RC3 == 1) {
  5366  000056  B682               	btfsc	3970,3,c	;volatile
  5367                           
  5368                           ;main.c: 51: if (PORTCbits.RC3 == 1) {
  5369  000058  A682               	btfss	3970,3,c	;volatile
  5370  00005A  D003               	goto	i2l154
  5371                           
  5372                           ;main.c: 54: card_read = 0;
  5373  00005C  0E00               	movlw	0
  5374  00005E  0100               	movlb	0	; () banked
  5375  000060  6FA6               	movwf	_card_read& (0+255),b	;volatile
  5376  000062                     i2l154:
  5377                           
  5378                           ;main.c: 56: };main.c: 57: };main.c: 59: INTCONbits.INT0IF = 0;
  5379                           
  5380                           ; BSR set to: 0
  5381                           
  5382                           ; BSR set to: 0
  5383  000062  92F2               	bcf	intcon,1,c	;volatile
  5384  000064                     i2l152:
  5385                           
  5386                           ;main.c: 60: };main.c: 62: if (INTCONbits.TMR0IF) {
  5387  000064  A4F2               	btfss	intcon,2,c	;volatile
  5388  000066  D004               	goto	i2l155
  5389                           
  5390                           ;main.c: 63: millis++;
  5391  000068  0100               	movlb	0	; () banked
  5392  00006A  4BA4               	infsnz	_millis& (0+255),f,b	;volatile
  5393  00006C  2BA5               	incf	(_millis+1)& (0+255),f,b	;volatile
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;main.c: 64: INTCONbits.TMR0IF = 0;
  5397  00006E  94F2               	bcf	intcon,2,c	;volatile
  5398  000070                     i2l155:
  5399                           
  5400                           ; BSR set to: 0
  5401  000070  C004  FFF4         	movff	??_InterruptHandlerHigh+3,prodh
  5402  000074  C003  FFF3         	movff	??_InterruptHandlerHigh+2,prodl
  5403  000078  C002  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  5404  00007C  C001  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  5405  000080  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5406  000082  0011               	retfie		f
  5407  000084                     __end_of_InterruptHandlerHigh:
  5408                           	opt stack 0
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           intcon	equ	0xFF2
  5416                           intcon3	equ	0xFF0
  5417                           postinc0	equ	0xFEE
  5418                           wreg	equ	0xFE8
  5419                           postinc1	equ	0xFE6
  5420                           postdec1	equ	0xFE5
  5421                           fsr1h	equ	0xFE2
  5422                           fsr1l	equ	0xFE1
  5423                           indf2	equ	0xFDF
  5424                           postinc2	equ	0xFDE
  5425                           postdec2	equ	0xFDD
  5426                           plusw2	equ	0xFDB
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           intcon3	equ	0xFF0
  5438                           postinc0	equ	0xFEE
  5439                           wreg	equ	0xFE8
  5440                           postinc1	equ	0xFE6
  5441                           postdec1	equ	0xFE5
  5442                           fsr1h	equ	0xFE2
  5443                           fsr1l	equ	0xFE1
  5444                           indf2	equ	0xFDF
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           plusw2	equ	0xFDB
  5448                           fsr2h	equ	0xFDA
  5449                           fsr2l	equ	0xFD9
  5450                           status	equ	0xFD8
  5451                           
  5452                           	psect	rparam
  5453  0000                     tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           intcon	equ	0xFF2
  5460                           intcon3	equ	0xFF0
  5461                           postinc0	equ	0xFEE
  5462                           wreg	equ	0xFE8
  5463                           postinc1	equ	0xFE6
  5464                           postdec1	equ	0xFE5
  5465                           fsr1h	equ	0xFE2
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           plusw2	equ	0xFDB
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475                           	psect	temp
  5476  00004A                     btemp:
  5477                           	opt stack 0
  5478  00004A                     	ds	1
  5479  0000                     int$flags	set	btemp
  5480  0000                     wtemp8	set	btemp+1
  5481  0000                     ttemp5	set	btemp+1
  5482  0000                     ttemp6	set	btemp+4
  5483  0000                     ttemp7	set	btemp+8
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           intcon	equ	0xFF2
  5491                           intcon3	equ	0xFF0
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           postinc1	equ	0xFE6
  5495                           postdec1	equ	0xFE5
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           plusw2	equ	0xFDB
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8


Data Sizes:
    Strings     65
    Constant    10
    Data        0
    BSS         223
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      73
    BANK0           160     68      71
    BANK1           256      0     200
    BANK2           244      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_6(CODE[16]), STR_5(CODE[14]), STR_4(CODE[10]), STR_3(CODE[6]), 
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), main@buf_793(BANK0[16]), main@buf(BANK0[16]), print_IR@buf(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    print_RFID@dis	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(COMRAM[17]), 

    print_RFID@pa	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(COMRAM[17]), 

    smoothLeft@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothLeft@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    smoothLeft@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothLeft@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    smoothRight@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothRight@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    smoothRight@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    smoothRight@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    backwards@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    backwards@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    backwards@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    forwards@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    forwards@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    decelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    decelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    accelerate2@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    accelerate2@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    accelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    accelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    read_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S643Motor$duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S643Motor$duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    print_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    LCD_string@string	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), main@buf_793(BANK0[16]), main@buf(BANK0[16]), print_IR@buf(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_print_IR
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _print_RFID->_LCD_clear
    _print_RFID->_LCD_line
    _print_IR->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_string->_LCD_send
    _LCD_line->_LCD_send
    _LCD_clear->_LCD_send
    _forwards->_setMotorPWM
    _backwards->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _LCD_init->_LCD_send
    _LCD_send->_LCD_out

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                71    71      0   34302
                                             50 COMRAM     3     3      0
                                              0 BANK0     68    68      0
                          _LCD_clear
                           _LCD_init
                           _LCD_line
                         _LCD_string
                          _backwards
                      _delay_tenth_s
                           _forwards
                            _initPWM
                         _initTIMER0
                          _init_RFID
                        _init_TIMER5
                       _init_capture
                   _interrupt_EUSART
                           _print_IR
                         _print_RFID
                            _read_IR
                            _sprintf
                               _stop
                              _store
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     1      4    3130
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     1      4    2978
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _store                                                5     3      2     696
                                              5 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    3954
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              6     4      2     560
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _print_RFID                                          10     6      4    3028
                                             10 COMRAM    10     6      4
                          _LCD_clear
                           _LCD_line
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _print_IR                                            19    17      2    5637
                                             31 COMRAM    19    17      2
                          _LCD_clear
                           _LCD_line
                         _LCD_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    2130
                                             17 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             12 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              5 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           2     0      2    1415
                                              9 COMRAM     2     0      2
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_line                                             1     1      0     958
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            1     1      0     914
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _interrupt_EUSART                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_capture                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTIMER0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _forwards                                             5     1      4    2978
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                              5 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _backwards                                            5     1      4    2826
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    2454
                                             19 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             11 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0    1002
                                              9 COMRAM     1     1      0
                            _LCD_out
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_send                                             2     1      1     914
                                              7 COMRAM     2     1      1
                            _LCD_out
 ---------------------------------------------------------------------------------
 (3) _LCD_out                                              2     2      0      88
                                              5 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                 5     5      0      67
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_clear
     _LCD_send
       _LCD_out
         _E_TOG
   _LCD_init
     _LCD_out
       _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _LCD_line
     _LCD_send
       _LCD_out
         _E_TOG
   _LCD_string
     _LCD_send
       _LCD_out
         _E_TOG
   _backwards
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _delay_tenth_s
   _forwards
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initPWM
   _initTIMER0
   _init_RFID
   _init_TIMER5
   _init_capture
   _interrupt_EUSART
   _print_IR
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_string
       _LCD_send
         _LCD_out
           _E_TOG
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _print_RFID
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _read_IR
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _store
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F3      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK2            F4      0       0       8        0.0%
BANK2               F4      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     44      47       4       44.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      49       1       77.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     158       5        0.0%
DATA                 0      0     158      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Dec  6 19:50:08 2018

                 print_RFID@pa 000B                             l50 13D2                             l43 1414  
                           l45 1426                             l49 13F0                   ___awdiv@sign 0011  
                print_RFID@dis 000D            ___wmul@multiplicand 0008                            l200 06B6  
                          l201 06EE                            l210 07FC                            l203 074C  
                          l212 07DC                            l301 12A6                            l302 1268  
                          l310 0F7E                            l206 07C6                            l208 07A6  
                          l162 13BE                            l250 0984                            l331 10D0  
                          l163 13AC                            l323 103A                            l307 0FA4  
                          l315 0F0E                            l332 107A                            l324 0FE4  
                          l308 0F4E                            l316 0EB8                            l333 1092  
                          l325 0FFC                            l309 0F66                            l317 0ED0  
                          l181 0454                            l334 10AA                            l326 1014  
                          l318 0EE8                            l190 05A4                            l182 04EC  
                          l174 0360                            l248 08DC                            l192 0652  
                          l249 0930                            l177 0440                            l186 0570  
                          l178 041A                            l195 0616                            l187 0534  
                          l700 115A                            l276 0BF6                            l196 06AC  
                          l701 1168                            l277 0C3C                            l453 0A64  
                          l197 0672                            l189 05E0                            l278 0CD4  
                          l454 0A0A                            l446 09F4                            l463 0AF6  
                          l455 0A1E                            l447 0A04                            l199 0802  
                          l464 0B4E                            l448 0A30                            l456 0A2C  
                          l465 0AFC                            l457 0A92                            l393 1182  
                          l394 117E                            l459 0AAA                            l396 11B6  
                          l397 1194                            l692 1102                            l693 1112  
                          l695 1130                            l951 12E2                            l696 1128  
                          l952 12DA                            l961 132C                            l962 1324  
                          l699 1150                            l955 1302                            l956 130C  
                          l965 1344                            l966 134E                            u995 1468  
                          u996 146A                 print_IR@Values 0020                            prod 000FF3  
                          wreg 000FE8                    ?_LCD_string 000A                    main@buf_793 0070  
                 __CFG_LVP$OFF 000000                __end_of_LCD_out 1266                           l2200 0AAE  
                         l2166 09FE                           l2416 08DC                           l2616 04E4  
                         l2660 05FA                           STR_1 033D                           STR_2 0333  
                         STR_3 0346                           STR_4 0329                           STR_5 031B  
                         STR_6 030B                           u1100 1330                           u1030 1134  
                         u1200 0ADA                           u1220 0B56                           u1070 12E6  
                         u1230 0B6E                           u2007 11AC                           u1400 0974  
                         u2017 0E62                           u2107 10C8                           u2027 0E70  
                         u1420 09D4                           u2117 0D1C                           u2037 0E7E  
                         _LATA 000F89                           _LATB 000F8A                           u2207 0DDC  
                         u2127 0D32                           u2047 0E8C                           u1415 099C  
                         _LATC 000F8B                           u1264 0CC8                           _LATD 000F8C  
                         u2217 1474                           u2137 0D42                           u1265 0CC4  
                         u2057 13EA                           u1274 0CF0                           u2227 1482  
                         u2147 0D50                           u1275 0CEC                           u2067 1428  
                         u2237 125E                           u2157 0D5E                           u2077 14DE  
                         u2247 153C                           u2167 0D74                           u2087 1032  
                         u2257 1546                           u2177 0D8E                           u2097 13B2  
                         u1810 07FA                           u1730 05FA                           u2187 0DA8  
                         u1395 0944                           u2197 0DC2                           u1670 04E4  
                  main@counter 0089                           u1967 06E4                           u1977 0F06  
                         u1987 0F9C                           u1997 129E       __end_of_interrupt_EUSART 1562  
                         _main 034E                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 004A                           _stop 1266                           prodh 000FF4  
                         prodl 000FF3                           start 0084             __size_of_LCD_clear 001C  
                 ?_init_TIMER5 0001                   ___param_bank 000000                    _string_rfid 0039  
             __end_of_LCD_line 1430               __end_of_LCD_init 0DE8               __end_of_LCD_send 148A  
                        ?_main 0001                __end_of___awdiv 1172                          ?_stop 001B  
              ___awdiv@divisor 000E                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
              __end_of___lwdiv 1316                __end_of___lwmod 1358                          i2l150 002E  
                        i2l151 003C                          i2l152 0064                          i2l154 0062  
                        i2l155 0070                          i2l149 0052                ___awdiv@counter 0010  
                        _RCREG 000FAE                          _E_TOG 1538                          _TMR0H 000FD7  
                        _TMR0L 000FD6                          _SPBRG 000FAF                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
              __end_of_initPWM 14CE                __end_of_dpowers 030B                __end_of_read_IR 09EA  
                        _store 1358                          tablat 000FF5                          plusw2 000FDB  
                        ttemp5 004B                          ttemp6 004E                          ttemp7 0052  
                        status 000FD8                          wtemp8 004B                __end_of_sprintf 0B7C  
               __CFG_MCLRE$OFF 000000                __initialization 1430            __size_of_LCD_string 0030  
                 __end_of_main 080C                   __end_of_stop 12C4                 delay_tenth_s@i 0008  
               __CFG_OSC$IRCIO 000000                  _count_encoder 0037                         ??_main 0033  
                       ??_stop 001F                  __activetblptr 000002                         ?_E_TOG 0001  
                    ??_LCD_out 0006                  main@direction 0087              __end_of_LCD_clear 14EA  
                 ?_setMotorPWM 0014               ___awdiv@dividend 000C                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         ?_store 0006                  ?_init_capture 0001  
        __end_of_delay_tenth_s 13D0                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                         ___wmul 148A                      ??___awdiv 0010  
                    ??___lwdiv 000A                      ??___lwmod 0011                         _millis 00A4  
                       clear_0 1436                         clear_1 144A               __end_of_forwards 1058  
             ___awdiv@quotient 0012                         main@mL 0092                         main@mR 009B  
                    ??_initPWM 0006                      ??_read_IR 0008                  main@threshold 0084  
                 __mediumconst 0000               __end_of_print_IR 0E96                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 001B  
                       stop@mR 001D                      ??_sprintf 0018                 ??_init_capture 0006  
             __end_of_turnLeft 0FC2                     __accesstop 0060        __end_of__initialization 1450  
                    ?_LCD_line 0001                      ?_LCD_init 0001                      ?_LCD_send 0008  
                ___rparam_used 000001                  __end_of_E_TOG 154E             __size_of_backwards 0096  
                 LCD_line@line 000A                 __pcstackCOMRAM 0001           __size_of_init_TIMER5 001A  
                 LCD_send@Byte 0009                  __end_of_store 1398                   LCD_send@type 0008  
                      ??_E_TOG 0006  __size_of_InterruptHandlerHigh 007C                   ??_LCD_string 000C  
   delay_tenth_s@tenth_seconds 0007                        ??_store 0008                     __pbssBANK0 00A4  
                   __pbssBANK1 0100               LCD_string@string 000A             __size_of_init_RFID 001A  
            ?_interrupt_EUSART 0001                     ??_LCD_line 000A                     ??_LCD_init 000A  
                   ??_LCD_send 0009             ??_interrupt_EUSART 0006                        ?___wmul 0006  
           __end_of_LCD_string 1400                        _CAP1CON 000F63                        _CAP2CON 000F62  
                 store@counter 000A                        _DFLTCON 000F60                        _LCD_out 11EE  
            __end_of_backwards 10EE                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
         __size_of_setMotorPWM 0182                      ?_forwards 001B             __size_of_turnRight 0096  
                   _initTIMER0 1562                        __Hparam 0000                        __Lparam 0000  
                    ?_print_IR 0020                        ___awdiv 10EE                __size_of___wmul 0026  
                      ___lwdiv 12C4                        ___lwmod 1316           __end_of_init_capture 1504  
                 __psmallconst 0300                        __pcinit 1430                        __ramtop 0300  
                    ?_turnLeft 001B                        __ptext0 034E                        __ptext1 0E96  
                      __ptext2 0F2C                        __ptext3 1358                        __ptext4 1266  
                      __ptext5 080C                        __ptext6 1172                        __ptext7 0DE8  
                      __ptext8 09EA                        __ptext9 1316              __end_of_init_RFID 1538  
                    _T0CONbits 000FD5                        _initPWM 14B0                        _dpowers 0301  
                      _read_IR 080C                      _T5CONbits 000FB7                        main@buf 0060  
                      _sprintf 09EA                      _LCD_clear 14CE           end_of_initialization 1450  
           setMotorPWM@PWMduty 0019                  __Lmediumconst 0000                     ??_forwards 001F  
                    _RCSTAbits 000FAB                     ??_print_IR 0022                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     ??_turnLeft 001F                     _print_RFID 1172  
                    _PORTAbits 000F80                      _PORTCbits 000F82                      _PORTDbits 000F83  
            __end_of_turnRight 0F2C                      _TRISCbits 000F94                    print_IR@buf 0023  
                   ?_LCD_clear 0001                     main@Values 008A                      _TXSTAbits 000FAC  
                  ?_initTIMER0 0001              __size_of_LCD_line 0030              __size_of_LCD_init 00EA  
            __size_of_LCD_send 002C                      _Direction 0038                 __end_of___wmul 14B0  
                  _BAUDCONbits 000FAA         __size_of_delay_tenth_s 0038            start_initialization 1430  
    InterruptHandlerHigh@count 0036   __end_of_InterruptHandlerHigh 0084                  ??_init_TIMER5 0006  
        __size_of_init_capture 001A                  LCD_out@number 0007                       ??___wmul 000A  
                   forwards@mL 001B                     forwards@mR 001D      __size_of_interrupt_EUSART 0014  
                  ?_print_RFID 000B            __size_of_initTIMER0 0014                       ?_LCD_out 0001  
                  __pbssCOMRAM 0036                  __pcstackBANK0 0060                    ??_LCD_clear 000A  
                    _backwards 1058                   _init_capture 14EA                  _delay_tenth_s 1398  
                  sprintf@flag 001A                    sprintf@prec 0019                      _card_read 00A6  
            __size_of_forwards 0096               ___lwdiv@dividend 0006                   _forwardsTime 0100  
                    __pintcode 0008                       ?___awdiv 000C                       ?___lwdiv 0006  
                     ?___lwmod 000D              __size_of_print_IR 00AE            __end_of_init_TIMER5 151E  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66                       ?_initPWM 0001                    __smallconst 0300  
                     ?_read_IR 0006                 __size_of_E_TOG 0016              __size_of_turnLeft 0096  
                    _init_RFID 151E                  ??_setMotorPWM 0016               ___lwdiv@quotient 000A  
                     ?_sprintf 0012                  read_IR@Values 0006                     ?_backwards 001B  
               __size_of_store 0040                 ?_delay_tenth_s 0001                    backwards@mL 001B  
                  backwards@mR 001D                 ___wmul@product 000A                       _LATCbits 000F8B  
          __size_of_print_RFID 007C                       _LCD_line 1400                       _LCD_init 0CFE  
                     _LCD_send 145E                       _PIE1bits 000F9D                    turnRight@mL 001B  
                  turnRight@mR 001D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
            ___wmul@multiplier 0006                   setMotorPWM@m 0014           _InterruptHandlerHigh 0008  
                   ?_init_RFID 0001               __size_of_LCD_out 0078                      _turnRight 0E96  
                  _INTCON2bits 000FF1                    _INTCON3bits 000FF0            __end_of_setMotorPWM 0CFE  
                 ??_initTIMER0 0006                       __Hrparam 0000                    _init_TIMER5 1504  
                     __Lrparam 0000               __size_of___awdiv 0084               __size_of___lwdiv 0052  
             __size_of___lwmod 0042               _interrupt_EUSART 154E          ?_InterruptHandlerHigh 0001  
                   sprintf@val 001D               __size_of_initPWM 001E               __size_of_read_IR 01DE  
           __end_of_initTIMER0 1576                    _forwardsDir 0164                ___lwdiv@divisor 0008  
              ___lwdiv@counter 000C                     ?_turnRight 001B                       __ptext10 12C4  
                     __ptext11 13D0                       __ptext20 0FC2                       __ptext12 1400  
                     __ptext21 1398                       __ptext13 14CE                       __ptext22 1058  
                     __ptext14 154E                       __ptext23 0B7C                       __ptext15 14EA  
                     __ptext24 148A                       __ptext16 1504                       __ptext25 10EE  
                     __ptext17 151E                       __ptext26 0CFE                       __ptext18 1562  
                     __ptext27 145E                       __ptext19 14B0                       __ptext28 11EE  
                     __ptext29 1538                ??_delay_tenth_s 0006                    ??_backwards 001F  
             __size_of_sprintf 0192                  __size_of_main 04BE                       _forwards 0FC2  
                __size_of_stop 005E                     turnLeft@mL 001B                     turnLeft@mR 001D  
                     _print_IR 0DE8                       int$flags 004A                       main@diff 0082  
                     main@time 0086                   ??_print_RFID 000F                       _turnLeft 0F2C  
                   _INTCONbits 000FF2                    ??_init_RFID 0006                     _LCD_string 13D0  
                  _setMotorPWM 0B7C                       intlevel2 0000                      sprintf@ap 001B  
                    sprintf@sp 0012               ___lwmod@dividend 000D                      store@time 0007  
  InterruptHandlerHigh@rx_char 0005             __end_of_print_RFID 11EE                     _OSCCONbits 000FD3  
       ??_InterruptHandlerHigh 0001                       sprintf@c 001F                       sprintf@f 0014  
                     store@dir 0006                ___lwmod@divisor 000F                ___lwmod@counter 0011  
                  ??_turnRight 001F                   main@PWMcycle 0080  
