

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Dec  5 09:55:06 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 2.00
    56                           ; Generated 27/05/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4331 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     _TRISCbits	set	3988
    90  0000                     _LATCbits	set	3979
    91  0000                     _LATB	set	3978
    92  0000                     _PTPERH	set	3962
    93  0000                     _PTPERL	set	3963
    94  0000                     _PWMCON1	set	3950
    95  0000                     _PWMCON0	set	3951
    96  0000                     _PTCON1	set	3966
    97  0000                     _PTCON0	set	3967
    98  0000                     _TRISB	set	3987
    99  0000                     _CAP1BUFL	set	3944
   100  0000                     _CAP1BUFH	set	3945
   101  0000                     _CAP2BUFL	set	3942
   102  0000                     _CAP2BUFH	set	3943
   103  0000                     _DFLTCON	set	3936
   104  0000                     _CAP2CON	set	3938
   105  0000                     _CAP1CON	set	3939
   106  0000                     _TRISD	set	3989
   107  0000                     _TRISC	set	3988
   108  0000                     _TRISA	set	3986
   109  0000                     _LATD	set	3980
   110  0000                     _LATC	set	3979
   111  0000                     _LATA	set	3977
   112  0000                     _PORTAbits	set	3968
   113  0000                     _PORTDbits	set	3971
   114  0000                     _PORTCbits	set	3970
   115  0000                     _PDC1H	set	3958
   116  0000                     _PDC1L	set	3959
   117  0000                     _PDC0H	set	3960
   118  0000                     _PDC0L	set	3961
   119  0000                     _PIE1bits	set	3997
   120  0000                     _RCSTAbits	set	4011
   121  0000                     _TXSTAbits	set	4012
   122  0000                     _BAUDCONbits	set	4010
   123  0000                     _SPBRGH	set	4016
   124  0000                     _SPBRG	set	4015
   125  0000                     _T5CONbits	set	4023
   126  0000                     _T5CON	set	4023
   127  0000                     _OSCCONbits	set	4051
   128  0000                     _OSCCON	set	4051
   129  0000                     _ANSEL1	set	4025
   130  0000                     _ANSEL0	set	4024
   131  0000                     _RCREG	set	4014
   132  0000                     _PIR1bits	set	3998
   133  0000                     _TMR0H	set	4055
   134  0000                     _TMR0L	set	4054
   135  0000                     _T0CONbits	set	4053
   136  0000                     _INTCON2bits	set	4081
   137  0000                     _INTCONbits	set	4082
   138  0000                     _INTCON3bits	set	4080
   139                           
   140                           	psect	smallconst
   141  000300                     __psmallconst:
   142                           	opt stack 0
   143  000300  00                 	db	0
   144  000301  43                 	db	67	;'C'
   145  000302  53                 	db	83	;'S'
   146  000303  20                 	db	32
   147  000304  49                 	db	73	;'I'
   148  000305  4E                 	db	78	;'N'
   149  000306  43                 	db	67	;'C'
   150  000307  4F                 	db	79	;'O'
   151  000308  52                 	db	82	;'R'
   152  000309  52                 	db	82	;'R'
   153  00030A  45                 	db	69	;'E'
   154  00030B  43                 	db	67	;'C'
   155  00030C  54                 	db	84	;'T'
   156  00030D  20                 	db	32
   157  00030E  25                 	db	37
   158  00030F  64                 	db	100	;'d'
   159  000310  00                 	db	0
   160  000311  43                 	db	67	;'C'
   161  000312  53                 	db	83	;'S'
   162  000313  20                 	db	32
   163  000314  43                 	db	67	;'C'
   164  000315  4F                 	db	79	;'O'
   165  000316  52                 	db	82	;'R'
   166  000317  52                 	db	82	;'R'
   167  000318  45                 	db	69	;'E'
   168  000319  43                 	db	67	;'C'
   169  00031A  54                 	db	84	;'T'
   170  00031B  20                 	db	32
   171  00031C  25                 	db	37
   172  00031D  64                 	db	100	;'d'
   173  00031E  00                 	db	0
   174  00031F                     STR_2:
   175  00031F  52                 	db	82	;'R'
   176  000320  69                 	db	105	;'i'
   177  000321  67                 	db	103	;'g'
   178  000322  68                 	db	104	;'h'
   179  000323  74                 	db	116	;'t'
   180  000324  3A                 	db	58	;':'
   181  000325  20                 	db	32
   182  000326  25                 	db	37
   183  000327  75                 	db	117	;'u'
   184  000328  00                 	db	0
   185  000329                     STR_1:
   186  000329  4C                 	db	76	;'L'
   187  00032A  65                 	db	101	;'e'
   188  00032B  66                 	db	102	;'f'
   189  00032C  74                 	db	116	;'t'
   190  00032D  3A                 	db	58	;':'
   191  00032E  20                 	db	32
   192  00032F  25                 	db	37
   193  000330  75                 	db	117	;'u'
   194  000331  00                 	db	0
   195                           
   196                           ; #config settings
   197  000332  00                 	db	0	; dummy byte at the end
   198  0000                     
   199                           	psect	cinit
   200  001C2C                     __pcinit:
   201                           	opt stack 0
   202  001C2C                     start_initialization:
   203                           	opt stack 0
   204  001C2C                     __initialization:
   205                           	opt stack 0
   206                           
   207                           ; Clear objects allocated to BANK0 (56 bytes)
   208  001C2C  EE00  F0BA         	lfsr	0,__pbssBANK0
   209  001C30  0E38               	movlw	56
   210  001C32                     clear_0:
   211  001C32  6AEE               	clrf	postinc0,c
   212  001C34  06E8               	decf	wreg,f,c
   213  001C36  E1FD               	bnz	clear_0
   214                           
   215                           ; Clear objects allocated to COMRAM (5 bytes)
   216  001C38  6A59               	clrf	(__pbssCOMRAM+4)& (0+255),c
   217  001C3A  6A58               	clrf	(__pbssCOMRAM+3)& (0+255),c
   218  001C3C  6A57               	clrf	(__pbssCOMRAM+2)& (0+255),c
   219  001C3E  6A56               	clrf	(__pbssCOMRAM+1)& (0+255),c
   220  001C40  6A55               	clrf	__pbssCOMRAM& (0+255),c
   221  001C42                     end_of_initialization:
   222                           	opt stack 0
   223  001C42                     __end_of__initialization:
   224                           	opt stack 0
   225  001C42  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   226  001C44  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   227  001C46  0E00               	movlw	low (__Lsmallconst shr (0+16))
   228  001C48  6EF8               	movwf	tblptru,c
   229  001C4A  0E03               	movlw	high __Lsmallconst
   230  001C4C  6EF7               	movwf	tblptrh,c
   231  001C4E  0100               	movlb	0
   232  001C50  EF9A  F001         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           postinc0	equ	0xFEE
   236                           wreg	equ	0xFE8
   237                           
   238                           	psect	bssCOMRAM
   239  000055                     __pbssCOMRAM:
   240                           	opt stack 0
   241  000055                     _prec:
   242                           	opt stack 0
   243  000055                     	ds	2
   244  000057                     _flags:
   245                           	opt stack 0
   246  000057                     	ds	2
   247  000059                     InterruptHandlerHigh@count:
   248                           	opt stack 0
   249  000059                     	ds	1
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK0
   256  0000BA                     __pbssBANK0:
   257                           	opt stack 0
   258  0000BA                     _nout:
   259                           	opt stack 0
   260  0000BA                     	ds	2
   261  0000BC                     _width:
   262                           	opt stack 0
   263  0000BC                     	ds	2
   264  0000BE                     _count_encoder:
   265                           	opt stack 0
   266  0000BE                     	ds	1
   267  0000BF                     _card_read:
   268                           	opt stack 0
   269  0000BF                     	ds	1
   270  0000C0                     _Direction:
   271                           	opt stack 0
   272  0000C0                     	ds	1
   273  0000C1                     _dbuf:
   274                           	opt stack 0
   275  0000C1                     	ds	32
   276  0000E1                     _string_rfid:
   277                           	opt stack 0
   278  0000E1                     	ds	17
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	cstackBANK0
   285  000060                     __pcstackBANK0:
   286                           	opt stack 0
   287  000060                     vfpfcnvrt@ll:
   288                           	opt stack 0
   289                           
   290                           ; 8 bytes @ 0x0
   291  000060                     	ds	8
   292  000068                     vfpfcnvrt@llu:
   293                           	opt stack 0
   294                           
   295                           ; 8 bytes @ 0x8
   296  000068                     	ds	8
   297  000070                     vfprintf@cfmt:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x10
   301  000070                     	ds	2
   302  000072                     ?_sprintf:
   303                           	opt stack 0
   304  000072                     sprintf@s:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x12
   308  000072                     	ds	2
   309  000074                     sprintf@fmt:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x14
   313  000074                     	ds	4
   314  000078                     sprintf@ret:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x18
   318  000078                     	ds	2
   319  00007A                     sprintf@ap:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x1A
   323  00007A                     	ds	2
   324  00007C                     sprintf@f:
   325                           	opt stack 0
   326                           
   327                           ; 6 bytes @ 0x1C
   328  00007C                     	ds	6
   329  000082                     print_IR@Values:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x22
   333  000082                     	ds	2
   334  000084                     ??_print_IR:
   335                           
   336                           ; 1 bytes @ 0x24
   337  000084                     	ds	1
   338  000085                     print_IR@buf:
   339                           	opt stack 0
   340                           
   341                           ; 16 bytes @ 0x25
   342  000085                     	ds	16
   343  000095                     ??_main:
   344                           
   345                           ; 1 bytes @ 0x35
   346  000095                     	ds	3
   347  000098                     main@PWMcycle:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x38
   351  000098                     	ds	2
   352  00009A                     main@diff:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x3A
   356  00009A                     	ds	2
   357  00009C                     main@threshold:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x3C
   361  00009C                     	ds	2
   362  00009E                     main@direction:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x3E
   366  00009E                     	ds	2
   367  0000A0                     main@Values:
   368                           	opt stack 0
   369                           
   370                           ; 8 bytes @ 0x40
   371  0000A0                     	ds	8
   372  0000A8                     main@mL:
   373                           	opt stack 0
   374                           
   375                           ; 9 bytes @ 0x48
   376  0000A8                     	ds	9
   377  0000B1                     main@mR:
   378                           	opt stack 0
   379                           
   380                           ; 9 bytes @ 0x51
   381  0000B1                     	ds	9
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           
   387                           	psect	cstackCOMRAM
   388  000001                     __pcstackCOMRAM:
   389                           	opt stack 0
   390  000001                     ??_InterruptHandlerHigh:
   391  000001                     
   392                           ; 1 bytes @ 0x0
   393  000001                     	ds	4
   394  000005                     InterruptHandlerHigh@rx_char:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x4
   398  000005                     	ds	1
   399  000006                     ??_LCD_out:
   400  000006                     ?_strlen:
   401                           	opt stack 0
   402  000006                     ?___wmul:
   403                           	opt stack 0
   404  000006                     ?___aodiv:
   405                           	opt stack 0
   406  000006                     ?___aomod:
   407                           	opt stack 0
   408  000006                     ?___lodiv:
   409                           	opt stack 0
   410  000006                     ?___lomod:
   411                           	opt stack 0
   412  000006                     read_IR@Values:
   413                           	opt stack 0
   414  000006                     ___wmul@multiplier:
   415                           	opt stack 0
   416  000006                     fputc@c:
   417                           	opt stack 0
   418  000006                     strlen@s:
   419                           	opt stack 0
   420  000006                     ___aodiv@dividend:
   421                           	opt stack 0
   422  000006                     ___aomod@dividend:
   423                           	opt stack 0
   424  000006                     ___lodiv@dividend:
   425                           	opt stack 0
   426  000006                     ___lomod@dividend:
   427                           	opt stack 0
   428                           
   429                           ; 8 bytes @ 0x5
   430  000006                     	ds	1
   431  000007                     LCD_out@number:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x6
   435  000007                     	ds	1
   436  000008                     ??_read_IR:
   437  000008                     ??_strlen:
   438  000008                     LCD_send@type:
   439                           	opt stack 0
   440  000008                     ___wmul@multiplicand:
   441                           	opt stack 0
   442  000008                     fputc@fp:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x7
   446  000008                     	ds	1
   447  000009                     LCD_send@Byte:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x8
   451  000009                     	ds	1
   452  00000A                     ??_fputc:
   453  00000A                     ??_LCD_init:
   454  00000A                     ??_LCD_clear:
   455  00000A                     LCD_line@line:
   456                           	opt stack 0
   457  00000A                     LCD_string@string:
   458                           	opt stack 0
   459  00000A                     ___wmul@product:
   460                           	opt stack 0
   461  00000A                     strlen@a:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x9
   465  00000A                     	ds	1
   466  00000B                     print_RFID@pa:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0xA
   470  00000B                     	ds	1
   471  00000C                     ?___awdiv:
   472                           	opt stack 0
   473  00000C                     ___awdiv@dividend:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0xB
   477  00000C                     	ds	1
   478  00000D                     print_RFID@dis:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0xC
   482  00000D                     	ds	1
   483  00000E                     ___awdiv@divisor:
   484                           	opt stack 0
   485  00000E                     ___aodiv@divisor:
   486                           	opt stack 0
   487  00000E                     ___aomod@divisor:
   488                           	opt stack 0
   489  00000E                     ___lodiv@divisor:
   490                           	opt stack 0
   491  00000E                     ___lomod@divisor:
   492                           	opt stack 0
   493                           
   494                           ; 8 bytes @ 0xD
   495  00000E                     	ds	1
   496  00000F                     ??_print_RFID:
   497  00000F                     fputs@s:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0xE
   501  00000F                     	ds	1
   502  000010                     ___awdiv@counter:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0xF
   506  000010                     	ds	1
   507  000011                     ___awdiv@sign:
   508                           	opt stack 0
   509  000011                     fputs@fp:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x10
   513  000011                     	ds	1
   514  000012                     ___awdiv@quotient:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x11
   518  000012                     	ds	1
   519  000013                     fputs@c:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x12
   523  000013                     	ds	1
   524  000014                     setMotorPWM@m:
   525                           	opt stack 0
   526  000014                     fputs@i:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x13
   530  000014                     	ds	2
   531  000016                     ??_setMotorPWM:
   532  000016                     ?_pad:
   533                           	opt stack 0
   534  000016                     ___aodiv@counter:
   535                           	opt stack 0
   536  000016                     ___aomod@counter:
   537                           	opt stack 0
   538  000016                     ___lomod@counter:
   539                           	opt stack 0
   540  000016                     pad@fp:
   541                           	opt stack 0
   542  000016                     ___lodiv@quotient:
   543                           	opt stack 0
   544                           
   545                           ; 8 bytes @ 0x15
   546  000016                     	ds	1
   547  000017                     ___aodiv@sign:
   548                           	opt stack 0
   549  000017                     ___aomod@sign:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x16
   553  000017                     	ds	1
   554  000018                     ?_abs:
   555                           	opt stack 0
   556  000018                     pad@buf:
   557                           	opt stack 0
   558  000018                     abs@a:
   559                           	opt stack 0
   560  000018                     ___aodiv@quotient:
   561                           	opt stack 0
   562                           
   563                           ; 8 bytes @ 0x17
   564  000018                     	ds	1
   565  000019                     setMotorPWM@PWMduty:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x18
   569  000019                     	ds	1
   570  00001A                     ??_abs:
   571  00001A                     pad@p:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x19
   575  00001A                     	ds	1
   576  00001B                     stop@mL:
   577                           	opt stack 0
   578  00001B                     turnLeft@mL:
   579                           	opt stack 0
   580  00001B                     turnRight@mL:
   581                           	opt stack 0
   582  00001B                     forwards@mL:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x1A
   586  00001B                     	ds	1
   587  00001C                     ??_pad:
   588                           
   589                           ; 1 bytes @ 0x1B
   590  00001C                     	ds	1
   591  00001D                     stop@mR:
   592                           	opt stack 0
   593  00001D                     turnLeft@mR:
   594                           	opt stack 0
   595  00001D                     turnRight@mR:
   596                           	opt stack 0
   597  00001D                     forwards@mR:
   598                           	opt stack 0
   599  00001D                     pad@i:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x1C
   603  00001D                     	ds	1
   604  00001E                     ___lodiv@counter:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x1D
   608  00001E                     	ds	1
   609  00001F                     ??_stop:
   610  00001F                     ??_turnLeft:
   611  00001F                     ??_turnRight:
   612  00001F                     ??_forwards:
   613  00001F                     pad@w:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x1E
   617  00001F                     	ds	2
   618  000021                     ?_dtoa:
   619                           	opt stack 0
   620  000021                     ?_utoa:
   621                           	opt stack 0
   622  000021                     dtoa@fp:
   623                           	opt stack 0
   624  000021                     utoa@fp:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x20
   628  000021                     	ds	2
   629  000023                     dtoa@d:
   630                           	opt stack 0
   631  000023                     utoa@d:
   632                           	opt stack 0
   633                           
   634                           ; 8 bytes @ 0x22
   635  000023                     	ds	8
   636  00002B                     ??_dtoa:
   637  00002B                     ??_utoa:
   638                           
   639                           ; 1 bytes @ 0x2A
   640  00002B                     	ds	8
   641  000033                     _dtoa$1441:
   642                           	opt stack 0
   643  000033                     utoa@p:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x32
   647  000033                     	ds	2
   648  000035                     dtoa@p:
   649                           	opt stack 0
   650  000035                     utoa@w:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x34
   654  000035                     	ds	2
   655  000037                     dtoa@w:
   656                           	opt stack 0
   657  000037                     utoa@n:
   658                           	opt stack 0
   659                           
   660                           ; 8 bytes @ 0x36
   661  000037                     	ds	2
   662  000039                     dtoa@s:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x38
   666  000039                     	ds	2
   667  00003B                     dtoa@n:
   668                           	opt stack 0
   669                           
   670                           ; 8 bytes @ 0x3A
   671  00003B                     	ds	4
   672  00003F                     utoa@i:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x3E
   676  00003F                     	ds	4
   677  000043                     dtoa@i:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x42
   681  000043                     	ds	2
   682  000045                     ?_vfpfcnvrt:
   683                           	opt stack 0
   684  000045                     vfpfcnvrt@fp:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x44
   688  000045                     	ds	2
   689  000047                     vfpfcnvrt@fmt:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x46
   693  000047                     	ds	2
   694  000049                     vfpfcnvrt@ap:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x48
   698  000049                     	ds	2
   699  00004B                     ??_vfpfcnvrt:
   700                           
   701                           ; 1 bytes @ 0x4A
   702  00004B                     	ds	4
   703  00004F                     ?_vfprintf:
   704                           	opt stack 0
   705  00004F                     vfprintf@fp:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x4E
   709  00004F                     	ds	2
   710  000051                     vfprintf@fmt:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x50
   714  000051                     	ds	2
   715  000053                     vfprintf@ap:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x52
   719  000053                     	ds	2
   720  000055                     tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           
   725                           ; 1 bytes @ 0x54
   726 ;;
   727 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   728 ;;
   729 ;; *************** function _main *****************
   730 ;; Defined at:
   731 ;;		line 59 in file "main.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  threshold       2   60[BANK0 ] int 
   736 ;;  diff            2   58[BANK0 ] int 
   737 ;;  direction       2   62[BANK0 ] int 
   738 ;;  mR              9   81[BANK0 ] struct Motor
   739 ;;  mL              9   72[BANK0 ] struct Motor
   740 ;;  Values          8   64[BANK0 ] struct Sensor_ir
   741 ;;  PWMcycle        2   56[BANK0 ] int 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   751 ;;      Params:         0       0       0       0
   752 ;;      Locals:         0      34       0       0
   753 ;;      Temps:          0       3       0       0
   754 ;;      Totals:         0      37       0       0
   755 ;;Total ram usage:       37 bytes
   756 ;; Hardware stack levels required when called:   10
   757 ;; This function calls:
   758 ;;		_LCD_init
   759 ;;		_forwards
   760 ;;		_initEncoder
   761 ;;		_initPWM
   762 ;;		_init_RFID
   763 ;;		_init_TIMER5
   764 ;;		_init_capture
   765 ;;		_interrupt_EUSART
   766 ;;		_print_IR
   767 ;;		_print_RFID
   768 ;;		_read_IR
   769 ;;		_stop
   770 ;;		_turnLeft
   771 ;;		_turnRight
   772 ;; This function is called by:
   773 ;;		Startup code after reset
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text0
   778  000334                     __ptext0:
   779                           	opt stack 0
   780  000334                     _main:
   781                           	opt stack 21
   782                           
   783                           ;main.c: 60:     ANSEL0 = 0;
   784                           
   785                           ;incstack = 0
   786  000334  0E00               	movlw	0
   787  000336  6EB8               	movwf	4024,c	;volatile
   788                           
   789                           ;main.c: 61:     ANSEL1 = 0;
   790  000338  0E00               	movlw	0
   791  00033A  6EB9               	movwf	4025,c	;volatile
   792                           
   793                           ;main.c: 62:     OSCCON = 0x72;
   794  00033C  0E72               	movlw	114
   795  00033E  6ED3               	movwf	4051,c	;volatile
   796  000340  A4D3               	btfss	4051,2,c	;volatile
   797  000342  D7FE               	goto	l142
   798                           
   799                           ;main.c: 65:     LCD_init();
   800  000344  EC6A  F009         	call	_LCD_init	;wreg free
   801                           
   802                           ;main.c: 67:     init_TIMER5();
   803  000348  EC67  F00E         	call	_init_TIMER5	;wreg free
   804                           
   805                           ;main.c: 68:     initPWM();
   806  00034C  EC3D  F00E         	call	_initPWM	;wreg free
   807                           
   808                           ;main.c: 69:     init_capture();
   809  000350  EC5A  F00E         	call	_init_capture	;wreg free
   810                           
   811                           ;main.c: 70:     init_RFID();
   812  000354  EC74  F00E         	call	_init_RFID	;wreg free
   813                           
   814                           ;main.c: 71:     initEncoder();
   815  000358  EC94  F00E         	call	_initEncoder	;wreg free
   816                           
   817                           ;main.c: 75:     interrupt_EUSART();
   818  00035C  EC8C  F00E         	call	_interrupt_EUSART	;wreg free
   819                           
   820                           ;main.c: 76:     struct Sensor_ir Values;;main.c: 77:     struct Motor mL, mR;;main.c: 7
      +                          8:     int PWMcycle = 199;
   821  000360  0E00               	movlw	0
   822  000362  0100               	movlb	0	; () banked
   823  000364  6F99               	movwf	(main@PWMcycle+1)& (0+255),b
   824  000366  0EC7               	movlw	199
   825  000368  6F98               	movwf	main@PWMcycle& (0+255),b
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 79:     mL.power = 0;
   829  00036A  0E00               	movlw	0
   830  00036C  6FA8               	movwf	main@mL& (0+255),b
   831                           
   832                           ; BSR set to: 0
   833                           ;main.c: 80:     mL.direction = 1;
   834  00036E  0E01               	movlw	1
   835  000370  6FA9               	movwf	(main@mL+1)& (0+255),b
   836                           
   837                           ; BSR set to: 0
   838                           ;main.c: 81:     mL.duty_low = (unsigned char *) (&PDC0L);
   839  000372  0E79               	movlw	121
   840  000374  6FAA               	movwf	(main@mL+2)& (0+255),b
   841  000376  0E0F               	movlw	15
   842  000378  6FAB               	movwf	(main@mL+3)& (0+255),b
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 82:     mL.duty_high = (unsigned char *) (&PDC0H);
   846  00037A  0E78               	movlw	120
   847  00037C  6FAC               	movwf	(main@mL+4)& (0+255),b
   848  00037E  0E0F               	movlw	15
   849  000380  6FAD               	movwf	(main@mL+5)& (0+255),b
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 83:     mL.dir_pin = 0;
   853  000382  0E00               	movlw	0
   854  000384  6FAE               	movwf	(main@mL+6)& (0+255),b
   855                           
   856                           ; BSR set to: 0
   857                           ;main.c: 84:     mL.period = PWMcycle;
   858  000386  C098  F0AF         	movff	main@PWMcycle,main@mL+7
   859  00038A  C099  F0B0         	movff	main@PWMcycle+1,main@mL+8
   860                           
   861                           ; BSR set to: 0
   862                           ;main.c: 87:     mR.power = 0;
   863  00038E  0E00               	movlw	0
   864  000390  6FB1               	movwf	main@mR& (0+255),b
   865                           
   866                           ; BSR set to: 0
   867                           ;main.c: 88:     mR.direction = 1;
   868  000392  0E01               	movlw	1
   869  000394  6FB2               	movwf	(main@mR+1)& (0+255),b
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 89:     mR.duty_low = (unsigned char *) (&PDC1L);
   873  000396  0E77               	movlw	119
   874  000398  6FB3               	movwf	(main@mR+2)& (0+255),b
   875  00039A  0E0F               	movlw	15
   876  00039C  6FB4               	movwf	(main@mR+3)& (0+255),b
   877                           
   878                           ; BSR set to: 0
   879                           ;main.c: 90:     mR.duty_high = (unsigned char *) (&PDC1H);
   880  00039E  0E76               	movlw	118
   881  0003A0  6FB5               	movwf	(main@mR+4)& (0+255),b
   882  0003A2  0E0F               	movlw	15
   883  0003A4  6FB6               	movwf	(main@mR+5)& (0+255),b
   884                           
   885                           ; BSR set to: 0
   886                           ;main.c: 91:     mR.dir_pin = 2;
   887  0003A6  0E02               	movlw	2
   888  0003A8  6FB7               	movwf	(main@mR+6)& (0+255),b
   889                           
   890                           ; BSR set to: 0
   891                           ;main.c: 92:     mR.period = PWMcycle;
   892  0003AA  C098  F0B8         	movff	main@PWMcycle,main@mR+7
   893  0003AE  C099  F0B9         	movff	main@PWMcycle+1,main@mR+8
   894                           
   895                           ; BSR set to: 0
   896                           
   897                           ;main.c: 94:     while (1) {
   898  0003B2  D0B5               	goto	l156
   899  0003B4                     
   900                           ; BSR set to: 0
   901                           ;main.c: 100:             read_IR(&Values);
   902                           
   903                           ; BSR set to: 0
   904  0003B4  0EA0               	movlw	low main@Values
   905  0003B6  6E06               	movwf	read_IR@Values,c
   906  0003B8  0E00               	movlw	high main@Values
   907  0003BA  6E07               	movwf	read_IR@Values+1,c
   908  0003BC  EC1B  F005         	call	_read_IR	;wreg free
   909                           
   910                           ;main.c: 104:             print_IR(&Values);
   911  0003C0  0EA0               	movlw	low main@Values
   912  0003C2  0100               	movlb	0	; () banked
   913  0003C4  6F82               	movwf	print_IR@Values& (0+255),b
   914  0003C6  0E00               	movlw	high main@Values
   915  0003C8  6F83               	movwf	(print_IR@Values+1)& (0+255),b
   916  0003CA  EC46  F00A         	call	_print_IR	;wreg free
   917                           
   918                           ;main.c: 105:             int threshold = 50;
   919  0003CE  0E00               	movlw	0
   920  0003D0  0100               	movlb	0	; () banked
   921  0003D2  6F9D               	movwf	(main@threshold+1)& (0+255),b
   922  0003D4  0E32               	movlw	50
   923  0003D6  6F9C               	movwf	main@threshold& (0+255),b
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 106:             int diff = Values.left - Values.right;
   927  0003D8  EE20  F0A2         	lfsr	2,main@Values+2
   928  0003DC  CFDE F095          	movff	postinc2,??_main
   929  0003E0  CFDD F096          	movff	postdec2,??_main+1
   930  0003E4  1F95               	comf	??_main& (0+255),f,b
   931  0003E6  1F96               	comf	(??_main+1)& (0+255),f,b
   932  0003E8  4B95               	infsnz	??_main& (0+255),f,b
   933  0003EA  2B96               	incf	(??_main+1)& (0+255),f,b
   934  0003EC  51A0               	movf	main@Values& (0+255),w,b
   935  0003EE  2595               	addwf	??_main& (0+255),w,b
   936  0003F0  6F9A               	movwf	main@diff& (0+255),b
   937  0003F2  51A1               	movf	(main@Values+1)& (0+255),w,b
   938  0003F4  2196               	addwfc	(??_main+1)& (0+255),w,b
   939  0003F6  6F9B               	movwf	(main@diff+1)& (0+255),b
   940                           
   941                           ; BSR set to: 0
   942                           ;main.c: 107:             if (Values.left > 256 | Values.right > 256) {
   943  0003F8  05A0               	decf	main@Values& (0+255),w,b
   944  0003FA  0E01               	movlw	1
   945  0003FC  59A1               	subwfb	(main@Values+1)& (0+255),w,b
   946  0003FE  B0D8               	btfsc	status,0,c
   947  000400  D005               	goto	u3310
   948                           
   949                           ; BSR set to: 0
   950  000402  05A2               	decf	(main@Values+2)& (0+255),w,b
   951  000404  0E01               	movlw	1
   952  000406  59A3               	subwfb	(main@Values+3)& (0+255),w,b
   953  000408  A0D8               	btfss	status,0,c
   954  00040A  D004               	goto	l147
   955  00040C                     u3310:
   956                           
   957                           ; BSR set to: 0
   958                           ;main.c: 108:                 threshold = 50;
   959                           
   960                           ; BSR set to: 0
   961  00040C  0E00               	movlw	0
   962  00040E  6F9D               	movwf	(main@threshold+1)& (0+255),b
   963  000410  0E32               	movlw	50
   964  000412  D003               	goto	L2
   965  000414                     l147:
   966                           
   967                           ; BSR set to: 0
   968                           ;main.c: 110:                 threshold = 10;
   969                           
   970                           ; BSR set to: 0
   971  000414  0E00               	movlw	0
   972  000416  6F9D               	movwf	(main@threshold+1)& (0+255),b
   973  000418  0E0A               	movlw	10
   974  00041A                     L2:
   975  00041A  6F9C               	movwf	main@threshold& (0+255),b
   976                           
   977                           ; BSR set to: 0
   978                           ;main.c: 113:             if (diff < -threshold) {
   979                           
   980                           ; BSR set to: 0
   981                           
   982                           ;main.c: 111:             }
   983  00041C  C09C  F095         	movff	main@threshold,??_main
   984  000420  C09D  F096         	movff	main@threshold+1,??_main+1
   985  000424  1F95               	comf	??_main& (0+255),f,b
   986  000426  1F96               	comf	(??_main+1)& (0+255),f,b
   987  000428  4B95               	infsnz	??_main& (0+255),f,b
   988  00042A  2B96               	incf	(??_main+1)& (0+255),f,b
   989  00042C  5195               	movf	??_main& (0+255),w,b
   990  00042E  5D9A               	subwf	main@diff& (0+255),w,b
   991  000430  519B               	movf	(main@diff+1)& (0+255),w,b
   992  000432  0A80               	xorlw	128
   993  000434  6F97               	movwf	(??_main+2)& (0+255),b
   994  000436  5196               	movf	(??_main+1)& (0+255),w,b
   995  000438  0A80               	xorlw	128
   996  00043A  5997               	subwfb	(??_main+2)& (0+255),w,b
   997  00043C  B0D8               	btfsc	status,0,c
   998  00043E  D026               	goto	l151
   999                           
  1000                           ; BSR set to: 0
  1001                           ;main.c: 115:                 stop(&mL, &mR);
  1002  000440  0EA8               	movlw	low main@mL
  1003  000442  6E1B               	movwf	stop@mL,c
  1004  000444  0E00               	movlw	high main@mL
  1005  000446  6E1C               	movwf	stop@mL+1,c
  1006  000448  0EB1               	movlw	low main@mR
  1007  00044A  6E1D               	movwf	stop@mR,c
  1008  00044C  0E00               	movlw	high main@mR
  1009  00044E  6E1E               	movwf	stop@mR+1,c
  1010  000450  ECEB  F00C         	call	_stop	;wreg free
  1011                           
  1012                           ;main.c: 116:                 turnLeft(&mL, &mR);
  1013  000454  0EA8               	movlw	low main@mL
  1014  000456  6E1B               	movwf	turnLeft@mL,c
  1015  000458  0E00               	movlw	high main@mL
  1016  00045A  6E1C               	movwf	turnLeft@mL+1,c
  1017  00045C  0EB1               	movlw	low main@mR
  1018  00045E  6E1D               	movwf	turnLeft@mR,c
  1019  000460  0E00               	movlw	high main@mR
  1020  000462  6E1E               	movwf	turnLeft@mR+1,c
  1021  000464  EC99  F00B         	call	_turnLeft	;wreg free
  1022                           
  1023                           ;main.c: 117:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  1024  000468  0E02               	movlw	2
  1025  00046A  0100               	movlb	0	; () banked
  1026  00046C  6F96               	movwf	(??_main+1)& (0+255),b
  1027  00046E  0E04               	movlw	4
  1028  000470  6F95               	movwf	??_main& (0+255),b
  1029  000472  0EBA               	movlw	186
  1030  000474                     u3467:
  1031  000474  2EE8               	decfsz	wreg,f,c
  1032  000476  D7FE               	bra	u3467
  1033  000478  2F95               	decfsz	??_main& (0+255),f,b
  1034  00047A  D7FC               	bra	u3467
  1035  00047C  2F96               	decfsz	(??_main+1)& (0+255),f,b
  1036  00047E  D7FA               	bra	u3467
  1037  000480  F000               	nop	
  1038                           
  1039                           ;main.c: 121:                 direction = 1;
  1040  000482  0E00               	movlw	0
  1041  000484  0100               	movlb	0	; () banked
  1042  000486  6F9F               	movwf	(main@direction+1)& (0+255),b
  1043  000488  0E01               	movlw	1
  1044  00048A  D04D               	goto	L3
  1045  00048C                     l151:
  1046                           
  1047                           ; BSR set to: 0
  1048                           
  1049                           ; BSR set to: 0
  1050  00048C  519A               	movf	main@diff& (0+255),w,b
  1051  00048E  5D9C               	subwf	main@threshold& (0+255),w,b
  1052  000490  519D               	movf	(main@threshold+1)& (0+255),w,b
  1053  000492  0A80               	xorlw	128
  1054  000494  6F95               	movwf	??_main& (0+255),b
  1055  000496  519B               	movf	(main@diff+1)& (0+255),w,b
  1056  000498  0A80               	xorlw	128
  1057  00049A  5995               	subwfb	??_main& (0+255),w,b
  1058  00049C  B0D8               	btfsc	status,0,c
  1059  00049E  D025               	goto	l153
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;main.c: 125:                 stop(&mL, &mR);
  1063  0004A0  0EA8               	movlw	low main@mL
  1064  0004A2  6E1B               	movwf	stop@mL,c
  1065  0004A4  0E00               	movlw	high main@mL
  1066  0004A6  6E1C               	movwf	stop@mL+1,c
  1067  0004A8  0EB1               	movlw	low main@mR
  1068  0004AA  6E1D               	movwf	stop@mR,c
  1069  0004AC  0E00               	movlw	high main@mR
  1070  0004AE  6E1E               	movwf	stop@mR+1,c
  1071  0004B0  ECEB  F00C         	call	_stop	;wreg free
  1072                           
  1073                           ;main.c: 126:                 turnRight(&mL, &mR);
  1074  0004B4  0EA8               	movlw	low main@mL
  1075  0004B6  6E1B               	movwf	turnRight@mL,c
  1076  0004B8  0E00               	movlw	high main@mL
  1077  0004BA  6E1C               	movwf	turnRight@mL+1,c
  1078  0004BC  0EB1               	movlw	low main@mR
  1079  0004BE  6E1D               	movwf	turnRight@mR,c
  1080  0004C0  0E00               	movlw	high main@mR
  1081  0004C2  6E1E               	movwf	turnRight@mR+1,c
  1082  0004C4  EC4E  F00B         	call	_turnRight	;wreg free
  1083                           
  1084                           ;main.c: 127:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  1085  0004C8  0E02               	movlw	2
  1086  0004CA  0100               	movlb	0	; () banked
  1087  0004CC  6F96               	movwf	(??_main+1)& (0+255),b
  1088  0004CE  0E04               	movlw	4
  1089  0004D0  6F95               	movwf	??_main& (0+255),b
  1090  0004D2  0EBA               	movlw	186
  1091  0004D4                     u3477:
  1092  0004D4  2EE8               	decfsz	wreg,f,c
  1093  0004D6  D7FE               	bra	u3477
  1094  0004D8  2F95               	decfsz	??_main& (0+255),f,b
  1095  0004DA  D7FC               	bra	u3477
  1096  0004DC  2F96               	decfsz	(??_main+1)& (0+255),f,b
  1097  0004DE  D7FA               	bra	u3477
  1098  0004E0  F000               	nop	
  1099                           
  1100                           ;main.c: 130:                 direction = -1;
  1101  0004E2  0100               	movlb	0	; () banked
  1102  0004E4  699E               	setf	main@direction& (0+255),b
  1103  0004E6  699F               	setf	(main@direction+1)& (0+255),b
  1104                           
  1105                           ;main.c: 131:             } else {
  1106  0004E8  D048               	goto	l158
  1107  0004EA                     l153:
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;main.c: 132:                 if ((Values.left > 150) && (Values.right > 150)) {
  1111                           
  1112                           ; BSR set to: 0
  1113  0004EA  51A1               	movf	(main@Values+1)& (0+255),w,b
  1114  0004EC  E104               	bnz	u3340
  1115  0004EE  0E97               	movlw	151
  1116  0004F0  5DA0               	subwf	main@Values& (0+255),w,b
  1117  0004F2  A0D8               	btfss	status,0,c
  1118  0004F4  D01A               	goto	l155
  1119  0004F6                     u3340:
  1120                           
  1121                           ; BSR set to: 0
  1122  0004F6  51A3               	movf	(main@Values+3)& (0+255),w,b
  1123  0004F8  E104               	bnz	u3350
  1124  0004FA  0E97               	movlw	151
  1125  0004FC  5DA2               	subwf	(main@Values+2)& (0+255),w,b
  1126  0004FE  A0D8               	btfss	status,0,c
  1127  000500  D014               	goto	l155
  1128  000502                     u3350:
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;main.c: 133:                     if (direction != 0) {
  1132  000502  519E               	movf	main@direction& (0+255),w,b
  1133  000504  119F               	iorwf	(main@direction+1)& (0+255),w,b
  1134  000506  B4D8               	btfsc	status,2,c
  1135  000508  D00A               	goto	l156
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 135:                         forwards(&mL, &mR);
  1139  00050A  0EA8               	movlw	low main@mL
  1140  00050C  6E1B               	movwf	forwards@mL,c
  1141  00050E  0E00               	movlw	high main@mL
  1142  000510  6E1C               	movwf	forwards@mL+1,c
  1143  000512  0EB1               	movlw	low main@mR
  1144  000514  6E1D               	movwf	forwards@mR,c
  1145  000516  0E00               	movlw	high main@mR
  1146  000518  6E1E               	movwf	forwards@mR+1,c
  1147  00051A  ECDD  F008         	call	_forwards	;wreg free
  1148  00051E                     l156:
  1149                           
  1150                           ;main.c: 139:                     direction = 0;
  1151  00051E  0E00               	movlw	0
  1152  000520  0100               	movlb	0	; () banked
  1153  000522  6F9F               	movwf	(main@direction+1)& (0+255),b
  1154  000524  0E00               	movlw	0
  1155  000526                     L3:
  1156  000526  6F9E               	movwf	main@direction& (0+255),b
  1157                           
  1158                           ;main.c: 140:                 } else {
  1159  000528  D028               	goto	l158
  1160  00052A                     l155:
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 141:                     if (direction != 1) {
  1164                           
  1165                           ; BSR set to: 0
  1166  00052A  059E               	decf	main@direction& (0+255),w,b
  1167  00052C  119F               	iorwf	(main@direction+1)& (0+255),w,b
  1168  00052E  B4D8               	btfsc	status,2,c
  1169  000530  D024               	goto	l158
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;main.c: 143:                         turnRight(&mL, &mR);
  1173  000532  0EA8               	movlw	low main@mL
  1174  000534  6E1B               	movwf	turnRight@mL,c
  1175  000536  0E00               	movlw	high main@mL
  1176  000538  6E1C               	movwf	turnRight@mL+1,c
  1177  00053A  0EB1               	movlw	low main@mR
  1178  00053C  6E1D               	movwf	turnRight@mR,c
  1179  00053E  0E00               	movlw	high main@mR
  1180  000540  6E1E               	movwf	turnRight@mR+1,c
  1181  000542  EC4E  F00B         	call	_turnRight	;wreg free
  1182                           
  1183                           ;main.c: 144:                         stop(&mL, &mR);
  1184  000546  0EA8               	movlw	low main@mL
  1185  000548  6E1B               	movwf	stop@mL,c
  1186  00054A  0E00               	movlw	high main@mL
  1187  00054C  6E1C               	movwf	stop@mL+1,c
  1188  00054E  0EB1               	movlw	low main@mR
  1189  000550  6E1D               	movwf	stop@mR,c
  1190  000552  0E00               	movlw	high main@mR
  1191  000554  6E1E               	movwf	stop@mR+1,c
  1192  000556  ECEB  F00C         	call	_stop	;wreg free
  1193                           
  1194                           ;main.c: 145:                         direction = -1;
  1195  00055A  0100               	movlb	0	; () banked
  1196  00055C  699E               	setf	main@direction& (0+255),b
  1197  00055E  699F               	setf	(main@direction+1)& (0+255),b
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;main.c: 146:                         _delay((unsigned long)((100)*(8000000/4000.0)));
  1201  000560  0E02               	movlw	2
  1202  000562  0100               	movlb	0	; () banked
  1203  000564  6F96               	movwf	(??_main+1)& (0+255),b
  1204  000566  0E04               	movlw	4
  1205  000568  6F95               	movwf	??_main& (0+255),b
  1206  00056A  0EBA               	movlw	186
  1207  00056C                     u3487:
  1208  00056C  2EE8               	decfsz	wreg,f,c
  1209  00056E  D7FE               	bra	u3487
  1210  000570  2F95               	decfsz	??_main& (0+255),f,b
  1211  000572  D7FC               	bra	u3487
  1212  000574  2F96               	decfsz	(??_main+1)& (0+255),f,b
  1213  000576  D7FA               	bra	u3487
  1214  000578  F000               	nop	
  1215  00057A                     l158:
  1216                           
  1217                           ;main.c: 99:         while (card_read == 0) {
  1218                           
  1219                           ;main.c: 154:         }
  1220                           
  1221                           ;main.c: 151:             }
  1222                           
  1223                           ;main.c: 150:                 }
  1224  00057A  0100               	movlb	0	; () banked
  1225  00057C  51BF               	movf	_card_read& (0+255),w,b	;volatile
  1226  00057E  B4D8               	btfsc	status,2,c
  1227  000580  D719               	goto	l146
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 159:         if (card_read == 1) {
  1231                           
  1232                           ; BSR set to: 0
  1233  000582  05BF               	decf	_card_read& (0+255),w,b	;volatile
  1234  000584  A4D8               	btfss	status,2,c
  1235  000586  D7CB               	goto	l156
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 160:             stop(&mL, &mR);
  1239  000588  0EA8               	movlw	low main@mL
  1240  00058A  6E1B               	movwf	stop@mL,c
  1241  00058C  0E00               	movlw	high main@mL
  1242  00058E  6E1C               	movwf	stop@mL+1,c
  1243  000590  0EB1               	movlw	low main@mR
  1244  000592  6E1D               	movwf	stop@mR,c
  1245  000594  0E00               	movlw	high main@mR
  1246  000596  6E1E               	movwf	stop@mR+1,c
  1247  000598  ECEB  F00C         	call	_stop	;wreg free
  1248                           
  1249                           ;main.c: 161:             print_RFID(&string_rfid[0], &string_rfid[0]);
  1250  00059C  0EE1               	movlw	low _string_rfid
  1251  00059E  6E0B               	movwf	print_RFID@pa,c
  1252  0005A0  0E00               	movlw	high _string_rfid
  1253  0005A2  6E0C               	movwf	print_RFID@pa+1,c
  1254  0005A4  0EE1               	movlw	low _string_rfid
  1255  0005A6  6E0D               	movwf	print_RFID@dis,c
  1256  0005A8  0E00               	movlw	high _string_rfid
  1257  0005AA  6E0E               	movwf	print_RFID@dis+1,c
  1258  0005AC  EC71  F00C         	call	_print_RFID	;wreg free
  1259                           
  1260                           ;main.c: 162:             _delay((unsigned long)((10)*(8000000/4000.0)));
  1261  0005B0  0E1A               	movlw	26
  1262  0005B2  0100               	movlb	0	; () banked
  1263  0005B4  6F95               	movwf	??_main& (0+255),b
  1264  0005B6  0EF8               	movlw	248
  1265  0005B8                     u3497:
  1266  0005B8  2EE8               	decfsz	wreg,f,c
  1267  0005BA  D7FE               	bra	u3497
  1268  0005BC  2F95               	decfsz	??_main& (0+255),f,b
  1269  0005BE  D7FC               	bra	u3497
  1270  0005C0  F000               	nop	
  1271                           
  1272                           ;main.c: 165:     }
  1273                           
  1274                           ;main.c: 164:         }
  1275  0005C2  D7AD               	goto	l156
  1276  0005C4                     __end_of_main:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           postinc0	equ	0xFEE
  1281                           wreg	equ	0xFE8
  1282                           postinc2	equ	0xFDE
  1283                           postdec2	equ	0xFDD
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function _turnRight *****************
  1287 ;; Defined at:
  1288 ;;		line 106 in file "motor.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  mL              2   26[COMRAM] PTR struct Motor
  1291 ;;		 -> main@mL(9), 
  1292 ;;  mR              2   28[COMRAM] PTR struct Motor
  1293 ;;		 -> main@mR(9), 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1305 ;;      Params:         4       0       0       0
  1306 ;;      Locals:         0       0       0       0
  1307 ;;      Temps:          1       0       0       0
  1308 ;;      Totals:         5       0       0       0
  1309 ;;Total ram usage:        5 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    3
  1312 ;; This function calls:
  1313 ;;		_setMotorPWM
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text1
  1320  00169C                     __ptext1:
  1321                           	opt stack 0
  1322  00169C                     _turnRight:
  1323                           	opt stack 27
  1324                           
  1325                           ;motor.c: 109:     mL->direction = 1;
  1326                           
  1327                           ;incstack = 0
  1328  00169C  EE20 F001          	lfsr	2,1
  1329  0016A0  501B               	movf	turnRight@mL,w,c
  1330  0016A2  26D9               	addwf	fsr2l,f,c
  1331  0016A4  501C               	movf	turnRight@mL+1,w,c
  1332  0016A6  22DA               	addwfc	fsr2h,f,c
  1333  0016A8  0E01               	movlw	1
  1334  0016AA  6EDF               	movwf	indf2,c
  1335                           
  1336                           ;motor.c: 110:     mR->direction = 0;
  1337  0016AC  EE20 F001          	lfsr	2,1
  1338  0016B0  501D               	movf	turnRight@mR,w,c
  1339  0016B2  26D9               	addwf	fsr2l,f,c
  1340  0016B4  501E               	movf	turnRight@mR+1,w,c
  1341  0016B6  22DA               	addwfc	fsr2h,f,c
  1342  0016B8  0E00               	movlw	0
  1343  0016BA  6EDF               	movwf	indf2,c
  1344                           
  1345                           ;motor.c: 111:     while (mL->power < 60 || mR->power < 60) {
  1346  0016BC  D02B               	goto	l263
  1347  0016BE                     
  1348                           ;motor.c: 112:         if (mL->power < 60) {
  1349  0016BE  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1350  0016C2  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1351  0016C6  0E3C               	movlw	60
  1352  0016C8  60DF               	cpfslt	indf2,c
  1353  0016CA  D005               	goto	l265
  1354                           
  1355                           ;motor.c: 113:             mL->power++;
  1356  0016CC  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1357  0016D0  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1358  0016D4  2ADF               	incf	indf2,f,c
  1359  0016D6                     l265:
  1360                           
  1361                           ;motor.c: 115:         if (mR->power < 60) {
  1362  0016D6  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1363  0016DA  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1364  0016DE  0E3C               	movlw	60
  1365  0016E0  60DF               	cpfslt	indf2,c
  1366  0016E2  D005               	goto	l266
  1367                           
  1368                           ;motor.c: 116:             mR->power++;
  1369  0016E4  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1370  0016E8  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1371  0016EC  2ADF               	incf	indf2,f,c
  1372  0016EE                     l266:
  1373                           
  1374                           ;motor.c: 118:         setMotorPWM(mL);
  1375  0016EE  C01B  F014         	movff	turnRight@mL,setMotorPWM@m
  1376  0016F2  C01C  F015         	movff	turnRight@mL+1,setMotorPWM@m+1
  1377  0016F6  ECE6  F006         	call	_setMotorPWM	;wreg free
  1378                           
  1379                           ;motor.c: 119:         setMotorPWM(mR);
  1380  0016FA  C01D  F014         	movff	turnRight@mR,setMotorPWM@m
  1381  0016FE  C01E  F015         	movff	turnRight@mR+1,setMotorPWM@m+1
  1382  001702  ECE6  F006         	call	_setMotorPWM	;wreg free
  1383                           
  1384                           ;motor.c: 120:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1385  001706  0E0D               	movlw	13
  1386  001708  6E1F               	movwf	??_turnRight& (0+255),c
  1387  00170A  0EFC               	movlw	252
  1388  00170C                     u3507:
  1389  00170C  2EE8               	decfsz	wreg,f,c
  1390  00170E  D7FE               	bra	u3507
  1391  001710  2E1F               	decfsz	??_turnRight& (0+255),f,c
  1392  001712  D7FC               	bra	u3507
  1393  001714                     l263:
  1394                           
  1395                           ;motor.c: 111:     while (mL->power < 60 || mR->power < 60) {
  1396  001714  C01B  FFD9         	movff	turnRight@mL,fsr2l
  1397  001718  C01C  FFDA         	movff	turnRight@mL+1,fsr2h
  1398  00171C  0E3B               	movlw	59
  1399  00171E  64DF               	cpfsgt	indf2,c
  1400  001720  D7CE               	goto	l264
  1401  001722  C01D  FFD9         	movff	turnRight@mR,fsr2l
  1402  001726  C01E  FFDA         	movff	turnRight@mR+1,fsr2h
  1403  00172A  0E3B               	movlw	59
  1404  00172C  64DF               	cpfsgt	indf2,c
  1405  00172E  D7C7               	goto	l264
  1406  001730  0012               	return	
  1407  001732                     __end_of_turnRight:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           indf2	equ	0xFDF
  1414                           postinc2	equ	0xFDE
  1415                           postdec2	equ	0xFDD
  1416                           fsr2h	equ	0xFDA
  1417                           fsr2l	equ	0xFD9
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _turnLeft *****************
  1421 ;; Defined at:
  1422 ;;		line 88 in file "motor.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;  mL              2   26[COMRAM] PTR struct Motor
  1425 ;;		 -> main@mL(9), 
  1426 ;;  mR              2   28[COMRAM] PTR struct Motor
  1427 ;;		 -> main@mR(9), 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1439 ;;      Params:         4       0       0       0
  1440 ;;      Locals:         0       0       0       0
  1441 ;;      Temps:          1       0       0       0
  1442 ;;      Totals:         5       0       0       0
  1443 ;;Total ram usage:        5 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    3
  1446 ;; This function calls:
  1447 ;;		_setMotorPWM
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text2
  1454  001732                     __ptext2:
  1455                           	opt stack 0
  1456  001732                     _turnLeft:
  1457                           	opt stack 27
  1458                           
  1459                           ;motor.c: 91:     mL->direction = 0;
  1460                           
  1461                           ;incstack = 0
  1462  001732  EE20 F001          	lfsr	2,1
  1463  001736  501B               	movf	turnLeft@mL,w,c
  1464  001738  26D9               	addwf	fsr2l,f,c
  1465  00173A  501C               	movf	turnLeft@mL+1,w,c
  1466  00173C  22DA               	addwfc	fsr2h,f,c
  1467  00173E  0E00               	movlw	0
  1468  001740  6EDF               	movwf	indf2,c
  1469                           
  1470                           ;motor.c: 92:     mR->direction = 1;
  1471  001742  EE20 F001          	lfsr	2,1
  1472  001746  501D               	movf	turnLeft@mR,w,c
  1473  001748  26D9               	addwf	fsr2l,f,c
  1474  00174A  501E               	movf	turnLeft@mR+1,w,c
  1475  00174C  22DA               	addwfc	fsr2h,f,c
  1476  00174E  0E01               	movlw	1
  1477  001750  6EDF               	movwf	indf2,c
  1478                           
  1479                           ;motor.c: 93:     while (mL->power < 60 || mR->power < 60) {
  1480  001752  D02B               	goto	l255
  1481  001754                     
  1482                           ;motor.c: 94:         if (mL->power < 60) {
  1483  001754  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1484  001758  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1485  00175C  0E3C               	movlw	60
  1486  00175E  60DF               	cpfslt	indf2,c
  1487  001760  D005               	goto	l257
  1488                           
  1489                           ;motor.c: 95:             mL->power++;
  1490  001762  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1491  001766  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1492  00176A  2ADF               	incf	indf2,f,c
  1493  00176C                     l257:
  1494                           
  1495                           ;motor.c: 97:         if (mR->power < 60) {
  1496  00176C  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1497  001770  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1498  001774  0E3C               	movlw	60
  1499  001776  60DF               	cpfslt	indf2,c
  1500  001778  D005               	goto	l258
  1501                           
  1502                           ;motor.c: 98:             mR->power++;
  1503  00177A  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1504  00177E  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1505  001782  2ADF               	incf	indf2,f,c
  1506  001784                     l258:
  1507                           
  1508                           ;motor.c: 100:         setMotorPWM(mL);
  1509  001784  C01B  F014         	movff	turnLeft@mL,setMotorPWM@m
  1510  001788  C01C  F015         	movff	turnLeft@mL+1,setMotorPWM@m+1
  1511  00178C  ECE6  F006         	call	_setMotorPWM	;wreg free
  1512                           
  1513                           ;motor.c: 101:         setMotorPWM(mR);
  1514  001790  C01D  F014         	movff	turnLeft@mR,setMotorPWM@m
  1515  001794  C01E  F015         	movff	turnLeft@mR+1,setMotorPWM@m+1
  1516  001798  ECE6  F006         	call	_setMotorPWM	;wreg free
  1517                           
  1518                           ;motor.c: 102:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1519  00179C  0E0D               	movlw	13
  1520  00179E  6E1F               	movwf	??_turnLeft& (0+255),c
  1521  0017A0  0EFC               	movlw	252
  1522  0017A2                     u3517:
  1523  0017A2  2EE8               	decfsz	wreg,f,c
  1524  0017A4  D7FE               	bra	u3517
  1525  0017A6  2E1F               	decfsz	??_turnLeft& (0+255),f,c
  1526  0017A8  D7FC               	bra	u3517
  1527  0017AA                     l255:
  1528                           
  1529                           ;motor.c: 93:     while (mL->power < 60 || mR->power < 60) {
  1530  0017AA  C01B  FFD9         	movff	turnLeft@mL,fsr2l
  1531  0017AE  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
  1532  0017B2  0E3B               	movlw	59
  1533  0017B4  64DF               	cpfsgt	indf2,c
  1534  0017B6  D7CE               	goto	l256
  1535  0017B8  C01D  FFD9         	movff	turnLeft@mR,fsr2l
  1536  0017BC  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
  1537  0017C0  0E3B               	movlw	59
  1538  0017C2  64DF               	cpfsgt	indf2,c
  1539  0017C4  D7C7               	goto	l256
  1540  0017C6  0012               	return	
  1541  0017C8                     __end_of_turnLeft:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           indf2	equ	0xFDF
  1548                           postinc2	equ	0xFDE
  1549                           postdec2	equ	0xFDD
  1550                           fsr2h	equ	0xFDA
  1551                           fsr2l	equ	0xFD9
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function _stop *****************
  1555 ;; Defined at:
  1556 ;;		line 72 in file "motor.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  mL              2   26[COMRAM] PTR struct Motor
  1559 ;;		 -> main@mL(9), 
  1560 ;;  mR              2   28[COMRAM] PTR struct Motor
  1561 ;;		 -> main@mR(9), 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;		None
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1573 ;;      Params:         4       0       0       0
  1574 ;;      Locals:         0       0       0       0
  1575 ;;      Temps:          1       0       0       0
  1576 ;;      Totals:         5       0       0       0
  1577 ;;Total ram usage:        5 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    3
  1580 ;; This function calls:
  1581 ;;		_setMotorPWM
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text3
  1588  0019D6                     __ptext3:
  1589                           	opt stack 0
  1590  0019D6                     _stop:
  1591                           	opt stack 27
  1592                           
  1593                           ;motor.c: 75:     while (mL->power > 0 || mR->power > 0) {
  1594                           
  1595                           ;incstack = 0
  1596  0019D6  D02B               	goto	l247
  1597  0019D8                     
  1598                           ;motor.c: 76:         if (mL->power > 0) {
  1599  0019D8  C01B  FFD9         	movff	stop@mL,fsr2l
  1600  0019DC  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1601  0019E0  50DF               	movf	indf2,w,c
  1602  0019E2  B4D8               	btfsc	status,2,c
  1603  0019E4  D005               	goto	l249
  1604                           
  1605                           ;motor.c: 77:             mL->power--;
  1606  0019E6  C01B  FFD9         	movff	stop@mL,fsr2l
  1607  0019EA  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1608  0019EE  06DF               	decf	indf2,f,c
  1609  0019F0                     l249:
  1610                           
  1611                           ;motor.c: 79:         if (mR->power > 0) {
  1612  0019F0  C01D  FFD9         	movff	stop@mR,fsr2l
  1613  0019F4  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1614  0019F8  50DF               	movf	indf2,w,c
  1615  0019FA  B4D8               	btfsc	status,2,c
  1616  0019FC  D005               	goto	l250
  1617                           
  1618                           ;motor.c: 80:             mR->power--;
  1619  0019FE  C01D  FFD9         	movff	stop@mR,fsr2l
  1620  001A02  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1621  001A06  06DF               	decf	indf2,f,c
  1622  001A08                     l250:
  1623                           
  1624                           ;motor.c: 82:         setMotorPWM(mL);
  1625  001A08  C01B  F014         	movff	stop@mL,setMotorPWM@m
  1626  001A0C  C01C  F015         	movff	stop@mL+1,setMotorPWM@m+1
  1627  001A10  ECE6  F006         	call	_setMotorPWM	;wreg free
  1628                           
  1629                           ;motor.c: 83:         setMotorPWM(mR);
  1630  001A14  C01D  F014         	movff	stop@mR,setMotorPWM@m
  1631  001A18  C01E  F015         	movff	stop@mR+1,setMotorPWM@m+1
  1632  001A1C  ECE6  F006         	call	_setMotorPWM	;wreg free
  1633                           
  1634                           ;motor.c: 84:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1635  001A20  0E0D               	movlw	13
  1636  001A22  6E1F               	movwf	??_stop& (0+255),c
  1637  001A24  0EFC               	movlw	252
  1638  001A26                     u3527:
  1639  001A26  2EE8               	decfsz	wreg,f,c
  1640  001A28  D7FE               	bra	u3527
  1641  001A2A  2E1F               	decfsz	??_stop& (0+255),f,c
  1642  001A2C  D7FC               	bra	u3527
  1643  001A2E                     l247:
  1644                           
  1645                           ;motor.c: 75:     while (mL->power > 0 || mR->power > 0) {
  1646  001A2E  C01B  FFD9         	movff	stop@mL,fsr2l
  1647  001A32  C01C  FFDA         	movff	stop@mL+1,fsr2h
  1648  001A36  50DF               	movf	indf2,w,c
  1649  001A38  A4D8               	btfss	status,2,c
  1650  001A3A  D7CE               	goto	l248
  1651  001A3C  C01D  FFD9         	movff	stop@mR,fsr2l
  1652  001A40  C01E  FFDA         	movff	stop@mR+1,fsr2h
  1653  001A44  50DF               	movf	indf2,w,c
  1654  001A46  B4D8               	btfsc	status,2,c
  1655  001A48  0012               	return	
  1656  001A4A  D7C6               	goto	l248
  1657  001A4C                     __end_of_stop:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           indf2	equ	0xFDF
  1664                           postinc2	equ	0xFDE
  1665                           postdec2	equ	0xFDD
  1666                           fsr2h	equ	0xFDA
  1667                           fsr2l	equ	0xFD9
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _read_IR *****************
  1671 ;; Defined at:
  1672 ;;		line 38 in file "ir.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  Values          2    5[COMRAM] PTR struct Sensor_ir
  1675 ;;		 -> main@Values(8), 
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1687 ;;      Params:         2       0       0       0
  1688 ;;      Locals:         0       0       0       0
  1689 ;;      Temps:          4       0       0       0
  1690 ;;      Totals:         6       0       0       0
  1691 ;;Total ram usage:        6 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    1
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_main
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text4
  1702  000A36                     __ptext4:
  1703                           	opt stack 0
  1704  000A36                     _read_IR:
  1705                           	opt stack 29
  1706                           
  1707                           ;ir.c: 39:     Values->left_prev = Values->left;
  1708                           
  1709                           ;incstack = 0
  1710  000A36  C006  FFD9         	movff	read_IR@Values,fsr2l
  1711  000A3A  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1712  000A3E  EE10 F004          	lfsr	1,4
  1713  000A42  5006               	movf	read_IR@Values,w,c
  1714  000A44  26E1               	addwf	fsr1l,f,c
  1715  000A46  5007               	movf	read_IR@Values+1,w,c
  1716  000A48  22E2               	addwfc	fsr1h,f,c
  1717  000A4A  CFDE FFE6          	movff	postinc2,postinc1
  1718  000A4E  CFDD FFE5          	movff	postdec2,postdec1
  1719                           
  1720                           ;ir.c: 40:     Values->right_prev = Values->right;
  1721  000A52  EE20 F002          	lfsr	2,2
  1722  000A56  5006               	movf	read_IR@Values,w,c
  1723  000A58  26D9               	addwf	fsr2l,f,c
  1724  000A5A  5007               	movf	read_IR@Values+1,w,c
  1725  000A5C  22DA               	addwfc	fsr2h,f,c
  1726  000A5E  EE10 F006          	lfsr	1,6
  1727  000A62  5006               	movf	read_IR@Values,w,c
  1728  000A64  26E1               	addwf	fsr1l,f,c
  1729  000A66  5007               	movf	read_IR@Values+1,w,c
  1730  000A68  22E2               	addwfc	fsr1h,f,c
  1731  000A6A  CFDE FFE6          	movff	postinc2,postinc1
  1732  000A6E  CFDD FFE5          	movff	postdec2,postdec1
  1733                           
  1734                           ;ir.c: 41:     Values->left = ((CAP2BUFH << 8) | (CAP2BUFL));
  1735  000A72  5066               	movf	3942,w,c	;volatile
  1736  000A74  CF67 F008          	movff	3943,??_read_IR	;volatile
  1737  000A78  6A09               	clrf	(??_read_IR+1)& (0+255),c
  1738  000A7A  C008  F009         	movff	??_read_IR,??_read_IR+1
  1739  000A7E  6A08               	clrf	??_read_IR,c
  1740  000A80  1208               	iorwf	??_read_IR,f,c
  1741  000A82  0E00               	movlw	0
  1742  000A84  1209               	iorwf	??_read_IR+1,f,c
  1743  000A86  C006  FFD9         	movff	read_IR@Values,fsr2l
  1744  000A8A  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1745  000A8E  C008  FFDE         	movff	??_read_IR,postinc2
  1746  000A92  C009  FFDD         	movff	??_read_IR+1,postdec2
  1747                           
  1748                           ;ir.c: 42:     Values->right = ((CAP1BUFH << 8) | (CAP1BUFL));
  1749  000A96  5068               	movf	3944,w,c	;volatile
  1750  000A98  CF69 F008          	movff	3945,??_read_IR	;volatile
  1751  000A9C  6A09               	clrf	(??_read_IR+1)& (0+255),c
  1752  000A9E  C008  F009         	movff	??_read_IR,??_read_IR+1
  1753  000AA2  6A08               	clrf	??_read_IR,c
  1754  000AA4  1208               	iorwf	??_read_IR,f,c
  1755  000AA6  0E00               	movlw	0
  1756  000AA8  1209               	iorwf	??_read_IR+1,f,c
  1757  000AAA  EE20 F002          	lfsr	2,2
  1758  000AAE  5006               	movf	read_IR@Values,w,c
  1759  000AB0  26D9               	addwf	fsr2l,f,c
  1760  000AB2  5007               	movf	read_IR@Values+1,w,c
  1761  000AB4  22DA               	addwfc	fsr2h,f,c
  1762  000AB6  C008  FFDE         	movff	??_read_IR,postinc2
  1763  000ABA  C009  FFDD         	movff	??_read_IR+1,postdec2
  1764                           
  1765                           ;ir.c: 44:     if ((Values->left == Values->left_prev) && (Values->left <= 200)) {
  1766  000ABE  EE20 F004          	lfsr	2,4
  1767  000AC2  5006               	movf	read_IR@Values,w,c
  1768  000AC4  26D9               	addwf	fsr2l,f,c
  1769  000AC6  5007               	movf	read_IR@Values+1,w,c
  1770  000AC8  22DA               	addwfc	fsr2h,f,c
  1771  000ACA  C006  FFE1         	movff	read_IR@Values,fsr1l
  1772  000ACE  C007  FFE2         	movff	read_IR@Values+1,fsr1h
  1773  000AD2  50DE               	movf	postinc2,w,c
  1774  000AD4  18E6               	xorwf	postinc1,w,c
  1775  000AD6  E117               	bnz	l2661
  1776  000AD8  50DE               	movf	postinc2,w,c
  1777  000ADA  18E6               	xorwf	postinc1,w,c
  1778  000ADC  A4D8               	btfss	status,2,c
  1779  000ADE  D013               	goto	l194
  1780  000AE0  C006  FFD9         	movff	read_IR@Values,fsr2l
  1781  000AE4  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1782  000AE8  0E01               	movlw	1
  1783  000AEA  50DB               	movf	plusw2,w,c
  1784  000AEC  E10C               	bnz	l2661
  1785  000AEE  0EC9               	movlw	201
  1786  000AF0  5CDE               	subwf	postinc2,w,c
  1787  000AF2  B0D8               	btfsc	status,0,c
  1788  000AF4  D008               	goto	l194
  1789                           
  1790                           ;ir.c: 45:         Values->left = 0;
  1791  000AF6  C006  FFD9         	movff	read_IR@Values,fsr2l
  1792  000AFA  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1793  000AFE  0E00               	movlw	0
  1794  000B00  6EDE               	movwf	postinc2,c
  1795  000B02  0E00               	movlw	0
  1796  000B04  6EDD               	movwf	postdec2,c
  1797  000B06                     l194:
  1798  000B06                     l2661:
  1799                           
  1800                           ;ir.c: 48:     if ((Values->right == Values->right_prev) && (Values->right <= 200)) {
  1801  000B06  EE20 F006          	lfsr	2,6
  1802  000B0A  5006               	movf	read_IR@Values,w,c
  1803  000B0C  26D9               	addwf	fsr2l,f,c
  1804  000B0E  5007               	movf	read_IR@Values+1,w,c
  1805  000B10  22DA               	addwfc	fsr2h,f,c
  1806  000B12  EE10 F002          	lfsr	1,2
  1807  000B16  5006               	movf	read_IR@Values,w,c
  1808  000B18  26E1               	addwf	fsr1l,f,c
  1809  000B1A  5007               	movf	read_IR@Values+1,w,c
  1810  000B1C  22E2               	addwfc	fsr1h,f,c
  1811  000B1E  50DE               	movf	postinc2,w,c
  1812  000B20  18E6               	xorwf	postinc1,w,c
  1813  000B22  E11B               	bnz	l195
  1814  000B24  50DE               	movf	postinc2,w,c
  1815  000B26  18E6               	xorwf	postinc1,w,c
  1816  000B28  A4D8               	btfss	status,2,c
  1817  000B2A  D017               	goto	l195
  1818  000B2C  EE20 F002          	lfsr	2,2
  1819  000B30  5006               	movf	read_IR@Values,w,c
  1820  000B32  26D9               	addwf	fsr2l,f,c
  1821  000B34  5007               	movf	read_IR@Values+1,w,c
  1822  000B36  22DA               	addwfc	fsr2h,f,c
  1823  000B38  0E01               	movlw	1
  1824  000B3A  50DB               	movf	plusw2,w,c
  1825  000B3C  E10E               	bnz	l195
  1826  000B3E  0EC9               	movlw	201
  1827  000B40  5CDE               	subwf	postinc2,w,c
  1828  000B42  B0D8               	btfsc	status,0,c
  1829  000B44  D00A               	goto	l195
  1830                           
  1831                           ;ir.c: 49:         Values->right = 0;
  1832  000B46  EE20 F002          	lfsr	2,2
  1833  000B4A  5006               	movf	read_IR@Values,w,c
  1834  000B4C  26D9               	addwf	fsr2l,f,c
  1835  000B4E  5007               	movf	read_IR@Values+1,w,c
  1836  000B50  22DA               	addwfc	fsr2h,f,c
  1837  000B52  0E00               	movlw	0
  1838  000B54  6EDE               	movwf	postinc2,c
  1839  000B56  0E00               	movlw	0
  1840  000B58  6EDD               	movwf	postdec2,c
  1841  000B5A                     l195:
  1842                           
  1843                           ;ir.c: 52:     Values->left = Values->left / 64;
  1844  000B5A  C006  FFD9         	movff	read_IR@Values,fsr2l
  1845  000B5E  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1846  000B62  CFDE F008          	movff	postinc2,??_read_IR
  1847  000B66  CFDD F009          	movff	postdec2,??_read_IR+1
  1848  000B6A  0E06               	movlw	6
  1849  000B6C  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  1850  000B6E                     u2135:
  1851  000B6E  90D8               	bcf	status,0,c
  1852  000B70  3209               	rrcf	??_read_IR+1,f,c
  1853  000B72  3208               	rrcf	??_read_IR,f,c
  1854  000B74  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  1855  000B76  D7FB               	goto	u2135
  1856  000B78  C006  FFD9         	movff	read_IR@Values,fsr2l
  1857  000B7C  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1858  000B80  C008  FFDE         	movff	??_read_IR,postinc2
  1859  000B84  C009  FFDD         	movff	??_read_IR+1,postdec2
  1860                           
  1861                           ;ir.c: 53:     if (Values->left > 200) {
  1862  000B88  C006  FFD9         	movff	read_IR@Values,fsr2l
  1863  000B8C  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1864  000B90  0E01               	movlw	1
  1865  000B92  50DB               	movf	plusw2,w,c
  1866  000B94  E104               	bnz	u2140
  1867  000B96  0EC9               	movlw	201
  1868  000B98  5CDE               	subwf	postinc2,w,c
  1869  000B9A  A0D8               	btfss	status,0,c
  1870  000B9C  D008               	goto	l196
  1871  000B9E                     u2140:
  1872                           
  1873                           ;ir.c: 54:         Values->left = 200;
  1874  000B9E  C006  FFD9         	movff	read_IR@Values,fsr2l
  1875  000BA2  C007  FFDA         	movff	read_IR@Values+1,fsr2h
  1876  000BA6  0EC8               	movlw	200
  1877  000BA8  6EDE               	movwf	postinc2,c
  1878  000BAA  0E00               	movlw	0
  1879  000BAC  6EDD               	movwf	postdec2,c
  1880  000BAE                     l196:
  1881                           
  1882                           ;ir.c: 57:     Values->right = Values->right / 64;
  1883  000BAE  EE20 F002          	lfsr	2,2
  1884  000BB2  5006               	movf	read_IR@Values,w,c
  1885  000BB4  26D9               	addwf	fsr2l,f,c
  1886  000BB6  5007               	movf	read_IR@Values+1,w,c
  1887  000BB8  22DA               	addwfc	fsr2h,f,c
  1888  000BBA  CFDE F008          	movff	postinc2,??_read_IR
  1889  000BBE  CFDD F009          	movff	postdec2,??_read_IR+1
  1890  000BC2  0E06               	movlw	6
  1891  000BC4  6E0A               	movwf	(??_read_IR+2)& (0+255),c
  1892  000BC6                     u2155:
  1893  000BC6  90D8               	bcf	status,0,c
  1894  000BC8  3209               	rrcf	??_read_IR+1,f,c
  1895  000BCA  3208               	rrcf	??_read_IR,f,c
  1896  000BCC  2E0A               	decfsz	(??_read_IR+2)& (0+255),f,c
  1897  000BCE  D7FB               	goto	u2155
  1898  000BD0  EE20 F002          	lfsr	2,2
  1899  000BD4  5006               	movf	read_IR@Values,w,c
  1900  000BD6  26D9               	addwf	fsr2l,f,c
  1901  000BD8  5007               	movf	read_IR@Values+1,w,c
  1902  000BDA  22DA               	addwfc	fsr2h,f,c
  1903  000BDC  C008  FFDE         	movff	??_read_IR,postinc2
  1904  000BE0  C009  FFDD         	movff	??_read_IR+1,postdec2
  1905                           
  1906                           ;ir.c: 58:     if (Values->right > 200) {
  1907  000BE4  EE20 F002          	lfsr	2,2
  1908  000BE8  5006               	movf	read_IR@Values,w,c
  1909  000BEA  26D9               	addwf	fsr2l,f,c
  1910  000BEC  5007               	movf	read_IR@Values+1,w,c
  1911  000BEE  22DA               	addwfc	fsr2h,f,c
  1912  000BF0  0E01               	movlw	1
  1913  000BF2  50DB               	movf	plusw2,w,c
  1914  000BF4  E104               	bnz	u2160
  1915  000BF6  0EC9               	movlw	201
  1916  000BF8  5CDE               	subwf	postinc2,w,c
  1917  000BFA  A0D8               	btfss	status,0,c
  1918  000BFC  0012               	return	
  1919  000BFE                     u2160:
  1920                           
  1921                           ;ir.c: 59:         Values->right = 200;
  1922  000BFE  EE20 F002          	lfsr	2,2
  1923  000C02  5006               	movf	read_IR@Values,w,c
  1924  000C04  26D9               	addwf	fsr2l,f,c
  1925  000C06  5007               	movf	read_IR@Values+1,w,c
  1926  000C08  22DA               	addwfc	fsr2h,f,c
  1927  000C0A  0EC8               	movlw	200
  1928  000C0C  6EDE               	movwf	postinc2,c
  1929  000C0E  0E00               	movlw	0
  1930  000C10  6EDD               	movwf	postdec2,c
  1931  000C12  0012               	return	
  1932  000C14                     __end_of_read_IR:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postinc1	equ	0xFE6
  1939                           postdec1	equ	0xFE5
  1940                           fsr1h	equ	0xFE2
  1941                           fsr1l	equ	0xFE1
  1942                           indf2	equ	0xFDF
  1943                           postinc2	equ	0xFDE
  1944                           postdec2	equ	0xFDD
  1945                           plusw2	equ	0xFDB
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _print_RFID *****************
  1951 ;; Defined at:
  1952 ;;		line 25 in file "rfid.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  pa              2   10[COMRAM] PTR unsigned char 
  1955 ;;		 -> string_rfid(17), 
  1956 ;;  dis             2   12[COMRAM] PTR unsigned char 
  1957 ;;		 -> string_rfid(17), 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1969 ;;      Params:         4       0       0       0
  1970 ;;      Locals:         0       0       0       0
  1971 ;;      Temps:          6       0       0       0
  1972 ;;      Totals:        10       0       0       0
  1973 ;;Total ram usage:       10 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    5
  1976 ;; This function calls:
  1977 ;;		_LCD_clear
  1978 ;;		_LCD_line
  1979 ;;		_LCD_send
  1980 ;; This function is called by:
  1981 ;;		_main
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text5
  1986  0018E2                     __ptext5:
  1987                           	opt stack 0
  1988  0018E2                     _print_RFID:
  1989                           	opt stack 25
  1990                           
  1991                           ;rfid.c: 27:     LCD_clear();
  1992                           
  1993                           ;incstack = 0
  1994  0018E2  EC4C  F00E         	call	_LCD_clear	;wreg free
  1995                           
  1996                           ;rfid.c: 28:     LCD_line(1);
  1997  0018E6  0E01               	movlw	1
  1998  0018E8  ECE8  F00D         	call	_LCD_line
  1999                           
  2000                           ;rfid.c: 29:     while (*pa != 0x03) {
  2001  0018EC  D002               	goto	l330
  2002  0018EE                     
  2003                           ;rfid.c: 30:         pa++;
  2004  0018EE  4A0B               	infsnz	print_RFID@pa,f,c
  2005  0018F0  2A0C               	incf	print_RFID@pa+1,f,c
  2006  0018F2                     l330:
  2007                           
  2008                           ;rfid.c: 29:     while (*pa != 0x03) {
  2009  0018F2  C00B  FFD9         	movff	print_RFID@pa,fsr2l
  2010  0018F6  C00C  FFDA         	movff	print_RFID@pa+1,fsr2h
  2011  0018FA  0E03               	movlw	3
  2012  0018FC  18DE               	xorwf	postinc2,w,c
  2013  0018FE  B4D8               	btfsc	status,2,c
  2014  001900  D012               	goto	l333
  2015  001902  D7F5               	goto	l331
  2016  001904                     
  2017                           ;rfid.c: 36:         LCD_send(*(dis + 1), 1);
  2018  001904  0E01               	movlw	1
  2019  001906  6E08               	movwf	LCD_send@type,c
  2020  001908  EE20 F001          	lfsr	2,1
  2021  00190C  500D               	movf	print_RFID@dis,w,c
  2022  00190E  26D9               	addwf	fsr2l,f,c
  2023  001910  500E               	movf	print_RFID@dis+1,w,c
  2024  001912  22DA               	addwfc	fsr2h,f,c
  2025  001914  50DF               	movf	indf2,w,c
  2026  001916  EC00  F00E         	call	_LCD_send
  2027                           
  2028                           ;rfid.c: 37:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  2029  00191A  0E21               	movlw	33
  2030  00191C                     u3537:
  2031  00191C  2EE8               	decfsz	wreg,f,c
  2032  00191E  D7FE               	bra	u3537
  2033  001920  F000               	nop	
  2034                           
  2035                           ;rfid.c: 39:         dis++;
  2036  001922  4A0D               	infsnz	print_RFID@dis,f,c
  2037  001924  2A0E               	incf	print_RFID@dis+1,f,c
  2038  001926                     l333:
  2039                           
  2040                           ;rfid.c: 34:     while ((dis + 1) < (pa - 2)) {
  2041  001926  0EFE               	movlw	254
  2042  001928  6E0F               	movwf	??_print_RFID& (0+255),c
  2043  00192A  0EFF               	movlw	255
  2044  00192C  6E10               	movwf	(??_print_RFID+1)& (0+255),c
  2045  00192E  C00B  F011         	movff	print_RFID@pa,??_print_RFID+2
  2046  001932  C00C  F012         	movff	print_RFID@pa+1,??_print_RFID+3
  2047  001936  500F               	movf	??_print_RFID,w,c
  2048  001938  2611               	addwf	??_print_RFID+2,f,c
  2049  00193A  5010               	movf	??_print_RFID+1,w,c
  2050  00193C  2212               	addwfc	??_print_RFID+3,f,c
  2051  00193E  0E01               	movlw	1
  2052  001940  240D               	addwf	print_RFID@dis,w,c
  2053  001942  6E13               	movwf	(??_print_RFID+4)& (0+255),c
  2054  001944  0E00               	movlw	0
  2055  001946  200E               	addwfc	print_RFID@dis+1,w,c
  2056  001948  6E14               	movwf	(??_print_RFID+5)& (0+255),c
  2057  00194A  5011               	movf	??_print_RFID+2,w,c
  2058  00194C  5C13               	subwf	??_print_RFID+4,w,c
  2059  00194E  5012               	movf	??_print_RFID+3,w,c
  2060  001950  5814               	subwfb	??_print_RFID+5,w,c
  2061  001952  A0D8               	btfss	status,0,c
  2062  001954  D7D7               	goto	l334
  2063                           
  2064                           ;rfid.c: 41:     LCD_line(2);
  2065  001956  0E02               	movlw	2
  2066  001958  ECE8  F00D         	call	_LCD_line
  2067  00195C  0012               	return		;funcret
  2068  00195E                     __end_of_print_RFID:
  2069                           	opt stack 0
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           postinc1	equ	0xFE6
  2075                           postdec1	equ	0xFE5
  2076                           fsr1h	equ	0xFE2
  2077                           fsr1l	equ	0xFE1
  2078                           indf2	equ	0xFDF
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           plusw2	equ	0xFDB
  2082                           fsr2h	equ	0xFDA
  2083                           fsr2l	equ	0xFD9
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _print_IR *****************
  2087 ;; Defined at:
  2088 ;;		line 123 in file "lcd.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  Values          2   34[BANK0 ] PTR struct Sensor_ir
  2091 ;;		 -> main@Values(8), 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  buf            16   37[BANK0 ] unsigned char [16]
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2103 ;;      Params:         0       2       0       0
  2104 ;;      Locals:         0      16       0       0
  2105 ;;      Temps:          0       1       0       0
  2106 ;;      Totals:         0      19       0       0
  2107 ;;Total ram usage:       19 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    9
  2110 ;; This function calls:
  2111 ;;		_LCD_clear
  2112 ;;		_LCD_line
  2113 ;;		_LCD_string
  2114 ;;		_sprintf
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text6
  2121  00148C                     __ptext6:
  2122                           	opt stack 0
  2123  00148C                     _print_IR:
  2124                           	opt stack 21
  2125                           
  2126                           ;lcd.c: 124:     LCD_clear();
  2127                           
  2128                           ;incstack = 0
  2129  00148C  EC4C  F00E         	call	_LCD_clear	;wreg free
  2130                           
  2131                           ;lcd.c: 125:     char buf[16];;lcd.c: 126:     LCD_line(1);
  2132  001490  0E01               	movlw	1
  2133  001492  ECE8  F00D         	call	_LCD_line
  2134                           
  2135                           ;lcd.c: 127:     sprintf(buf, "Left: %u", Values->left);
  2136  001496  0E85               	movlw	low print_IR@buf
  2137  001498  0100               	movlb	0	; () banked
  2138  00149A  6F72               	movwf	sprintf@s& (0+255),b
  2139  00149C  0E00               	movlw	high print_IR@buf
  2140  00149E  6F73               	movwf	(sprintf@s+1)& (0+255),b
  2141  0014A0  0E29               	movlw	low STR_1
  2142  0014A2  6F74               	movwf	sprintf@fmt& (0+255),b
  2143  0014A4  0E03               	movlw	high STR_1
  2144  0014A6  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2145  0014A8  C082  FFD9         	movff	print_IR@Values,fsr2l
  2146  0014AC  C083  FFDA         	movff	print_IR@Values+1,fsr2h
  2147  0014B0  CFDE F076          	movff	postinc2,?_sprintf+4
  2148  0014B4  CFDD F077          	movff	postdec2,?_sprintf+5
  2149  0014B8  EC26  F00D         	call	_sprintf	;wreg free
  2150                           
  2151                           ;lcd.c: 128:     LCD_string(buf);
  2152  0014BC  0E85               	movlw	low print_IR@buf
  2153  0014BE  6E0A               	movwf	LCD_string@string,c
  2154  0014C0  0E00               	movlw	high print_IR@buf
  2155  0014C2  6E0B               	movwf	LCD_string@string+1,c
  2156  0014C4  ECD0  F00D         	call	_LCD_string	;wreg free
  2157                           
  2158                           ;lcd.c: 129:     LCD_line(2);
  2159  0014C8  0E02               	movlw	2
  2160  0014CA  ECE8  F00D         	call	_LCD_line
  2161                           
  2162                           ;lcd.c: 130:     sprintf(buf, "Right: %u", Values->right);
  2163  0014CE  0E85               	movlw	low print_IR@buf
  2164  0014D0  0100               	movlb	0	; () banked
  2165  0014D2  6F72               	movwf	sprintf@s& (0+255),b
  2166  0014D4  0E00               	movlw	high print_IR@buf
  2167  0014D6  6F73               	movwf	(sprintf@s+1)& (0+255),b
  2168  0014D8  0E1F               	movlw	low STR_2
  2169  0014DA  6F74               	movwf	sprintf@fmt& (0+255),b
  2170  0014DC  0E03               	movlw	high STR_2
  2171  0014DE  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2172  0014E0  EE20 F002          	lfsr	2,2
  2173  0014E4  5182               	movf	print_IR@Values& (0+255),w,b
  2174  0014E6  26D9               	addwf	fsr2l,f,c
  2175  0014E8  5183               	movf	(print_IR@Values+1)& (0+255),w,b
  2176  0014EA  22DA               	addwfc	fsr2h,f,c
  2177  0014EC  CFDE F076          	movff	postinc2,?_sprintf+4
  2178  0014F0  CFDD F077          	movff	postdec2,?_sprintf+5
  2179  0014F4  EC26  F00D         	call	_sprintf	;wreg free
  2180                           
  2181                           ;lcd.c: 131:     LCD_string(buf);
  2182  0014F8  0E85               	movlw	low print_IR@buf
  2183  0014FA  6E0A               	movwf	LCD_string@string,c
  2184  0014FC  0E00               	movlw	high print_IR@buf
  2185  0014FE  6E0B               	movwf	LCD_string@string+1,c
  2186  001500  ECD0  F00D         	call	_LCD_string	;wreg free
  2187                           
  2188                           ;lcd.c: 132:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2189  001504  0E82               	movlw	130
  2190  001506  0100               	movlb	0	; () banked
  2191  001508  6F84               	movwf	??_print_IR& (0+255),b
  2192  00150A  0EDD               	movlw	221
  2193  00150C                     u3547:
  2194  00150C  2EE8               	decfsz	wreg,f,c
  2195  00150E  D7FE               	bra	u3547
  2196  001510  2F84               	decfsz	??_print_IR& (0+255),f,b
  2197  001512  D7FC               	bra	u3547
  2198  001514  D000               	nop2	
  2199                           
  2200                           ;lcd.c: 133:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2201  001516  0E82               	movlw	130
  2202  001518  0100               	movlb	0	; () banked
  2203  00151A  6F84               	movwf	??_print_IR& (0+255),b
  2204  00151C  0EDD               	movlw	221
  2205  00151E                     u3557:
  2206  00151E  2EE8               	decfsz	wreg,f,c
  2207  001520  D7FE               	bra	u3557
  2208  001522  2F84               	decfsz	??_print_IR& (0+255),f,b
  2209  001524  D7FC               	bra	u3557
  2210  001526  D000               	nop2	
  2211                           
  2212                           ;lcd.c: 134:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2213  001528  0E82               	movlw	130
  2214  00152A  0100               	movlb	0	; () banked
  2215  00152C  6F84               	movwf	??_print_IR& (0+255),b
  2216  00152E  0EDD               	movlw	221
  2217  001530                     u3567:
  2218  001530  2EE8               	decfsz	wreg,f,c
  2219  001532  D7FE               	bra	u3567
  2220  001534  2F84               	decfsz	??_print_IR& (0+255),f,b
  2221  001536  D7FC               	bra	u3567
  2222  001538  D000               	nop2	
  2223                           
  2224                           ;lcd.c: 135:     _delay((unsigned long)((50)*(8000000/4000.0)));
  2225  00153A  0E82               	movlw	130
  2226  00153C  0100               	movlb	0	; () banked
  2227  00153E  6F84               	movwf	??_print_IR& (0+255),b
  2228  001540  0EDD               	movlw	221
  2229  001542                     u3577:
  2230  001542  2EE8               	decfsz	wreg,f,c
  2231  001544  D7FE               	bra	u3577
  2232  001546  2F84               	decfsz	??_print_IR& (0+255),f,b
  2233  001548  D7FC               	bra	u3577
  2234  00154A  D000               	nop2	
  2235  00154C  0012               	return		;funcret
  2236  00154E                     __end_of_print_IR:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           postinc1	equ	0xFE6
  2243                           postdec1	equ	0xFE5
  2244                           fsr1h	equ	0xFE2
  2245                           fsr1l	equ	0xFE1
  2246                           indf2	equ	0xFDF
  2247                           postinc2	equ	0xFDE
  2248                           postdec2	equ	0xFDD
  2249                           plusw2	equ	0xFDB
  2250                           fsr2h	equ	0xFDA
  2251                           fsr2l	equ	0xFD9
  2252                           status	equ	0xFD8
  2253                           
  2254 ;; *************** function _sprintf *****************
  2255 ;; Defined at:
  2256 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/nf_sprintf.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  s               2   18[BANK0 ] PTR unsigned char 
  2259 ;;		 -> check_sum@buf_cs(16), print_IR@buf(16), 
  2260 ;;  fmt             2   20[BANK0 ] PTR const unsigned char 
  2261 ;;		 -> STR_4(16), STR_3(14), STR_2(10), STR_1(9), 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  f               6   28[BANK0 ] struct _IO_FILE
  2264 ;;  ap              2   26[BANK0 ] PTR void [1]
  2265 ;;		 -> ?_sprintf(2), 
  2266 ;;  ret             2   24[BANK0 ] int 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  2   18[BANK0 ] int 
  2269 ;; Registers used:
  2270 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2276 ;;      Params:         0       6       0       0
  2277 ;;      Locals:         0      10       0       0
  2278 ;;      Temps:          0       0       0       0
  2279 ;;      Totals:         0      16       0       0
  2280 ;;Total ram usage:       16 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    8
  2283 ;; This function calls:
  2284 ;;		_vfprintf
  2285 ;; This function is called by:
  2286 ;;		_print_IR
  2287 ;;		_check_sum
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text7
  2292  001A4C                     __ptext7:
  2293                           	opt stack 0
  2294  001A4C                     _sprintf:
  2295                           	opt stack 21
  2296                           
  2297                           ;incstack = 0
  2298  001A4C  0E76               	movlw	low (?_sprintf+4)
  2299  001A4E  0100               	movlb	0	; () banked
  2300  001A50  6F7A               	movwf	sprintf@ap& (0+255),b
  2301  001A52  0E00               	movlw	high (?_sprintf+4)
  2302  001A54  6F7B               	movwf	(sprintf@ap+1)& (0+255),b
  2303  001A56  C072  F07C         	movff	sprintf@s,sprintf@f
  2304  001A5A  C073  F07D         	movff	sprintf@s+1,sprintf@f+1
  2305                           
  2306                           ; BSR set to: 0
  2307  001A5E  0E00               	movlw	0
  2308  001A60  6F7F               	movwf	(sprintf@f+3)& (0+255),b
  2309  001A62  0E00               	movlw	0
  2310  001A64  6F7E               	movwf	(sprintf@f+2)& (0+255),b
  2311                           
  2312                           ; BSR set to: 0
  2313  001A66  0E00               	movlw	0
  2314  001A68  6F81               	movwf	(sprintf@f+5)& (0+255),b
  2315  001A6A  0E00               	movlw	0
  2316  001A6C  6F80               	movwf	(sprintf@f+4)& (0+255),b
  2317                           
  2318                           ; BSR set to: 0
  2319  001A6E  0E7C               	movlw	low sprintf@f
  2320  001A70  6E4F               	movwf	vfprintf@fp,c
  2321  001A72  0E00               	movlw	high sprintf@f
  2322  001A74  6E50               	movwf	vfprintf@fp+1,c
  2323  001A76  C074  F051         	movff	sprintf@fmt,vfprintf@fmt
  2324  001A7A  C075  F052         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2325  001A7E  0E7A               	movlw	low sprintf@ap
  2326  001A80  6E53               	movwf	vfprintf@ap,c
  2327  001A82  0E00               	movlw	high sprintf@ap
  2328  001A84  6E54               	movwf	vfprintf@ap+1,c
  2329  001A86  EC53  F00D         	call	_vfprintf	;wreg free
  2330  001A8A  C04F  F078         	movff	?_vfprintf,sprintf@ret
  2331  001A8E  C050  F079         	movff	?_vfprintf+1,sprintf@ret+1
  2332  001A92  0100               	movlb	0	; () banked
  2333  001A94  517E               	movf	(sprintf@f+2)& (0+255),w,b
  2334  001A96  2572               	addwf	sprintf@s& (0+255),w,b
  2335  001A98  6ED9               	movwf	fsr2l,c
  2336  001A9A  517F               	movf	(sprintf@f+3)& (0+255),w,b
  2337  001A9C  2173               	addwfc	(sprintf@s+1)& (0+255),w,b
  2338  001A9E  6EDA               	movwf	fsr2h,c
  2339  001AA0  0E00               	movlw	0
  2340  001AA2  6EDF               	movwf	indf2,c
  2341  001AA4  0012               	return	
  2342  001AA6                     __end_of_sprintf:
  2343                           	opt stack 0
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           postinc1	equ	0xFE6
  2349                           postdec1	equ	0xFE5
  2350                           fsr1h	equ	0xFE2
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           postdec2	equ	0xFDD
  2355                           plusw2	equ	0xFDB
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function _vfprintf *****************
  2361 ;; Defined at:
  2362 ;;		line 1368 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  2365 ;;		 -> sprintf@f(6), 
  2366 ;;  fmt             2   80[COMRAM] PTR const unsigned char 
  2367 ;;		 -> STR_4(16), STR_3(14), STR_2(10), STR_1(9), 
  2368 ;;  ap              2   82[COMRAM] PTR PTR void 
  2369 ;;		 -> sprintf@ap(2), 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  cfmt            2   16[BANK0 ] PTR unsigned char 
  2372 ;;		 -> STR_4(16), STR_3(14), STR_2(10), STR_1(9), 
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  2   78[COMRAM] int 
  2375 ;; Registers used:
  2376 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2382 ;;      Params:         6       0       0       0
  2383 ;;      Locals:         0       2       0       0
  2384 ;;      Temps:          0       0       0       0
  2385 ;;      Totals:         6       2       0       0
  2386 ;;Total ram usage:        8 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    7
  2389 ;; This function calls:
  2390 ;;		_vfpfcnvrt
  2391 ;; This function is called by:
  2392 ;;		_sprintf
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text8
  2397  001AA6                     __ptext8:
  2398                           	opt stack 0
  2399  001AA6                     _vfprintf:
  2400                           	opt stack 21
  2401                           
  2402                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.00/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;incstack = 0
  2406  001AA6  C051  F070         	movff	vfprintf@fmt,vfprintf@cfmt
  2407  001AAA  C052  F071         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2408                           
  2409                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  2410  001AAE  0E00               	movlw	0
  2411  001AB0  0100               	movlb	0	; () banked
  2412  001AB2  6FBB               	movwf	(_nout+1)& (0+255),b
  2413  001AB4  0E00               	movlw	0
  2414  001AB6  6FBA               	movwf	_nout& (0+255),b
  2415                           
  2416                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2417  001AB8  D013               	goto	l455
  2418  001ABA                     
  2419                           ; BSR set to: 0
  2420                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  2421                           
  2422                           ; BSR set to: 0
  2423  001ABA  C04F  F045         	movff	vfprintf@fp,vfpfcnvrt@fp
  2424  001ABE  C050  F046         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2425  001AC2  0E70               	movlw	low vfprintf@cfmt
  2426  001AC4  6E47               	movwf	vfpfcnvrt@fmt,c
  2427  001AC6  0E00               	movlw	high vfprintf@cfmt
  2428  001AC8  6E48               	movwf	vfpfcnvrt@fmt+1,c
  2429  001ACA  C053  F049         	movff	vfprintf@ap,vfpfcnvrt@ap
  2430  001ACE  C054  F04A         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2431  001AD2  EC08  F004         	call	_vfpfcnvrt	;wreg free
  2432  001AD6  5045               	movf	?_vfpfcnvrt,w,c
  2433  001AD8  0100               	movlb	0	; () banked
  2434  001ADA  27BA               	addwf	_nout& (0+255),f,b
  2435  001ADC  5046               	movf	?_vfpfcnvrt+1,w,c
  2436  001ADE  23BB               	addwfc	(_nout+1)& (0+255),f,b
  2437  001AE0                     l455:
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2441                           
  2442                           ; BSR set to: 0
  2443  001AE0  C070  FFF6         	movff	vfprintf@cfmt,tblptrl
  2444  001AE4  C071  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2445  001AE8                     	if	0	;tblptru may be non-zero
  2446  001AE8                     	endif
  2447  001AE8                     	if	0	;tblptru may be non-zero
  2448  001AE8                     	endif
  2449  001AE8  0008               	tblrd		*
  2450  001AEA  50F5               	movf	tablat,w,c
  2451  001AEC  0900               	iorlw	0
  2452  001AEE  A4D8               	btfss	status,2,c
  2453  001AF0  D7E4               	goto	l456
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  2457  001AF2  C0BA  F04F         	movff	_nout,?_vfprintf
  2458  001AF6  C0BB  F050         	movff	_nout+1,?_vfprintf+1
  2459                           
  2460                           ; BSR set to: 0
  2461  001AFA  0012               	return		;funcret
  2462  001AFC                     __end_of_vfprintf:
  2463                           	opt stack 0
  2464                           tblptru	equ	0xFF8
  2465                           tblptrh	equ	0xFF7
  2466                           tblptrl	equ	0xFF6
  2467                           tablat	equ	0xFF5
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           postinc1	equ	0xFE6
  2471                           postdec1	equ	0xFE5
  2472                           fsr1h	equ	0xFE2
  2473                           fsr1l	equ	0xFE1
  2474                           indf2	equ	0xFDF
  2475                           postinc2	equ	0xFDE
  2476                           postdec2	equ	0xFDD
  2477                           plusw2	equ	0xFDB
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _vfpfcnvrt *****************
  2483 ;; Defined at:
  2484 ;;		line 670 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  fp              2   68[COMRAM] PTR struct _IO_FILE
  2487 ;;		 -> sprintf@f(6), 
  2488 ;;  fmt             2   70[COMRAM] PTR PTR unsigned char 
  2489 ;;		 -> vfprintf@cfmt(2), 
  2490 ;;  ap              2   72[COMRAM] PTR PTR void 
  2491 ;;		 -> sprintf@ap(2), 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  llu             8    8[BANK0 ] unsigned long long 
  2494 ;;  ll              8    0[BANK0 ] long long 
  2495 ;;  f               4    0        long long 
  2496 ;;  vp              3    0        PTR void 
  2497 ;;  ct              3    0        unsigned char [3]
  2498 ;;  cp              3    0        PTR unsigned char 
  2499 ;;  i               2    0        int 
  2500 ;;  done            2    0        int 
  2501 ;;  c               1    0        unsigned char 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  2   68[COMRAM] int 
  2504 ;; Registers used:
  2505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2511 ;;      Params:         6       0       0       0
  2512 ;;      Locals:         0      16       0       0
  2513 ;;      Temps:          4       0       0       0
  2514 ;;      Totals:        10      16       0       0
  2515 ;;Total ram usage:       26 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; Hardware stack levels required when called:    6
  2518 ;; This function calls:
  2519 ;;		_dtoa
  2520 ;;		_fputc
  2521 ;;		_utoa
  2522 ;; This function is called by:
  2523 ;;		_vfprintf
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text9
  2528  000810                     __ptext9:
  2529                           	opt stack 0
  2530  000810                     _vfpfcnvrt:
  2531                           	opt stack 21
  2532                           
  2533                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.00/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.00/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.00/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.00/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;incstack = 0
  2537  000810  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2538  000814  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2539  000818  CFDE FFF6          	movff	postinc2,tblptrl
  2540  00081C  CFDD FFF7          	movff	postdec2,tblptrh
  2541  000820                     	if	0	;tblptru may be non-zero
  2542  000820                     	endif
  2543  000820                     	if	0	;tblptru may be non-zero
  2544  000820                     	endif
  2545  000820  0008               	tblrd		*
  2546  000822  50F5               	movf	tablat,w,c
  2547  000824  0A25               	xorlw	37
  2548  000826  A4D8               	btfss	status,2,c
  2549  000828  D0E8               	goto	l446
  2550                           
  2551                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  2552  00082A  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2553  00082E  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2554  000832  2ADE               	incf	postinc2,f,c
  2555  000834  0E00               	movlw	0
  2556  000836  22DD               	addwfc	postdec2,f,c
  2557                           
  2558                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  2559  000838  0E00               	movlw	0
  2560  00083A  0100               	movlb	0	; () banked
  2561  00083C  6FBD               	movwf	(_width+1)& (0+255),b
  2562  00083E  0E00               	movlw	0
  2563  000840  6FBC               	movwf	_width& (0+255),b
  2564  000842  C0BC  F057         	movff	_width,_flags
  2565  000846  C0BD  F058         	movff	_width+1,_flags+1
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  2569  00084A  6855               	setf	_prec,c
  2570  00084C  6856               	setf	_prec+1,c
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2574  00084E  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2575  000852  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2576  000856  CFDE FFF6          	movff	postinc2,tblptrl
  2577  00085A  CFDD FFF7          	movff	postdec2,tblptrh
  2578  00085E                     	if	0	;tblptru may be non-zero
  2579  00085E                     	endif
  2580  00085E                     	if	0	;tblptru may be non-zero
  2581  00085E                     	endif
  2582  00085E  0008               	tblrd		*
  2583  000860  50F5               	movf	tablat,w,c
  2584  000862  0A64               	xorlw	100
  2585  000864  B4D8               	btfsc	status,2,c
  2586  000866  D00D               	goto	u3250
  2587                           
  2588                           ; BSR set to: 0
  2589  000868  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2590  00086C  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2591  000870  CFDE FFF6          	movff	postinc2,tblptrl
  2592  000874  CFDD FFF7          	movff	postdec2,tblptrh
  2593  000878                     	if	0	;tblptru may be non-zero
  2594  000878                     	endif
  2595  000878                     	if	0	;tblptru may be non-zero
  2596  000878                     	endif
  2597  000878  0008               	tblrd		*
  2598  00087A  50F5               	movf	tablat,w,c
  2599  00087C  0A69               	xorlw	105
  2600  00087E  A4D8               	btfss	status,2,c
  2601  000880  D03F               	goto	l447
  2602  000882                     u3250:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2606                           
  2607                           ; BSR set to: 0
  2608  000882  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2609  000886  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2610  00088A  2ADE               	incf	postinc2,f,c
  2611  00088C  0E00               	movlw	0
  2612  00088E  22DD               	addwfc	postdec2,f,c
  2613                           
  2614                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2615  000890  C049  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2616  000894  C04A  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2617  000898  CFDF F04B          	movff	indf2,??_vfpfcnvrt
  2618  00089C  0E02               	movlw	2
  2619  00089E  26DE               	addwf	postinc2,f,c
  2620  0008A0  CFDF F04C          	movff	indf2,??_vfpfcnvrt+1
  2621  0008A4  0E00               	movlw	0
  2622  0008A6  22DD               	addwfc	postdec2,f,c
  2623  0008A8  C04B  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2624  0008AC  C04C  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2625  0008B0  CFDE F060          	movff	postinc2,vfpfcnvrt@ll
  2626  0008B4  CFDD F061          	movff	postdec2,vfpfcnvrt@ll+1
  2627  0008B8  0E00               	movlw	0
  2628  0008BA  BF61               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  2629  0008BC  0EFF               	movlw	-1
  2630  0008BE  6F62               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  2631  0008C0  6F63               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  2632  0008C2  6F64               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  2633  0008C4  6F65               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  2634  0008C6  6F66               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  2635  0008C8  6F67               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2639  0008CA  C045  F021         	movff	vfpfcnvrt@fp,dtoa@fp
  2640  0008CE  C046  F022         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2641  0008D2  C060  F023         	movff	vfpfcnvrt@ll,dtoa@d
  2642  0008D6  C061  F024         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2643  0008DA  C062  F025         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2644  0008DE  C063  F026         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2645  0008E2  C064  F027         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2646  0008E6  C065  F028         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2647  0008EA  C066  F029         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2648  0008EE  C067  F02A         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2649  0008F2  ECE2  F002         	call	_dtoa	;wreg free
  2650  0008F6  C021  F045         	movff	?_dtoa,?_vfpfcnvrt
  2651  0008FA  C022  F046         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2652  0008FE  0012               	return	
  2653  000900                     l447:
  2654                           
  2655                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1182:         if (*f
      +                          mt[0] == 'u') {
  2656  000900  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2657  000904  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2658  000908  CFDE FFF6          	movff	postinc2,tblptrl
  2659  00090C  CFDD FFF7          	movff	postdec2,tblptrh
  2660  000910                     	if	0	;tblptru may be non-zero
  2661  000910                     	endif
  2662  000910                     	if	0	;tblptru may be non-zero
  2663  000910                     	endif
  2664  000910  0008               	tblrd		*
  2665  000912  50F5               	movf	tablat,w,c
  2666  000914  0A75               	xorlw	117
  2667  000916  A4D8               	btfss	status,2,c
  2668  000918  D041               	goto	l451
  2669                           
  2670                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1184:             ++
      +                          *fmt;
  2671  00091A  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2672  00091E  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2673  000922  2ADE               	incf	postinc2,f,c
  2674  000924  0E00               	movlw	0
  2675  000926  22DD               	addwfc	postdec2,f,c
  2676                           
  2677                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1185:             ll
      +                          u = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0
      +                          ));
  2678  000928  C049  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2679  00092C  C04A  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2680  000930  CFDF F04B          	movff	indf2,??_vfpfcnvrt
  2681  000934  0E02               	movlw	2
  2682  000936  26DE               	addwf	postinc2,f,c
  2683  000938  CFDF F04C          	movff	indf2,??_vfpfcnvrt+1
  2684  00093C  0E00               	movlw	0
  2685  00093E  22DD               	addwfc	postdec2,f,c
  2686  000940  C04B  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2687  000944  C04C  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2688  000948  CFDE F04D          	movff	postinc2,??_vfpfcnvrt+2
  2689  00094C  CFDD F04E          	movff	postdec2,??_vfpfcnvrt+3
  2690  000950  C04D  F068         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  2691  000954  C04E  F069         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  2692  000958  0100               	movlb	0	; () banked
  2693  00095A  6B6A               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  2694  00095C  6B6B               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  2695  00095E  6B6C               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  2696  000960  6B6D               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  2697  000962  6B6E               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  2698  000964  6B6F               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1187:             re
      +                          turn utoa(fp, llu);
  2702  000966  C045  F021         	movff	vfpfcnvrt@fp,utoa@fp
  2703  00096A  C046  F022         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  2704  00096E  C068  F023         	movff	vfpfcnvrt@llu,utoa@d
  2705  000972  C069  F024         	movff	vfpfcnvrt@llu+1,utoa@d+1
  2706  000976  C06A  F025         	movff	vfpfcnvrt@llu+2,utoa@d+2
  2707  00097A  C06B  F026         	movff	vfpfcnvrt@llu+3,utoa@d+3
  2708  00097E  C06C  F027         	movff	vfpfcnvrt@llu+4,utoa@d+4
  2709  000982  C06D  F028         	movff	vfpfcnvrt@llu+5,utoa@d+5
  2710  000986  C06E  F029         	movff	vfpfcnvrt@llu+6,utoa@d+6
  2711  00098A  C06F  F02A         	movff	vfpfcnvrt@llu+7,utoa@d+7
  2712  00098E  EC0A  F006         	call	_utoa	;wreg free
  2713  000992  C021  F045         	movff	?_utoa,?_vfpfcnvrt
  2714  000996  C022  F046         	movff	?_utoa+1,?_vfpfcnvrt+1
  2715  00099A  0012               	return	
  2716  00099C                     l451:
  2717                           
  2718                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2719  00099C  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2720  0009A0  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2721  0009A4  CFDE FFF6          	movff	postinc2,tblptrl
  2722  0009A8  CFDD FFF7          	movff	postdec2,tblptrh
  2723  0009AC                     	if	0	;tblptru may be non-zero
  2724  0009AC                     	endif
  2725  0009AC                     	if	0	;tblptru may be non-zero
  2726  0009AC                     	endif
  2727  0009AC  0008               	tblrd		*
  2728  0009AE  50F5               	movf	tablat,w,c
  2729  0009B0  0A25               	xorlw	37
  2730  0009B2  A4D8               	btfss	status,2,c
  2731  0009B4  D016               	goto	l452
  2732                           
  2733                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2734  0009B6  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2735  0009BA  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2736  0009BE  2ADE               	incf	postinc2,f,c
  2737  0009C0  0E00               	movlw	0
  2738  0009C2  22DD               	addwfc	postdec2,f,c
  2739                           
  2740                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2741  0009C4  0E00               	movlw	0
  2742  0009C6  6E07               	movwf	fputc@c+1,c
  2743  0009C8  0E25               	movlw	37
  2744  0009CA  6E06               	movwf	fputc@c,c
  2745  0009CC  C045  F008         	movff	vfpfcnvrt@fp,fputc@fp
  2746  0009D0  C046  F009         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2747  0009D4  ECFE  F00A         	call	_fputc	;wreg free
  2748                           
  2749                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2750  0009D8  0E00               	movlw	0
  2751  0009DA  6E46               	movwf	?_vfpfcnvrt+1,c
  2752  0009DC  0E01               	movlw	1
  2753  0009DE  6E45               	movwf	?_vfpfcnvrt,c
  2754  0009E0  0012               	return	
  2755  0009E2                     l452:
  2756                           
  2757                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2758  0009E2  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2759  0009E6  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2760  0009EA  2ADE               	incf	postinc2,f,c
  2761  0009EC  0E00               	movlw	0
  2762  0009EE  22DD               	addwfc	postdec2,f,c
  2763                           
  2764                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2765  0009F0  0E00               	movlw	0
  2766  0009F2  6E46               	movwf	?_vfpfcnvrt+1,c
  2767  0009F4  0E00               	movlw	0
  2768  0009F6  6E45               	movwf	?_vfpfcnvrt,c
  2769  0009F8  0012               	return	
  2770  0009FA                     l446:
  2771                           
  2772                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2773  0009FA  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2774  0009FE  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2775  000A02  CFDE FFF6          	movff	postinc2,tblptrl
  2776  000A06  CFDD FFF7          	movff	postdec2,tblptrh
  2777  000A0A                     	if	0	;tblptru may be non-zero
  2778  000A0A                     	endif
  2779  000A0A                     	if	0	;tblptru may be non-zero
  2780  000A0A                     	endif
  2781  000A0A  0008               	tblrd		*
  2782  000A0C  50F5               	movf	tablat,w,c
  2783  000A0E  6E06               	movwf	fputc@c,c
  2784  000A10  6A07               	clrf	fputc@c+1,c
  2785  000A12  C045  F008         	movff	vfpfcnvrt@fp,fputc@fp
  2786  000A16  C046  F009         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2787  000A1A  ECFE  F00A         	call	_fputc	;wreg free
  2788                           
  2789                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2790  000A1E  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2791  000A22  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2792  000A26  2ADE               	incf	postinc2,f,c
  2793  000A28  0E00               	movlw	0
  2794  000A2A  22DD               	addwfc	postdec2,f,c
  2795                           
  2796                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 1364:     return 1;
  2797  000A2C  0E00               	movlw	0
  2798  000A2E  6E46               	movwf	?_vfpfcnvrt+1,c
  2799  000A30  0E01               	movlw	1
  2800  000A32  6E45               	movwf	?_vfpfcnvrt,c
  2801  000A34  0012               	return	
  2802  000A36                     __end_of_vfpfcnvrt:
  2803                           	opt stack 0
  2804                           tblptru	equ	0xFF8
  2805                           tblptrh	equ	0xFF7
  2806                           tblptrl	equ	0xFF6
  2807                           tablat	equ	0xFF5
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           postinc1	equ	0xFE6
  2811                           postdec1	equ	0xFE5
  2812                           fsr1h	equ	0xFE2
  2813                           fsr1l	equ	0xFE1
  2814                           indf2	equ	0xFDF
  2815                           postinc2	equ	0xFDE
  2816                           postdec2	equ	0xFDD
  2817                           plusw2	equ	0xFDB
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _utoa *****************
  2823 ;; Defined at:
  2824 ;;		line 593 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  fp              2   32[COMRAM] PTR struct _IO_FILE
  2827 ;;		 -> sprintf@f(6), 
  2828 ;;  d               8   34[COMRAM] unsigned long long 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  n               8   54[COMRAM] unsigned long long 
  2831 ;;  i               2   62[COMRAM] int 
  2832 ;;  w               2   52[COMRAM] int 
  2833 ;;  p               2   50[COMRAM] int 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  2   32[COMRAM] int 
  2836 ;; Registers used:
  2837 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2843 ;;      Params:        10       0       0       0
  2844 ;;      Locals:        14       0       0       0
  2845 ;;      Temps:          8       0       0       0
  2846 ;;      Totals:        32       0       0       0
  2847 ;;Total ram usage:       32 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    5
  2850 ;; This function calls:
  2851 ;;		___lodiv
  2852 ;;		___lomod
  2853 ;;		_pad
  2854 ;; This function is called by:
  2855 ;;		_vfpfcnvrt
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text10
  2860  000C14                     __ptext10:
  2861                           	opt stack 0
  2862  000C14                     _utoa:
  2863                           	opt stack 21
  2864                           
  2865                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 593: static int utoa
      +                          (FILE *fp, unsigned long long d);/Applications/microchip/xc8/v2.00/pic/sources/c99/commo
      +                          n/doprnt.c: 594: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 59
      +                          5:     int i, p, w;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 5
      +                          96:     unsigned long long n;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/d
      +                          oprnt.c: 599:     if (!(prec < 0)) {
  2866                           
  2867                           ;incstack = 0
  2868  000C14  AE56               	btfss	_prec+1,7,c
  2869                           
  2870                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 600:         flags &
      +                          = ~(1 << 1);
  2871  000C16  9257               	bcf	_flags,1,c
  2872                           
  2873                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 602:     p = (0 < pr
      +                          ec) ? prec : 1;
  2874                           
  2875                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 601:     }
  2876  000C18  BE56               	btfsc	_prec+1,7,c
  2877  000C1A  D005               	goto	u3170
  2878  000C1C  5056               	movf	_prec+1,w,c
  2879  000C1E  E108               	bnz	l433
  2880  000C20  0455               	decf	_prec,w,c
  2881  000C22  B0D8               	btfsc	status,0,c
  2882  000C24  D005               	goto	l433
  2883  000C26                     u3170:
  2884  000C26  0E00               	movlw	0
  2885  000C28  6E34               	movwf	utoa@p+1,c
  2886  000C2A  0E01               	movlw	1
  2887  000C2C  6E33               	movwf	utoa@p,c
  2888  000C2E  D004               	goto	l435
  2889  000C30                     l433:
  2890  000C30  C055  F033         	movff	_prec,utoa@p
  2891  000C34  C056  F034         	movff	_prec+1,utoa@p+1
  2892  000C38                     l435:
  2893                           
  2894                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 603:     w = width;
  2895  000C38  C0BC  F035         	movff	_width,utoa@w
  2896  000C3C  C0BD  F036         	movff	_width+1,utoa@w+1
  2897                           
  2898                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 606:     n = d;
  2899  000C40  C023  F037         	movff	utoa@d,utoa@n
  2900  000C44  C024  F038         	movff	utoa@d+1,utoa@n+1
  2901  000C48  C025  F039         	movff	utoa@d+2,utoa@n+2
  2902  000C4C  C026  F03A         	movff	utoa@d+3,utoa@n+3
  2903  000C50  C027  F03B         	movff	utoa@d+4,utoa@n+4
  2904  000C54  C028  F03C         	movff	utoa@d+5,utoa@n+5
  2905  000C58  C029  F03D         	movff	utoa@d+6,utoa@n+6
  2906  000C5C  C02A  F03E         	movff	utoa@d+7,utoa@n+7
  2907                           
  2908                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 607:     i = sizeof(
      +                          dbuf) - 1;
  2909  000C60  0E00               	movlw	0
  2910  000C62  6E40               	movwf	utoa@i+1,c
  2911  000C64  0E1F               	movlw	31
  2912  000C66  6E3F               	movwf	utoa@i,c
  2913                           
  2914                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 608:     dbuf[i] = '
      +                          \0';
  2915  000C68  0EC1               	movlw	low _dbuf
  2916  000C6A  243F               	addwf	utoa@i,w,c
  2917  000C6C  6ED9               	movwf	fsr2l,c
  2918  000C6E  0E00               	movlw	high _dbuf
  2919  000C70  2040               	addwfc	utoa@i+1,w,c
  2920  000C72  6EDA               	movwf	fsr2h,c
  2921  000C74  0E00               	movlw	0
  2922  000C76  6EDF               	movwf	indf2,c
  2923                           
  2924                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 609:     while (i &&
      +                           (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2925  000C78  D076               	goto	l436
  2926  000C7A                     
  2927                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 610:         --i;
  2928  000C7A  063F               	decf	utoa@i,f,c
  2929  000C7C  A0D8               	btfss	status,0,c
  2930  000C7E  0640               	decf	utoa@i+1,f,c
  2931                           
  2932                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 611:         dbuf[i]
      +                           = '0' + (n % 10);
  2933  000C80  0EC1               	movlw	low _dbuf
  2934  000C82  243F               	addwf	utoa@i,w,c
  2935  000C84  6ED9               	movwf	fsr2l,c
  2936  000C86  0E00               	movlw	high _dbuf
  2937  000C88  2040               	addwfc	utoa@i+1,w,c
  2938  000C8A  6EDA               	movwf	fsr2h,c
  2939  000C8C  C037  F006         	movff	utoa@n,___lomod@dividend
  2940  000C90  C038  F007         	movff	utoa@n+1,___lomod@dividend+1
  2941  000C94  C039  F008         	movff	utoa@n+2,___lomod@dividend+2
  2942  000C98  C03A  F009         	movff	utoa@n+3,___lomod@dividend+3
  2943  000C9C  C03B  F00A         	movff	utoa@n+4,___lomod@dividend+4
  2944  000CA0  C03C  F00B         	movff	utoa@n+5,___lomod@dividend+5
  2945  000CA4  C03D  F00C         	movff	utoa@n+6,___lomod@dividend+6
  2946  000CA8  C03E  F00D         	movff	utoa@n+7,___lomod@dividend+7
  2947  000CAC  0E0A               	movlw	10
  2948  000CAE  6E0E               	movwf	___lomod@divisor,c
  2949  000CB0  0E00               	movlw	0
  2950  000CB2  6E0F               	movwf	___lomod@divisor+1,c
  2951  000CB4  0E00               	movlw	0
  2952  000CB6  6E10               	movwf	___lomod@divisor+2,c
  2953  000CB8  0E00               	movlw	0
  2954  000CBA  6E11               	movwf	___lomod@divisor+3,c
  2955  000CBC  0E00               	movlw	0
  2956  000CBE  6E12               	movwf	___lomod@divisor+4,c
  2957  000CC0  0E00               	movlw	0
  2958  000CC2  6E13               	movwf	___lomod@divisor+5,c
  2959  000CC4  0E00               	movlw	0
  2960  000CC6  6E14               	movwf	___lomod@divisor+6,c
  2961  000CC8  0E00               	movlw	0
  2962  000CCA  6E15               	movwf	___lomod@divisor+7,c
  2963  000CCC  ECA7  F00A         	call	___lomod	;wreg free
  2964  000CD0  C006  F02B         	movff	?___lomod,??_utoa
  2965  000CD4  C007  F02C         	movff	?___lomod+1,??_utoa+1
  2966  000CD8  C008  F02D         	movff	?___lomod+2,??_utoa+2
  2967  000CDC  C009  F02E         	movff	?___lomod+3,??_utoa+3
  2968  000CE0  C00A  F02F         	movff	?___lomod+4,??_utoa+4
  2969  000CE4  C00B  F030         	movff	?___lomod+5,??_utoa+5
  2970  000CE8  C00C  F031         	movff	?___lomod+6,??_utoa+6
  2971  000CEC  C00D  F032         	movff	?___lomod+7,??_utoa+7
  2972  000CF0  502B               	movf	??_utoa,w,c
  2973  000CF2  0F30               	addlw	48
  2974  000CF4  6EDF               	movwf	indf2,c
  2975                           
  2976                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 612:         --p;
  2977  000CF6  0633               	decf	utoa@p,f,c
  2978  000CF8  A0D8               	btfss	status,0,c
  2979  000CFA  0634               	decf	utoa@p+1,f,c
  2980                           
  2981                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 613:         --w;
  2982  000CFC  0635               	decf	utoa@w,f,c
  2983  000CFE  A0D8               	btfss	status,0,c
  2984  000D00  0636               	decf	utoa@w+1,f,c
  2985                           
  2986                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 614:         n = n /
      +                           10;
  2987  000D02  C037  F006         	movff	utoa@n,___lodiv@dividend
  2988  000D06  C038  F007         	movff	utoa@n+1,___lodiv@dividend+1
  2989  000D0A  C039  F008         	movff	utoa@n+2,___lodiv@dividend+2
  2990  000D0E  C03A  F009         	movff	utoa@n+3,___lodiv@dividend+3
  2991  000D12  C03B  F00A         	movff	utoa@n+4,___lodiv@dividend+4
  2992  000D16  C03C  F00B         	movff	utoa@n+5,___lodiv@dividend+5
  2993  000D1A  C03D  F00C         	movff	utoa@n+6,___lodiv@dividend+6
  2994  000D1E  C03E  F00D         	movff	utoa@n+7,___lodiv@dividend+7
  2995  000D22  0E0A               	movlw	10
  2996  000D24  6E0E               	movwf	___lodiv@divisor,c
  2997  000D26  0E00               	movlw	0
  2998  000D28  6E0F               	movwf	___lodiv@divisor+1,c
  2999  000D2A  0E00               	movlw	0
  3000  000D2C  6E10               	movwf	___lodiv@divisor+2,c
  3001  000D2E  0E00               	movlw	0
  3002  000D30  6E11               	movwf	___lodiv@divisor+3,c
  3003  000D32  0E00               	movlw	0
  3004  000D34  6E12               	movwf	___lodiv@divisor+4,c
  3005  000D36  0E00               	movlw	0
  3006  000D38  6E13               	movwf	___lodiv@divisor+5,c
  3007  000D3A  0E00               	movlw	0
  3008  000D3C  6E14               	movwf	___lodiv@divisor+6,c
  3009  000D3E  0E00               	movlw	0
  3010  000D40  6E15               	movwf	___lodiv@divisor+7,c
  3011  000D42  ECDF  F009         	call	___lodiv	;wreg free
  3012  000D46  C006  F037         	movff	?___lodiv,utoa@n
  3013  000D4A  C007  F038         	movff	?___lodiv+1,utoa@n+1
  3014  000D4E  C008  F039         	movff	?___lodiv+2,utoa@n+2
  3015  000D52  C009  F03A         	movff	?___lodiv+3,utoa@n+3
  3016  000D56  C00A  F03B         	movff	?___lodiv+4,utoa@n+4
  3017  000D5A  C00B  F03C         	movff	?___lodiv+5,utoa@n+5
  3018  000D5E  C00C  F03D         	movff	?___lodiv+6,utoa@n+6
  3019  000D62  C00D  F03E         	movff	?___lodiv+7,utoa@n+7
  3020  000D66                     l436:
  3021                           
  3022                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 609:     while (i &&
      +                           (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3023  000D66  503F               	movf	utoa@i,w,c
  3024  000D68  1040               	iorwf	utoa@i+1,w,c
  3025  000D6A  B4D8               	btfsc	status,2,c
  3026  000D6C  D01A               	goto	u3220
  3027  000D6E  5037               	movf	utoa@n,w,c
  3028  000D70  1038               	iorwf	utoa@n+1,w,c
  3029  000D72  1039               	iorwf	utoa@n+2,w,c
  3030  000D74  103A               	iorwf	utoa@n+3,w,c
  3031  000D76  103B               	iorwf	utoa@n+4,w,c
  3032  000D78  103C               	iorwf	utoa@n+5,w,c
  3033  000D7A  103D               	iorwf	utoa@n+6,w,c
  3034  000D7C  103E               	iorwf	utoa@n+7,w,c
  3035  000D7E  A4D8               	btfss	status,2,c
  3036  000D80  D77C               	goto	l437
  3037  000D82  BE34               	btfsc	utoa@p+1,7,c
  3038  000D84  D005               	goto	u3200
  3039  000D86  5034               	movf	utoa@p+1,w,c
  3040  000D88  E102               	bnz	u3201
  3041  000D8A  0433               	decf	utoa@p,w,c
  3042  000D8C  B0D8               	btfsc	status,0,c
  3043  000D8E                     u3201:
  3044  000D8E  D775               	goto	l437
  3045  000D90                     u3200:
  3046  000D90  BE36               	btfsc	utoa@w+1,7,c
  3047  000D92  D007               	goto	u3220
  3048  000D94  5036               	movf	utoa@w+1,w,c
  3049  000D96  E103               	bnz	u3210
  3050  000D98  0435               	decf	utoa@w,w,c
  3051  000D9A  A0D8               	btfss	status,0,c
  3052  000D9C  D002               	goto	u3220
  3053  000D9E                     u3210:
  3054  000D9E  B257               	btfsc	_flags,1,c
  3055  000DA0  D76C               	goto	l437
  3056  000DA2                     u3220:
  3057                           
  3058                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 618:     return pad(
      +                          fp, &dbuf[i], w);
  3059  000DA2  C021  F016         	movff	utoa@fp,pad@fp
  3060  000DA6  C022  F017         	movff	utoa@fp+1,pad@fp+1
  3061  000DAA  0EC1               	movlw	low _dbuf
  3062  000DAC  243F               	addwf	utoa@i,w,c
  3063  000DAE  6E18               	movwf	pad@buf,c
  3064  000DB0  0E00               	movlw	high _dbuf
  3065  000DB2  2040               	addwfc	utoa@i+1,w,c
  3066  000DB4  6E19               	movwf	pad@buf+1,c
  3067  000DB6  C035  F01A         	movff	utoa@w,pad@p
  3068  000DBA  C036  F01B         	movff	utoa@w+1,pad@p+1
  3069  000DBE  ECE4  F00B         	call	_pad	;wreg free
  3070  000DC2  C016  F021         	movff	?_pad,?_utoa
  3071  000DC6  C017  F022         	movff	?_pad+1,?_utoa+1
  3072  000DCA  0012               	return	
  3073  000DCC                     __end_of_utoa:
  3074                           	opt stack 0
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           postinc0	equ	0xFEE
  3080                           wreg	equ	0xFE8
  3081                           postinc1	equ	0xFE6
  3082                           postdec1	equ	0xFE5
  3083                           fsr1h	equ	0xFE2
  3084                           fsr1l	equ	0xFE1
  3085                           indf2	equ	0xFDF
  3086                           postinc2	equ	0xFDE
  3087                           postdec2	equ	0xFDD
  3088                           plusw2	equ	0xFDB
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function ___lomod *****************
  3094 ;; Defined at:
  3095 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/lomod.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  dividend        8    5[COMRAM] unsigned long long 
  3098 ;;  divisor         8   13[COMRAM] unsigned long long 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  counter         1   21[COMRAM] unsigned char 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  8    5[COMRAM] unsigned long long 
  3103 ;; Registers used:
  3104 ;;		wreg, status,2, status,0
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3110 ;;      Params:        16       0       0       0
  3111 ;;      Locals:         1       0       0       0
  3112 ;;      Temps:          0       0       0       0
  3113 ;;      Totals:        17       0       0       0
  3114 ;;Total ram usage:       17 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    1
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_utoa
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text11
  3125  00154E                     __ptext11:
  3126                           	opt stack 0
  3127  00154E                     ___lomod:
  3128                           	opt stack 24
  3129                           
  3130                           ;incstack = 0
  3131  00154E  500E               	movf	___lomod@divisor,w,c
  3132  001550  100F               	iorwf	___lomod@divisor+1,w,c
  3133  001552  1010               	iorwf	___lomod@divisor+2,w,c
  3134  001554  1011               	iorwf	___lomod@divisor+3,w,c
  3135  001556  1012               	iorwf	___lomod@divisor+4,w,c
  3136  001558  1013               	iorwf	___lomod@divisor+5,w,c
  3137  00155A  1014               	iorwf	___lomod@divisor+6,w,c
  3138  00155C  1015               	iorwf	___lomod@divisor+7,w,c
  3139  00155E  B4D8               	btfsc	status,2,c
  3140  001560  D03C               	goto	l915
  3141  001562  0E01               	movlw	1
  3142  001564  6E16               	movwf	___lomod@counter,c
  3143  001566  D00A               	goto	l910
  3144  001568  90D8               	bcf	status,0,c
  3145  00156A  360E               	rlcf	___lomod@divisor,f,c
  3146  00156C  360F               	rlcf	___lomod@divisor+1,f,c
  3147  00156E  3610               	rlcf	___lomod@divisor+2,f,c
  3148  001570  3611               	rlcf	___lomod@divisor+3,f,c
  3149  001572  3612               	rlcf	___lomod@divisor+4,f,c
  3150  001574  3613               	rlcf	___lomod@divisor+5,f,c
  3151  001576  3614               	rlcf	___lomod@divisor+6,f,c
  3152  001578  3615               	rlcf	___lomod@divisor+7,f,c
  3153  00157A  2A16               	incf	___lomod@counter,f,c
  3154  00157C                     l910:
  3155  00157C  AE15               	btfss	___lomod@divisor+7,7,c
  3156  00157E  D7F4               	goto	l911
  3157  001580                     u2990:
  3158  001580  500E               	movf	___lomod@divisor,w,c
  3159  001582  5C06               	subwf	___lomod@dividend,w,c
  3160  001584  500F               	movf	___lomod@divisor+1,w,c
  3161  001586  5807               	subwfb	___lomod@dividend+1,w,c
  3162  001588  5010               	movf	___lomod@divisor+2,w,c
  3163  00158A  5808               	subwfb	___lomod@dividend+2,w,c
  3164  00158C  5011               	movf	___lomod@divisor+3,w,c
  3165  00158E  5809               	subwfb	___lomod@dividend+3,w,c
  3166  001590  5012               	movf	___lomod@divisor+4,w,c
  3167  001592  580A               	subwfb	___lomod@dividend+4,w,c
  3168  001594  5013               	movf	___lomod@divisor+5,w,c
  3169  001596  580B               	subwfb	___lomod@dividend+5,w,c
  3170  001598  5014               	movf	___lomod@divisor+6,w,c
  3171  00159A  580C               	subwfb	___lomod@dividend+6,w,c
  3172  00159C  5015               	movf	___lomod@divisor+7,w,c
  3173  00159E  580D               	subwfb	___lomod@dividend+7,w,c
  3174  0015A0  A0D8               	btfss	status,0,c
  3175  0015A2  D010               	goto	l914
  3176  0015A4  500E               	movf	___lomod@divisor,w,c
  3177  0015A6  5E06               	subwf	___lomod@dividend,f,c
  3178  0015A8  500F               	movf	___lomod@divisor+1,w,c
  3179  0015AA  5A07               	subwfb	___lomod@dividend+1,f,c
  3180  0015AC  5010               	movf	___lomod@divisor+2,w,c
  3181  0015AE  5A08               	subwfb	___lomod@dividend+2,f,c
  3182  0015B0  5011               	movf	___lomod@divisor+3,w,c
  3183  0015B2  5A09               	subwfb	___lomod@dividend+3,f,c
  3184  0015B4  5012               	movf	___lomod@divisor+4,w,c
  3185  0015B6  5A0A               	subwfb	___lomod@dividend+4,f,c
  3186  0015B8  5013               	movf	___lomod@divisor+5,w,c
  3187  0015BA  5A0B               	subwfb	___lomod@dividend+5,f,c
  3188  0015BC  5014               	movf	___lomod@divisor+6,w,c
  3189  0015BE  5A0C               	subwfb	___lomod@dividend+6,f,c
  3190  0015C0  5015               	movf	___lomod@divisor+7,w,c
  3191  0015C2  5A0D               	subwfb	___lomod@dividend+7,f,c
  3192  0015C4                     l914:
  3193  0015C4  90D8               	bcf	status,0,c
  3194  0015C6  3215               	rrcf	___lomod@divisor+7,f,c
  3195  0015C8  3214               	rrcf	___lomod@divisor+6,f,c
  3196  0015CA  3213               	rrcf	___lomod@divisor+5,f,c
  3197  0015CC  3212               	rrcf	___lomod@divisor+4,f,c
  3198  0015CE  3211               	rrcf	___lomod@divisor+3,f,c
  3199  0015D0  3210               	rrcf	___lomod@divisor+2,f,c
  3200  0015D2  320F               	rrcf	___lomod@divisor+1,f,c
  3201  0015D4  320E               	rrcf	___lomod@divisor,f,c
  3202  0015D6  2E16               	decfsz	___lomod@counter,f,c
  3203  0015D8  D7D3               	goto	u2990
  3204  0015DA                     l915:
  3205  0015DA  C006  F006         	movff	___lomod@dividend,?___lomod
  3206  0015DE  C007  F007         	movff	___lomod@dividend+1,?___lomod+1
  3207  0015E2  C008  F008         	movff	___lomod@dividend+2,?___lomod+2
  3208  0015E6  C009  F009         	movff	___lomod@dividend+3,?___lomod+3
  3209  0015EA  C00A  F00A         	movff	___lomod@dividend+4,?___lomod+4
  3210  0015EE  C00B  F00B         	movff	___lomod@dividend+5,?___lomod+5
  3211  0015F2  C00C  F00C         	movff	___lomod@dividend+6,?___lomod+6
  3212  0015F6  C00D  F00D         	movff	___lomod@dividend+7,?___lomod+7
  3213  0015FA  0012               	return		;funcret
  3214  0015FC                     __end_of___lomod:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           postinc0	equ	0xFEE
  3221                           wreg	equ	0xFE8
  3222                           postinc1	equ	0xFE6
  3223                           postdec1	equ	0xFE5
  3224                           fsr1h	equ	0xFE2
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           plusw2	equ	0xFDB
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function ___lodiv *****************
  3235 ;; Defined at:
  3236 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/lodiv.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  dividend        8    5[COMRAM] unsigned long long 
  3239 ;;  divisor         8   13[COMRAM] unsigned long long 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  quotient        8   21[COMRAM] unsigned long long 
  3242 ;;  counter         1   29[COMRAM] unsigned char 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  8    5[COMRAM] unsigned long long 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3252 ;;      Params:        16       0       0       0
  3253 ;;      Locals:         9       0       0       0
  3254 ;;      Temps:          0       0       0       0
  3255 ;;      Totals:        25       0       0       0
  3256 ;;Total ram usage:       25 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    1
  3259 ;; This function calls:
  3260 ;;		Nothing
  3261 ;; This function is called by:
  3262 ;;		_utoa
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text12
  3267  0013BE                     __ptext12:
  3268                           	opt stack 0
  3269  0013BE                     ___lodiv:
  3270                           	opt stack 24
  3271                           
  3272                           ;incstack = 0
  3273  0013BE  EE20  F016         	lfsr	2,___lodiv@quotient
  3274  0013C2  0E07               	movlw	7
  3275  0013C4                     u2941:
  3276  0013C4  6ADE               	clrf	postinc2,c
  3277  0013C6  06E8               	decf	wreg,f,c
  3278  0013C8  E2FD               	bc	u2941
  3279  0013CA  500E               	movf	___lodiv@divisor,w,c
  3280  0013CC  100F               	iorwf	___lodiv@divisor+1,w,c
  3281  0013CE  1010               	iorwf	___lodiv@divisor+2,w,c
  3282  0013D0  1011               	iorwf	___lodiv@divisor+3,w,c
  3283  0013D2  1012               	iorwf	___lodiv@divisor+4,w,c
  3284  0013D4  1013               	iorwf	___lodiv@divisor+5,w,c
  3285  0013D6  1014               	iorwf	___lodiv@divisor+6,w,c
  3286  0013D8  1015               	iorwf	___lodiv@divisor+7,w,c
  3287  0013DA  B4D8               	btfsc	status,2,c
  3288  0013DC  D046               	goto	l905
  3289  0013DE  0E01               	movlw	1
  3290  0013E0  6E1E               	movwf	___lodiv@counter,c
  3291  0013E2  D00A               	goto	l900
  3292  0013E4  90D8               	bcf	status,0,c
  3293  0013E6  360E               	rlcf	___lodiv@divisor,f,c
  3294  0013E8  360F               	rlcf	___lodiv@divisor+1,f,c
  3295  0013EA  3610               	rlcf	___lodiv@divisor+2,f,c
  3296  0013EC  3611               	rlcf	___lodiv@divisor+3,f,c
  3297  0013EE  3612               	rlcf	___lodiv@divisor+4,f,c
  3298  0013F0  3613               	rlcf	___lodiv@divisor+5,f,c
  3299  0013F2  3614               	rlcf	___lodiv@divisor+6,f,c
  3300  0013F4  3615               	rlcf	___lodiv@divisor+7,f,c
  3301  0013F6  2A1E               	incf	___lodiv@counter,f,c
  3302  0013F8                     l900:
  3303  0013F8  AE15               	btfss	___lodiv@divisor+7,7,c
  3304  0013FA  D7F4               	goto	l901
  3305  0013FC                     u2960:
  3306  0013FC  90D8               	bcf	status,0,c
  3307  0013FE  3616               	rlcf	___lodiv@quotient,f,c
  3308  001400  3617               	rlcf	___lodiv@quotient+1,f,c
  3309  001402  3618               	rlcf	___lodiv@quotient+2,f,c
  3310  001404  3619               	rlcf	___lodiv@quotient+3,f,c
  3311  001406  361A               	rlcf	___lodiv@quotient+4,f,c
  3312  001408  361B               	rlcf	___lodiv@quotient+5,f,c
  3313  00140A  361C               	rlcf	___lodiv@quotient+6,f,c
  3314  00140C  361D               	rlcf	___lodiv@quotient+7,f,c
  3315  00140E  500E               	movf	___lodiv@divisor,w,c
  3316  001410  5C06               	subwf	___lodiv@dividend,w,c
  3317  001412  500F               	movf	___lodiv@divisor+1,w,c
  3318  001414  5807               	subwfb	___lodiv@dividend+1,w,c
  3319  001416  5010               	movf	___lodiv@divisor+2,w,c
  3320  001418  5808               	subwfb	___lodiv@dividend+2,w,c
  3321  00141A  5011               	movf	___lodiv@divisor+3,w,c
  3322  00141C  5809               	subwfb	___lodiv@dividend+3,w,c
  3323  00141E  5012               	movf	___lodiv@divisor+4,w,c
  3324  001420  580A               	subwfb	___lodiv@dividend+4,w,c
  3325  001422  5013               	movf	___lodiv@divisor+5,w,c
  3326  001424  580B               	subwfb	___lodiv@dividend+5,w,c
  3327  001426  5014               	movf	___lodiv@divisor+6,w,c
  3328  001428  580C               	subwfb	___lodiv@dividend+6,w,c
  3329  00142A  5015               	movf	___lodiv@divisor+7,w,c
  3330  00142C  580D               	subwfb	___lodiv@dividend+7,w,c
  3331  00142E  A0D8               	btfss	status,0,c
  3332  001430  D011               	goto	l904
  3333  001432  500E               	movf	___lodiv@divisor,w,c
  3334  001434  5E06               	subwf	___lodiv@dividend,f,c
  3335  001436  500F               	movf	___lodiv@divisor+1,w,c
  3336  001438  5A07               	subwfb	___lodiv@dividend+1,f,c
  3337  00143A  5010               	movf	___lodiv@divisor+2,w,c
  3338  00143C  5A08               	subwfb	___lodiv@dividend+2,f,c
  3339  00143E  5011               	movf	___lodiv@divisor+3,w,c
  3340  001440  5A09               	subwfb	___lodiv@dividend+3,f,c
  3341  001442  5012               	movf	___lodiv@divisor+4,w,c
  3342  001444  5A0A               	subwfb	___lodiv@dividend+4,f,c
  3343  001446  5013               	movf	___lodiv@divisor+5,w,c
  3344  001448  5A0B               	subwfb	___lodiv@dividend+5,f,c
  3345  00144A  5014               	movf	___lodiv@divisor+6,w,c
  3346  00144C  5A0C               	subwfb	___lodiv@dividend+6,f,c
  3347  00144E  5015               	movf	___lodiv@divisor+7,w,c
  3348  001450  5A0D               	subwfb	___lodiv@dividend+7,f,c
  3349  001452  8016               	bsf	___lodiv@quotient,0,c
  3350  001454                     l904:
  3351  001454  90D8               	bcf	status,0,c
  3352  001456  3215               	rrcf	___lodiv@divisor+7,f,c
  3353  001458  3214               	rrcf	___lodiv@divisor+6,f,c
  3354  00145A  3213               	rrcf	___lodiv@divisor+5,f,c
  3355  00145C  3212               	rrcf	___lodiv@divisor+4,f,c
  3356  00145E  3211               	rrcf	___lodiv@divisor+3,f,c
  3357  001460  3210               	rrcf	___lodiv@divisor+2,f,c
  3358  001462  320F               	rrcf	___lodiv@divisor+1,f,c
  3359  001464  320E               	rrcf	___lodiv@divisor,f,c
  3360  001466  2E1E               	decfsz	___lodiv@counter,f,c
  3361  001468  D7C9               	goto	u2960
  3362  00146A                     l905:
  3363  00146A  C016  F006         	movff	___lodiv@quotient,?___lodiv
  3364  00146E  C017  F007         	movff	___lodiv@quotient+1,?___lodiv+1
  3365  001472  C018  F008         	movff	___lodiv@quotient+2,?___lodiv+2
  3366  001476  C019  F009         	movff	___lodiv@quotient+3,?___lodiv+3
  3367  00147A  C01A  F00A         	movff	___lodiv@quotient+4,?___lodiv+4
  3368  00147E  C01B  F00B         	movff	___lodiv@quotient+5,?___lodiv+5
  3369  001482  C01C  F00C         	movff	___lodiv@quotient+6,?___lodiv+6
  3370  001486  C01D  F00D         	movff	___lodiv@quotient+7,?___lodiv+7
  3371  00148A  0012               	return		;funcret
  3372  00148C                     __end_of___lodiv:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postinc1	equ	0xFE6
  3381                           postdec1	equ	0xFE5
  3382                           fsr1h	equ	0xFE2
  3383                           fsr1l	equ	0xFE1
  3384                           indf2	equ	0xFDF
  3385                           postinc2	equ	0xFDE
  3386                           postdec2	equ	0xFDD
  3387                           plusw2	equ	0xFDB
  3388                           fsr2h	equ	0xFDA
  3389                           fsr2l	equ	0xFD9
  3390                           status	equ	0xFD8
  3391                           
  3392 ;; *************** function _dtoa *****************
  3393 ;; Defined at:
  3394 ;;		line 274 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  fp              2   32[COMRAM] PTR struct _IO_FILE
  3397 ;;		 -> sprintf@f(6), 
  3398 ;;  d               8   34[COMRAM] long long 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  n               8   58[COMRAM] long long 
  3401 ;;  i               2   66[COMRAM] int 
  3402 ;;  s               2   56[COMRAM] int 
  3403 ;;  w               2   54[COMRAM] int 
  3404 ;;  p               2   52[COMRAM] int 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  2   32[COMRAM] int 
  3407 ;; Registers used:
  3408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3414 ;;      Params:        10       0       0       0
  3415 ;;      Locals:        18       0       0       0
  3416 ;;      Temps:          8       0       0       0
  3417 ;;      Totals:        36       0       0       0
  3418 ;;Total ram usage:       36 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    5
  3421 ;; This function calls:
  3422 ;;		___aodiv
  3423 ;;		___aomod
  3424 ;;		_abs
  3425 ;;		_pad
  3426 ;; This function is called by:
  3427 ;;		_vfpfcnvrt
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text13
  3432  0005C4                     __ptext13:
  3433                           	opt stack 0
  3434  0005C4                     _dtoa:
  3435                           	opt stack 21
  3436                           
  3437                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  3438                           
  3439                           ;incstack = 0
  3440  0005C4  C023  F03B         	movff	dtoa@d,dtoa@n
  3441  0005C8  C024  F03C         	movff	dtoa@d+1,dtoa@n+1
  3442  0005CC  C025  F03D         	movff	dtoa@d+2,dtoa@n+2
  3443  0005D0  C026  F03E         	movff	dtoa@d+3,dtoa@n+3
  3444  0005D4  C027  F03F         	movff	dtoa@d+4,dtoa@n+4
  3445  0005D8  C028  F040         	movff	dtoa@d+5,dtoa@n+5
  3446  0005DC  C029  F041         	movff	dtoa@d+6,dtoa@n+6
  3447  0005E0  C02A  F042         	movff	dtoa@d+7,dtoa@n+7
  3448                           
  3449                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  3450  0005E4  AE42               	btfss	dtoa@n+7,7,c
  3451  0005E6  D002               	goto	u3010
  3452  0005E8  0E01               	movlw	1
  3453  0005EA  D001               	goto	u3020
  3454  0005EC                     u3010:
  3455  0005EC  0E00               	movlw	0
  3456  0005EE                     u3020:
  3457  0005EE  6E39               	movwf	dtoa@s,c
  3458  0005F0  6A3A               	clrf	dtoa@s+1,c
  3459                           
  3460                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  3461  0005F2  5039               	movf	dtoa@s,w,c
  3462  0005F4  103A               	iorwf	dtoa@s+1,w,c
  3463  0005F6  B4D8               	btfsc	status,2,c
  3464  0005F8  D010               	goto	l405
  3465                           
  3466                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  3467  0005FA  1E42               	comf	dtoa@n+7,f,c
  3468  0005FC  1E41               	comf	dtoa@n+6,f,c
  3469  0005FE  1E40               	comf	dtoa@n+5,f,c
  3470  000600  1E3F               	comf	dtoa@n+4,f,c
  3471  000602  1E3E               	comf	dtoa@n+3,f,c
  3472  000604  1E3D               	comf	dtoa@n+2,f,c
  3473  000606  1E3C               	comf	dtoa@n+1,f,c
  3474  000608  6C3B               	negf	dtoa@n,c
  3475  00060A  0E00               	movlw	0
  3476  00060C  223C               	addwfc	dtoa@n+1,f,c
  3477  00060E  223D               	addwfc	dtoa@n+2,f,c
  3478  000610  223E               	addwfc	dtoa@n+3,f,c
  3479  000612  223F               	addwfc	dtoa@n+4,f,c
  3480  000614  2240               	addwfc	dtoa@n+5,f,c
  3481  000616  2241               	addwfc	dtoa@n+6,f,c
  3482  000618  2242               	addwfc	dtoa@n+7,f,c
  3483  00061A                     l405:
  3484                           
  3485                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  3486  00061A  AE56               	btfss	_prec+1,7,c
  3487                           
  3488                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  3489  00061C  9257               	bcf	_flags,1,c
  3490                           
  3491                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  3492                           
  3493                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 289:     }
  3494  00061E  BE56               	btfsc	_prec+1,7,c
  3495  000620  D005               	goto	u3050
  3496  000622  5056               	movf	_prec+1,w,c
  3497  000624  E108               	bnz	l408
  3498  000626  0455               	decf	_prec,w,c
  3499  000628  B0D8               	btfsc	status,0,c
  3500  00062A  D005               	goto	l408
  3501  00062C                     u3050:
  3502  00062C  0E00               	movlw	0
  3503  00062E  6E36               	movwf	dtoa@p+1,c
  3504  000630  0E01               	movlw	1
  3505  000632  6E35               	movwf	dtoa@p,c
  3506  000634  D004               	goto	l410
  3507  000636                     l408:
  3508  000636  C055  F035         	movff	_prec,dtoa@p
  3509  00063A  C056  F036         	movff	_prec+1,dtoa@p+1
  3510  00063E                     l410:
  3511                           
  3512                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 291:     w = width;
  3513  00063E  C0BC  F037         	movff	_width,dtoa@w
  3514  000642  C0BD  F038         	movff	_width+1,dtoa@w+1
  3515                           
  3516                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  3517  000646  5039               	movf	dtoa@s,w,c
  3518  000648  103A               	iorwf	dtoa@s+1,w,c
  3519  00064A  A4D8               	btfss	status,2,c
  3520  00064C  D002               	goto	u3070
  3521  00064E  A457               	btfss	_flags,2,c
  3522  000650  D003               	goto	l411
  3523  000652                     u3070:
  3524                           
  3525                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 293:         --w;
  3526  000652  0637               	decf	dtoa@w,f,c
  3527  000654  A0D8               	btfss	status,0,c
  3528  000656  0638               	decf	dtoa@w+1,f,c
  3529  000658                     l411:
  3530                           
  3531                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  3532  000658  0E00               	movlw	0
  3533  00065A  6E44               	movwf	dtoa@i+1,c
  3534  00065C  0E1F               	movlw	31
  3535  00065E  6E43               	movwf	dtoa@i,c
  3536                           
  3537                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  3538  000660  0EC1               	movlw	low _dbuf
  3539  000662  2443               	addwf	dtoa@i,w,c
  3540  000664  6ED9               	movwf	fsr2l,c
  3541  000666  0E00               	movlw	high _dbuf
  3542  000668  2044               	addwfc	dtoa@i+1,w,c
  3543  00066A  6EDA               	movwf	fsr2h,c
  3544  00066C  0E00               	movlw	0
  3545  00066E  6EDF               	movwf	indf2,c
  3546                           
  3547                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3548  000670  D07C               	goto	l414
  3549  000672                     
  3550                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 300:         --i;
  3551  000672  0643               	decf	dtoa@i,f,c
  3552  000674  A0D8               	btfss	status,0,c
  3553  000676  0644               	decf	dtoa@i+1,f,c
  3554                           
  3555                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  3556  000678  0EC1               	movlw	low _dbuf
  3557  00067A  2443               	addwf	dtoa@i,w,c
  3558  00067C  6ED9               	movwf	fsr2l,c
  3559  00067E  0E00               	movlw	high _dbuf
  3560  000680  2044               	addwfc	dtoa@i+1,w,c
  3561  000682  6EDA               	movwf	fsr2h,c
  3562  000684  C03B  F006         	movff	dtoa@n,___aomod@dividend
  3563  000688  C03C  F007         	movff	dtoa@n+1,___aomod@dividend+1
  3564  00068C  C03D  F008         	movff	dtoa@n+2,___aomod@dividend+2
  3565  000690  C03E  F009         	movff	dtoa@n+3,___aomod@dividend+3
  3566  000694  C03F  F00A         	movff	dtoa@n+4,___aomod@dividend+4
  3567  000698  C040  F00B         	movff	dtoa@n+5,___aomod@dividend+5
  3568  00069C  C041  F00C         	movff	dtoa@n+6,___aomod@dividend+6
  3569  0006A0  C042  F00D         	movff	dtoa@n+7,___aomod@dividend+7
  3570  0006A4  0E0A               	movlw	10
  3571  0006A6  6E0E               	movwf	___aomod@divisor,c
  3572  0006A8  0E00               	movlw	0
  3573  0006AA  6E0F               	movwf	___aomod@divisor+1,c
  3574  0006AC  0E00               	movlw	0
  3575  0006AE  6E10               	movwf	___aomod@divisor+2,c
  3576  0006B0  0E00               	movlw	0
  3577  0006B2  6E11               	movwf	___aomod@divisor+3,c
  3578  0006B4  0E00               	movlw	0
  3579  0006B6  6E12               	movwf	___aomod@divisor+4,c
  3580  0006B8  0E00               	movlw	0
  3581  0006BA  6E13               	movwf	___aomod@divisor+5,c
  3582  0006BC  0E00               	movlw	0
  3583  0006BE  6E14               	movwf	___aomod@divisor+6,c
  3584  0006C0  0E00               	movlw	0
  3585  0006C2  6E15               	movwf	___aomod@divisor+7,c
  3586  0006C4  EC4B  F008         	call	___aomod	;wreg free
  3587  0006C8  C006  F02B         	movff	?___aomod,??_dtoa
  3588  0006CC  C007  F02C         	movff	?___aomod+1,??_dtoa+1
  3589  0006D0  C008  F02D         	movff	?___aomod+2,??_dtoa+2
  3590  0006D4  C009  F02E         	movff	?___aomod+3,??_dtoa+3
  3591  0006D8  C00A  F02F         	movff	?___aomod+4,??_dtoa+4
  3592  0006DC  C00B  F030         	movff	?___aomod+5,??_dtoa+5
  3593  0006E0  C00C  F031         	movff	?___aomod+6,??_dtoa+6
  3594  0006E4  C00D  F032         	movff	?___aomod+7,??_dtoa+7
  3595  0006E8  C02B  F018         	movff	??_dtoa,abs@a
  3596  0006EC  C02D  F019         	movff	??_dtoa+2,abs@a+1
  3597  0006F0  ECB7  F00D         	call	_abs	;wreg free
  3598  0006F4  5018               	movf	?_abs,w,c
  3599  0006F6  0F30               	addlw	48
  3600  0006F8  6EDF               	movwf	indf2,c
  3601                           
  3602                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 302:         --p;
  3603  0006FA  0635               	decf	dtoa@p,f,c
  3604  0006FC  A0D8               	btfss	status,0,c
  3605  0006FE  0636               	decf	dtoa@p+1,f,c
  3606                           
  3607                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 303:         --w;
  3608  000700  0637               	decf	dtoa@w,f,c
  3609  000702  A0D8               	btfss	status,0,c
  3610  000704  0638               	decf	dtoa@w+1,f,c
  3611                           
  3612                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  3613  000706  C03B  F006         	movff	dtoa@n,___aodiv@dividend
  3614  00070A  C03C  F007         	movff	dtoa@n+1,___aodiv@dividend+1
  3615  00070E  C03D  F008         	movff	dtoa@n+2,___aodiv@dividend+2
  3616  000712  C03E  F009         	movff	dtoa@n+3,___aodiv@dividend+3
  3617  000716  C03F  F00A         	movff	dtoa@n+4,___aodiv@dividend+4
  3618  00071A  C040  F00B         	movff	dtoa@n+5,___aodiv@dividend+5
  3619  00071E  C041  F00C         	movff	dtoa@n+6,___aodiv@dividend+6
  3620  000722  C042  F00D         	movff	dtoa@n+7,___aodiv@dividend+7
  3621  000726  0E0A               	movlw	10
  3622  000728  6E0E               	movwf	___aodiv@divisor,c
  3623  00072A  0E00               	movlw	0
  3624  00072C  6E0F               	movwf	___aodiv@divisor+1,c
  3625  00072E  0E00               	movlw	0
  3626  000730  6E10               	movwf	___aodiv@divisor+2,c
  3627  000732  0E00               	movlw	0
  3628  000734  6E11               	movwf	___aodiv@divisor+3,c
  3629  000736  0E00               	movlw	0
  3630  000738  6E12               	movwf	___aodiv@divisor+4,c
  3631  00073A  0E00               	movlw	0
  3632  00073C  6E13               	movwf	___aodiv@divisor+5,c
  3633  00073E  0E00               	movlw	0
  3634  000740  6E14               	movwf	___aodiv@divisor+6,c
  3635  000742  0E00               	movlw	0
  3636  000744  6E15               	movwf	___aodiv@divisor+7,c
  3637  000746  ECA7  F007         	call	___aodiv	;wreg free
  3638  00074A  C006  F03B         	movff	?___aodiv,dtoa@n
  3639  00074E  C007  F03C         	movff	?___aodiv+1,dtoa@n+1
  3640  000752  C008  F03D         	movff	?___aodiv+2,dtoa@n+2
  3641  000756  C009  F03E         	movff	?___aodiv+3,dtoa@n+3
  3642  00075A  C00A  F03F         	movff	?___aodiv+4,dtoa@n+4
  3643  00075E  C00B  F040         	movff	?___aodiv+5,dtoa@n+5
  3644  000762  C00C  F041         	movff	?___aodiv+6,dtoa@n+6
  3645  000766  C00D  F042         	movff	?___aodiv+7,dtoa@n+7
  3646  00076A                     l414:
  3647                           
  3648                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3649  00076A  BE44               	btfsc	dtoa@i+1,7,c
  3650  00076C  D01F               	goto	u3120
  3651  00076E  5044               	movf	dtoa@i+1,w,c
  3652  000770  E103               	bnz	u3080
  3653  000772  0443               	decf	dtoa@i,w,c
  3654  000774  A0D8               	btfss	status,0,c
  3655  000776  D01A               	goto	u3120
  3656  000778                     u3080:
  3657  000778  503B               	movf	dtoa@n,w,c
  3658  00077A  103C               	iorwf	dtoa@n+1,w,c
  3659  00077C  103D               	iorwf	dtoa@n+2,w,c
  3660  00077E  103E               	iorwf	dtoa@n+3,w,c
  3661  000780  103F               	iorwf	dtoa@n+4,w,c
  3662  000782  1040               	iorwf	dtoa@n+5,w,c
  3663  000784  1041               	iorwf	dtoa@n+6,w,c
  3664  000786  1042               	iorwf	dtoa@n+7,w,c
  3665  000788  A4D8               	btfss	status,2,c
  3666  00078A  D773               	goto	l415
  3667  00078C  BE36               	btfsc	dtoa@p+1,7,c
  3668  00078E  D005               	goto	u3100
  3669  000790  5036               	movf	dtoa@p+1,w,c
  3670  000792  E102               	bnz	u3101
  3671  000794  0435               	decf	dtoa@p,w,c
  3672  000796  B0D8               	btfsc	status,0,c
  3673  000798                     u3101:
  3674  000798  D76C               	goto	l415
  3675  00079A                     u3100:
  3676  00079A  BE38               	btfsc	dtoa@w+1,7,c
  3677  00079C  D007               	goto	u3120
  3678  00079E  5038               	movf	dtoa@w+1,w,c
  3679  0007A0  E103               	bnz	u3110
  3680  0007A2  0437               	decf	dtoa@w,w,c
  3681  0007A4  A0D8               	btfss	status,0,c
  3682  0007A6  D002               	goto	u3120
  3683  0007A8                     u3110:
  3684  0007A8  B257               	btfsc	_flags,1,c
  3685  0007AA  D763               	goto	l415
  3686  0007AC                     u3120:
  3687                           
  3688                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  3689  0007AC  5039               	movf	dtoa@s,w,c
  3690  0007AE  103A               	iorwf	dtoa@s+1,w,c
  3691  0007B0  A4D8               	btfss	status,2,c
  3692  0007B2  D002               	goto	u3140
  3693  0007B4  A457               	btfss	_flags,2,c
  3694  0007B6  D017               	goto	l421
  3695  0007B8                     u3140:
  3696                           
  3697                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 309:         --i;
  3698  0007B8  0643               	decf	dtoa@i,f,c
  3699  0007BA  A0D8               	btfss	status,0,c
  3700  0007BC  0644               	decf	dtoa@i+1,f,c
  3701                           
  3702                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  3703  0007BE  5039               	movf	dtoa@s,w,c
  3704  0007C0  103A               	iorwf	dtoa@s+1,w,c
  3705  0007C2  A4D8               	btfss	status,2,c
  3706  0007C4  D004               	goto	l425
  3707  0007C6  0E00               	movlw	0
  3708  0007C8  6E34               	movwf	_dtoa$1441+1,c
  3709  0007CA  0E2B               	movlw	43
  3710  0007CC  D003               	goto	L4
  3711  0007CE                     l425:
  3712  0007CE  0E00               	movlw	0
  3713  0007D0  6E34               	movwf	_dtoa$1441+1,c
  3714  0007D2  0E2D               	movlw	45
  3715  0007D4                     L4:
  3716  0007D4  6E33               	movwf	_dtoa$1441,c
  3717  0007D6  0EC1               	movlw	low _dbuf
  3718  0007D8  2443               	addwf	dtoa@i,w,c
  3719  0007DA  6ED9               	movwf	fsr2l,c
  3720  0007DC  0E00               	movlw	high _dbuf
  3721  0007DE  2044               	addwfc	dtoa@i+1,w,c
  3722  0007E0  6EDA               	movwf	fsr2h,c
  3723  0007E2  C033  FFDF         	movff	_dtoa$1441,indf2
  3724  0007E6                     l421:
  3725                           
  3726                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  3727  0007E6  C021  F016         	movff	dtoa@fp,pad@fp
  3728  0007EA  C022  F017         	movff	dtoa@fp+1,pad@fp+1
  3729  0007EE  0EC1               	movlw	low _dbuf
  3730  0007F0  2443               	addwf	dtoa@i,w,c
  3731  0007F2  6E18               	movwf	pad@buf,c
  3732  0007F4  0E00               	movlw	high _dbuf
  3733  0007F6  2044               	addwfc	dtoa@i+1,w,c
  3734  0007F8  6E19               	movwf	pad@buf+1,c
  3735  0007FA  C037  F01A         	movff	dtoa@w,pad@p
  3736  0007FE  C038  F01B         	movff	dtoa@w+1,pad@p+1
  3737  000802  ECE4  F00B         	call	_pad	;wreg free
  3738  000806  C016  F021         	movff	?_pad,?_dtoa
  3739  00080A  C017  F022         	movff	?_pad+1,?_dtoa+1
  3740  00080E  0012               	return	
  3741  000810                     __end_of_dtoa:
  3742                           	opt stack 0
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           postinc0	equ	0xFEE
  3748                           wreg	equ	0xFE8
  3749                           postinc1	equ	0xFE6
  3750                           postdec1	equ	0xFE5
  3751                           fsr1h	equ	0xFE2
  3752                           fsr1l	equ	0xFE1
  3753                           indf2	equ	0xFDF
  3754                           postinc2	equ	0xFDE
  3755                           postdec2	equ	0xFDD
  3756                           plusw2	equ	0xFDB
  3757                           fsr2h	equ	0xFDA
  3758                           fsr2l	equ	0xFD9
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _pad *****************
  3762 ;; Defined at:
  3763 ;;		line 72 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  fp              2   21[COMRAM] PTR struct _IO_FILE
  3766 ;;		 -> sprintf@f(6), 
  3767 ;;  buf             2   23[COMRAM] PTR unsigned char 
  3768 ;;		 -> dbuf(32), 
  3769 ;;  p               2   25[COMRAM] int 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  w               2   30[COMRAM] int 
  3772 ;;  i               2   28[COMRAM] int 
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  2   21[COMRAM] int 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3782 ;;      Params:         6       0       0       0
  3783 ;;      Locals:         4       0       0       0
  3784 ;;      Temps:          1       0       0       0
  3785 ;;      Totals:        11       0       0       0
  3786 ;;Total ram usage:       11 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    4
  3789 ;; This function calls:
  3790 ;;		_fputc
  3791 ;;		_fputs
  3792 ;;		_strlen
  3793 ;; This function is called by:
  3794 ;;		_dtoa
  3795 ;;		_utoa
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text14
  3800  0017C8                     __ptext14:
  3801                           	opt stack 0
  3802  0017C8                     _pad:
  3803                           	opt stack 21
  3804                           
  3805                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.00/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3806                           
  3807                           ;incstack = 0
  3808  0017C8  A057               	btfss	_flags,0,c
  3809  0017CA  D00A               	goto	l393
  3810                           
  3811                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3812  0017CC  C018  F00F         	movff	pad@buf,fputs@s
  3813  0017D0  C019  F010         	movff	pad@buf+1,fputs@s+1
  3814  0017D4  C016  F011         	movff	pad@fp,fputs@fp
  3815  0017D8  C017  F012         	movff	pad@fp+1,fputs@fp+1
  3816  0017DC  EC9B  F00D         	call	_fputs	;wreg free
  3817  0017E0                     l393:
  3818                           
  3819                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3820  0017E0  BE1B               	btfsc	pad@p+1,7,c
  3821  0017E2  D005               	goto	l395
  3822  0017E4  C01A  F01F         	movff	pad@p,pad@w
  3823  0017E8  C01B  F020         	movff	pad@p+1,pad@w+1
  3824  0017EC  D004               	goto	l397
  3825  0017EE                     l395:
  3826  0017EE  0E00               	movlw	0
  3827  0017F0  6E20               	movwf	pad@w+1,c
  3828  0017F2  0E00               	movlw	0
  3829  0017F4  6E1F               	movwf	pad@w,c
  3830  0017F6                     l397:
  3831                           
  3832                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3833  0017F6  0E00               	movlw	0
  3834  0017F8  6E1E               	movwf	pad@i+1,c
  3835  0017FA  0E00               	movlw	0
  3836  0017FC  6E1D               	movwf	pad@i,c
  3837                           
  3838                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3839  0017FE  D00C               	goto	l398
  3840  001800                     
  3841                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3842  001800  0E00               	movlw	0
  3843  001802  6E07               	movwf	fputc@c+1,c
  3844  001804  0E20               	movlw	32
  3845  001806  6E06               	movwf	fputc@c,c
  3846  001808  C016  F008         	movff	pad@fp,fputc@fp
  3847  00180C  C017  F009         	movff	pad@fp+1,fputc@fp+1
  3848  001810  ECFE  F00A         	call	_fputc	;wreg free
  3849                           
  3850                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3851  001814  4A1D               	infsnz	pad@i,f,c
  3852  001816  2A1E               	incf	pad@i+1,f,c
  3853  001818                     l398:
  3854                           
  3855                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3856  001818  501F               	movf	pad@w,w,c
  3857  00181A  5C1D               	subwf	pad@i,w,c
  3858  00181C  501E               	movf	pad@i+1,w,c
  3859  00181E  0A80               	xorlw	128
  3860  001820  6E1C               	movwf	??_pad& (0+255),c
  3861  001822  5020               	movf	pad@w+1,w,c
  3862  001824  0A80               	xorlw	128
  3863  001826  581C               	subwfb	??_pad& (0+255),w,c
  3864  001828  A0D8               	btfss	status,0,c
  3865  00182A  D7EA               	goto	l399
  3866                           
  3867                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3868  00182C  B057               	btfsc	_flags,0,c
  3869  00182E  D00A               	goto	l401
  3870                           
  3871                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3872  001830  C018  F00F         	movff	pad@buf,fputs@s
  3873  001834  C019  F010         	movff	pad@buf+1,fputs@s+1
  3874  001838  C016  F011         	movff	pad@fp,fputs@fp
  3875  00183C  C017  F012         	movff	pad@fp+1,fputs@fp+1
  3876  001840  EC9B  F00D         	call	_fputs	;wreg free
  3877  001844                     l401:
  3878                           
  3879                           ;/Applications/microchip/xc8/v2.00/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3880  001844  C018  F006         	movff	pad@buf,strlen@s
  3881  001848  C019  F007         	movff	pad@buf+1,strlen@s+1
  3882  00184C  EC7E  F00D         	call	_strlen	;wreg free
  3883  001850  501F               	movf	pad@w,w,c
  3884  001852  2406               	addwf	?_strlen,w,c
  3885  001854  6E16               	movwf	?_pad,c
  3886  001856  5020               	movf	pad@w+1,w,c
  3887  001858  2007               	addwfc	?_strlen+1,w,c
  3888  00185A  6E17               	movwf	?_pad+1,c
  3889  00185C  0012               	return	
  3890  00185E                     __end_of_pad:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           postinc1	equ	0xFE6
  3899                           postdec1	equ	0xFE5
  3900                           fsr1h	equ	0xFE2
  3901                           fsr1l	equ	0xFE1
  3902                           indf2	equ	0xFDF
  3903                           postinc2	equ	0xFDE
  3904                           postdec2	equ	0xFDD
  3905                           plusw2	equ	0xFDB
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function _strlen *****************
  3911 ;; Defined at:
  3912 ;;		line 12 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/strlen.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  s               2    5[COMRAM] PTR const unsigned char 
  3915 ;;		 -> dbuf(32), 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  a               2    9[COMRAM] PTR const unsigned char 
  3918 ;;		 -> dbuf(32), 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  2    5[COMRAM] unsigned int 
  3921 ;; Registers used:
  3922 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3928 ;;      Params:         2       0       0       0
  3929 ;;      Locals:         2       0       0       0
  3930 ;;      Temps:          2       0       0       0
  3931 ;;      Totals:         6       0       0       0
  3932 ;;Total ram usage:        6 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    1
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_pad
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text15
  3943  001AFC                     __ptext15:
  3944                           	opt stack 0
  3945  001AFC                     _strlen:
  3946                           	opt stack 23
  3947                           
  3948                           ;incstack = 0
  3949  001AFC  C006  F00A         	movff	strlen@s,strlen@a
  3950  001B00  C007  F00B         	movff	strlen@s+1,strlen@a+1
  3951  001B04  D002               	goto	l1172
  3952  001B06  4A06               	infsnz	strlen@s,f,c
  3953  001B08  2A07               	incf	strlen@s+1,f,c
  3954  001B0A                     l1172:
  3955  001B0A  C006  FFD9         	movff	strlen@s,fsr2l
  3956  001B0E  C007  FFDA         	movff	strlen@s+1,fsr2h
  3957  001B12  50DF               	movf	indf2,w,c
  3958  001B14  A4D8               	btfss	status,2,c
  3959  001B16  D7F7               	goto	l1173
  3960  001B18  C00A  F008         	movff	strlen@a,??_strlen
  3961  001B1C  C00B  F009         	movff	strlen@a+1,??_strlen+1
  3962  001B20  1E08               	comf	??_strlen,f,c
  3963  001B22  1E09               	comf	??_strlen+1,f,c
  3964  001B24  4A08               	infsnz	??_strlen,f,c
  3965  001B26  2A09               	incf	??_strlen+1,f,c
  3966  001B28  5006               	movf	strlen@s,w,c
  3967  001B2A  2408               	addwf	??_strlen,w,c
  3968  001B2C  6E06               	movwf	?_strlen,c
  3969  001B2E  5007               	movf	strlen@s+1,w,c
  3970  001B30  2009               	addwfc	??_strlen+1,w,c
  3971  001B32  6E07               	movwf	?_strlen+1,c
  3972  001B34  0012               	return	
  3973  001B36                     __end_of_strlen:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           postinc1	equ	0xFE6
  3982                           postdec1	equ	0xFE5
  3983                           fsr1h	equ	0xFE2
  3984                           fsr1l	equ	0xFE1
  3985                           indf2	equ	0xFDF
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           plusw2	equ	0xFDB
  3989                           fsr2h	equ	0xFDA
  3990                           fsr2l	equ	0xFD9
  3991                           status	equ	0xFD8
  3992                           
  3993 ;; *************** function _fputs *****************
  3994 ;; Defined at:
  3995 ;;		line 8 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/nf_fputs.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3998 ;;		 -> dbuf(32), 
  3999 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  4000 ;;		 -> sprintf@f(6), 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  i               2   19[COMRAM] int 
  4003 ;;  c               1   18[COMRAM] unsigned char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  2   14[COMRAM] int 
  4006 ;; Registers used:
  4007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4013 ;;      Params:         4       0       0       0
  4014 ;;      Locals:         3       0       0       0
  4015 ;;      Temps:          0       0       0       0
  4016 ;;      Totals:         7       0       0       0
  4017 ;;Total ram usage:        7 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    3
  4020 ;; This function calls:
  4021 ;;		_fputc
  4022 ;; This function is called by:
  4023 ;;		_pad
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text16
  4028  001B36                     __ptext16:
  4029                           	opt stack 0
  4030  001B36                     _fputs:
  4031                           	opt stack 21
  4032                           
  4033                           ;incstack = 0
  4034  001B36  0E00               	movlw	0
  4035  001B38  6E15               	movwf	fputs@i+1,c
  4036  001B3A  0E00               	movlw	0
  4037  001B3C  6E14               	movwf	fputs@i,c
  4038  001B3E  D00B               	goto	l1156
  4039  001B40  C013  F006         	movff	fputs@c,fputc@c
  4040  001B44  6A07               	clrf	fputc@c+1,c
  4041  001B46  C011  F008         	movff	fputs@fp,fputc@fp
  4042  001B4A  C012  F009         	movff	fputs@fp+1,fputc@fp+1
  4043  001B4E  ECFE  F00A         	call	_fputc	;wreg free
  4044  001B52  4A14               	infsnz	fputs@i,f,c
  4045  001B54  2A15               	incf	fputs@i+1,f,c
  4046  001B56                     l1156:
  4047  001B56  5014               	movf	fputs@i,w,c
  4048  001B58  240F               	addwf	fputs@s,w,c
  4049  001B5A  6ED9               	movwf	fsr2l,c
  4050  001B5C  5015               	movf	fputs@i+1,w,c
  4051  001B5E  2010               	addwfc	fputs@s+1,w,c
  4052  001B60  6EDA               	movwf	fsr2h,c
  4053  001B62  50DF               	movf	indf2,w,c
  4054  001B64  6E13               	movwf	fputs@c,c
  4055  001B66  5013               	movf	fputs@c,w,c
  4056  001B68  B4D8               	btfsc	status,2,c
  4057  001B6A  0012               	return	
  4058  001B6C  D7E9               	goto	l1157
  4059  001B6E                     __end_of_fputs:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           tblptrh	equ	0xFF7
  4063                           tblptrl	equ	0xFF6
  4064                           tablat	equ	0xFF5
  4065                           postinc0	equ	0xFEE
  4066                           wreg	equ	0xFE8
  4067                           postinc1	equ	0xFE6
  4068                           postdec1	equ	0xFE5
  4069                           fsr1h	equ	0xFE2
  4070                           fsr1l	equ	0xFE1
  4071                           indf2	equ	0xFDF
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           plusw2	equ	0xFDB
  4075                           fsr2h	equ	0xFDA
  4076                           fsr2l	equ	0xFD9
  4077                           status	equ	0xFD8
  4078                           
  4079 ;; *************** function _fputc *****************
  4080 ;; Defined at:
  4081 ;;		line 8 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/nf_fputc.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  c               2    5[COMRAM] int 
  4084 ;;  fp              2    7[COMRAM] PTR struct _IO_FILE
  4085 ;;		 -> sprintf@f(6), 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;		None
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  2    5[COMRAM] int 
  4090 ;; Registers used:
  4091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4097 ;;      Params:         4       0       0       0
  4098 ;;      Locals:         0       0       0       0
  4099 ;;      Temps:          5       0       0       0
  4100 ;;      Totals:         9       0       0       0
  4101 ;;Total ram usage:        9 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    2
  4104 ;; This function calls:
  4105 ;;		_putch
  4106 ;; This function is called by:
  4107 ;;		_pad
  4108 ;;		_vfpfcnvrt
  4109 ;;		_fputs
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text17
  4114  0015FC                     __ptext17:
  4115                           	opt stack 0
  4116  0015FC                     _fputc:
  4117                           	opt stack 21
  4118                           
  4119                           ;incstack = 0
  4120  0015FC  5008               	movf	fputc@fp,w,c
  4121  0015FE  1009               	iorwf	fputc@fp+1,w,c
  4122  001600  B4D8               	btfsc	status,2,c
  4123  001602  D004               	goto	u2710
  4124  001604  5008               	movf	fputc@fp,w,c
  4125  001606  1009               	iorwf	fputc@fp+1,w,c
  4126  001608  A4D8               	btfss	status,2,c
  4127  00160A  D004               	goto	l1144
  4128  00160C                     u2710:
  4129  00160C  5006               	movf	fputc@c,w,c
  4130  00160E  EC9B  F00E         	call	_putch
  4131  001612  0012               	return	
  4132  001614                     l1144:
  4133  001614  EE20 F004          	lfsr	2,4
  4134  001618  5008               	movf	fputc@fp,w,c
  4135  00161A  26D9               	addwf	fsr2l,f,c
  4136  00161C  5009               	movf	fputc@fp+1,w,c
  4137  00161E  22DA               	addwfc	fsr2h,f,c
  4138  001620  50DE               	movf	postinc2,w,c
  4139  001622  10DE               	iorwf	postinc2,w,c
  4140  001624  B4D8               	btfsc	status,2,c
  4141  001626  D016               	goto	u2730
  4142  001628  EE20 F004          	lfsr	2,4
  4143  00162C  5008               	movf	fputc@fp,w,c
  4144  00162E  26D9               	addwf	fsr2l,f,c
  4145  001630  5009               	movf	fputc@fp+1,w,c
  4146  001632  22DA               	addwfc	fsr2h,f,c
  4147  001634  EE10 F002          	lfsr	1,2
  4148  001638  5008               	movf	fputc@fp,w,c
  4149  00163A  26E1               	addwf	fsr1l,f,c
  4150  00163C  5009               	movf	fputc@fp+1,w,c
  4151  00163E  22E2               	addwfc	fsr1h,f,c
  4152  001640  50DE               	movf	postinc2,w,c
  4153  001642  5CE6               	subwf	postinc1,w,c
  4154  001644  50E6               	movf	postinc1,w,c
  4155  001646  0A80               	xorlw	128
  4156  001648  6E0E               	movwf	(??_fputc+4)& (0+255),c
  4157  00164A  50DE               	movf	postinc2,w,c
  4158  00164C  0A80               	xorlw	128
  4159  00164E  580E               	subwfb	(??_fputc+4)& (0+255),w,c
  4160  001650  B0D8               	btfsc	status,0,c
  4161  001652  0012               	return	
  4162  001654                     u2730:
  4163  001654  EE20 F002          	lfsr	2,2
  4164  001658  5008               	movf	fputc@fp,w,c
  4165  00165A  26D9               	addwf	fsr2l,f,c
  4166  00165C  5009               	movf	fputc@fp+1,w,c
  4167  00165E  22DA               	addwfc	fsr2h,f,c
  4168  001660  CFDE F00A          	movff	postinc2,??_fputc
  4169  001664  CFDD F00B          	movff	postdec2,??_fputc+1
  4170  001668  C008  FFD9         	movff	fputc@fp,fsr2l
  4171  00166C  C009  FFDA         	movff	fputc@fp+1,fsr2h
  4172  001670  CFDE F00C          	movff	postinc2,??_fputc+2
  4173  001674  CFDD F00D          	movff	postdec2,??_fputc+3
  4174  001678  500A               	movf	??_fputc,w,c
  4175  00167A  240C               	addwf	??_fputc+2,w,c
  4176  00167C  6ED9               	movwf	fsr2l,c
  4177  00167E  500B               	movf	??_fputc+1,w,c
  4178  001680  200D               	addwfc	??_fputc+3,w,c
  4179  001682  6EDA               	movwf	fsr2h,c
  4180  001684  C006  FFDF         	movff	fputc@c,indf2
  4181  001688  EE20 F002          	lfsr	2,2
  4182  00168C  5008               	movf	fputc@fp,w,c
  4183  00168E  26D9               	addwf	fsr2l,f,c
  4184  001690  5009               	movf	fputc@fp+1,w,c
  4185  001692  22DA               	addwfc	fsr2h,f,c
  4186  001694  2ADE               	incf	postinc2,f,c
  4187  001696  0E00               	movlw	0
  4188  001698  22DD               	addwfc	postdec2,f,c
  4189  00169A  0012               	return	
  4190  00169C                     __end_of_fputc:
  4191                           	opt stack 0
  4192                           tblptru	equ	0xFF8
  4193                           tblptrh	equ	0xFF7
  4194                           tblptrl	equ	0xFF6
  4195                           tablat	equ	0xFF5
  4196                           postinc0	equ	0xFEE
  4197                           wreg	equ	0xFE8
  4198                           postinc1	equ	0xFE6
  4199                           postdec1	equ	0xFE5
  4200                           fsr1h	equ	0xFE2
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           plusw2	equ	0xFDB
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function _putch *****************
  4211 ;; Defined at:
  4212 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/putch.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  c               1    wreg     unsigned char 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  c               1    0[COMRAM] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  1    wreg      void 
  4219 ;; Registers used:
  4220 ;;		wreg
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4226 ;;      Params:         0       0       0       0
  4227 ;;      Locals:         0       0       0       0
  4228 ;;      Temps:          0       0       0       0
  4229 ;;      Totals:         0       0       0       0
  4230 ;;Total ram usage:        0 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    1
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_fputc
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text18
  4241  001D36                     __ptext18:
  4242                           	opt stack 0
  4243  001D36                     _putch:
  4244                           	opt stack 21
  4245                           
  4246                           ;incstack = 0
  4247  001D36  0012               	return		;funcret
  4248  001D38                     __end_of_putch:
  4249                           	opt stack 0
  4250                           tblptru	equ	0xFF8
  4251                           tblptrh	equ	0xFF7
  4252                           tblptrl	equ	0xFF6
  4253                           tablat	equ	0xFF5
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           postinc1	equ	0xFE6
  4257                           postdec1	equ	0xFE5
  4258                           fsr1h	equ	0xFE2
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           plusw2	equ	0xFDB
  4264                           fsr2h	equ	0xFDA
  4265                           fsr2l	equ	0xFD9
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _abs *****************
  4269 ;; Defined at:
  4270 ;;		line 1 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/abs.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  a               2   23[COMRAM] int 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  2   23[COMRAM] int 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4284 ;;      Params:         2       0       0       0
  4285 ;;      Locals:         0       0       0       0
  4286 ;;      Temps:          2       0       0       0
  4287 ;;      Totals:         4       0       0       0
  4288 ;;Total ram usage:        4 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    1
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_dtoa
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text19
  4299  001B6E                     __ptext19:
  4300                           	opt stack 0
  4301  001B6E                     _abs:
  4302                           	opt stack 24
  4303                           
  4304                           ;incstack = 0
  4305  001B6E  BE19               	btfsc	abs@a+1,7,c
  4306  001B70  D005               	goto	u2800
  4307  001B72  5019               	movf	abs@a+1,w,c
  4308  001B74  E110               	bnz	l1136
  4309  001B76  0418               	decf	abs@a,w,c
  4310  001B78  B0D8               	btfsc	status,0,c
  4311  001B7A  D00D               	goto	l1136
  4312  001B7C                     u2800:
  4313  001B7C  C018  F01A         	movff	abs@a,??_abs
  4314  001B80  C019  F01B         	movff	abs@a+1,??_abs+1
  4315  001B84  1E1A               	comf	??_abs,f,c
  4316  001B86  1E1B               	comf	??_abs+1,f,c
  4317  001B88  4A1A               	infsnz	??_abs,f,c
  4318  001B8A  2A1B               	incf	??_abs+1,f,c
  4319  001B8C  C01A  F018         	movff	??_abs,?_abs
  4320  001B90  C01B  F019         	movff	??_abs+1,?_abs+1
  4321  001B94  0012               	return	
  4322  001B96                     l1136:
  4323  001B96  C018  F018         	movff	abs@a,?_abs
  4324  001B9A  C019  F019         	movff	abs@a+1,?_abs+1
  4325  001B9E  0012               	return	
  4326  001BA0                     __end_of_abs:
  4327                           	opt stack 0
  4328                           tblptru	equ	0xFF8
  4329                           tblptrh	equ	0xFF7
  4330                           tblptrl	equ	0xFF6
  4331                           tablat	equ	0xFF5
  4332                           postinc0	equ	0xFEE
  4333                           wreg	equ	0xFE8
  4334                           postinc1	equ	0xFE6
  4335                           postdec1	equ	0xFE5
  4336                           fsr1h	equ	0xFE2
  4337                           fsr1l	equ	0xFE1
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           plusw2	equ	0xFDB
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function ___aomod *****************
  4347 ;; Defined at:
  4348 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/aomod.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  dividend        8    5[COMRAM] long long 
  4351 ;;  divisor         8   13[COMRAM] long long 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  sign            1   22[COMRAM] unsigned char 
  4354 ;;  counter         1   21[COMRAM] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  8    5[COMRAM] long long 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4364 ;;      Params:        16       0       0       0
  4365 ;;      Locals:         2       0       0       0
  4366 ;;      Temps:          0       0       0       0
  4367 ;;      Totals:        18       0       0       0
  4368 ;;Total ram usage:       18 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    1
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_dtoa
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text20
  4379  001096                     __ptext20:
  4380                           	opt stack 0
  4381  001096                     ___aomod:
  4382                           	opt stack 24
  4383                           
  4384                           ;incstack = 0
  4385  001096  0E00               	movlw	0
  4386  001098  6E17               	movwf	___aomod@sign,c
  4387  00109A  AE0D               	btfss	___aomod@dividend+7,7,c
  4388  00109C  D012               	goto	l578
  4389  00109E  1E0D               	comf	___aomod@dividend+7,f,c
  4390  0010A0  1E0C               	comf	___aomod@dividend+6,f,c
  4391  0010A2  1E0B               	comf	___aomod@dividend+5,f,c
  4392  0010A4  1E0A               	comf	___aomod@dividend+4,f,c
  4393  0010A6  1E09               	comf	___aomod@dividend+3,f,c
  4394  0010A8  1E08               	comf	___aomod@dividend+2,f,c
  4395  0010AA  1E07               	comf	___aomod@dividend+1,f,c
  4396  0010AC  6C06               	negf	___aomod@dividend,c
  4397  0010AE  0E00               	movlw	0
  4398  0010B0  2207               	addwfc	___aomod@dividend+1,f,c
  4399  0010B2  2208               	addwfc	___aomod@dividend+2,f,c
  4400  0010B4  2209               	addwfc	___aomod@dividend+3,f,c
  4401  0010B6  220A               	addwfc	___aomod@dividend+4,f,c
  4402  0010B8  220B               	addwfc	___aomod@dividend+5,f,c
  4403  0010BA  220C               	addwfc	___aomod@dividend+6,f,c
  4404  0010BC  220D               	addwfc	___aomod@dividend+7,f,c
  4405  0010BE  0E01               	movlw	1
  4406  0010C0  6E17               	movwf	___aomod@sign,c
  4407  0010C2                     l578:
  4408  0010C2  AE15               	btfss	___aomod@divisor+7,7,c
  4409  0010C4  D010               	goto	l579
  4410  0010C6  1E15               	comf	___aomod@divisor+7,f,c
  4411  0010C8  1E14               	comf	___aomod@divisor+6,f,c
  4412  0010CA  1E13               	comf	___aomod@divisor+5,f,c
  4413  0010CC  1E12               	comf	___aomod@divisor+4,f,c
  4414  0010CE  1E11               	comf	___aomod@divisor+3,f,c
  4415  0010D0  1E10               	comf	___aomod@divisor+2,f,c
  4416  0010D2  1E0F               	comf	___aomod@divisor+1,f,c
  4417  0010D4  6C0E               	negf	___aomod@divisor,c
  4418  0010D6  0E00               	movlw	0
  4419  0010D8  220F               	addwfc	___aomod@divisor+1,f,c
  4420  0010DA  2210               	addwfc	___aomod@divisor+2,f,c
  4421  0010DC  2211               	addwfc	___aomod@divisor+3,f,c
  4422  0010DE  2212               	addwfc	___aomod@divisor+4,f,c
  4423  0010E0  2213               	addwfc	___aomod@divisor+5,f,c
  4424  0010E2  2214               	addwfc	___aomod@divisor+6,f,c
  4425  0010E4  2215               	addwfc	___aomod@divisor+7,f,c
  4426  0010E6                     l579:
  4427  0010E6  500E               	movf	___aomod@divisor,w,c
  4428  0010E8  100F               	iorwf	___aomod@divisor+1,w,c
  4429  0010EA  1010               	iorwf	___aomod@divisor+2,w,c
  4430  0010EC  1011               	iorwf	___aomod@divisor+3,w,c
  4431  0010EE  1012               	iorwf	___aomod@divisor+4,w,c
  4432  0010F0  1013               	iorwf	___aomod@divisor+5,w,c
  4433  0010F2  1014               	iorwf	___aomod@divisor+6,w,c
  4434  0010F4  1015               	iorwf	___aomod@divisor+7,w,c
  4435  0010F6  B4D8               	btfsc	status,2,c
  4436  0010F8  D03C               	goto	l586
  4437  0010FA  0E01               	movlw	1
  4438  0010FC  6E16               	movwf	___aomod@counter,c
  4439  0010FE  D00A               	goto	l581
  4440  001100  90D8               	bcf	status,0,c
  4441  001102  360E               	rlcf	___aomod@divisor,f,c
  4442  001104  360F               	rlcf	___aomod@divisor+1,f,c
  4443  001106  3610               	rlcf	___aomod@divisor+2,f,c
  4444  001108  3611               	rlcf	___aomod@divisor+3,f,c
  4445  00110A  3612               	rlcf	___aomod@divisor+4,f,c
  4446  00110C  3613               	rlcf	___aomod@divisor+5,f,c
  4447  00110E  3614               	rlcf	___aomod@divisor+6,f,c
  4448  001110  3615               	rlcf	___aomod@divisor+7,f,c
  4449  001112  2A16               	incf	___aomod@counter,f,c
  4450  001114                     l581:
  4451  001114  AE15               	btfss	___aomod@divisor+7,7,c
  4452  001116  D7F4               	goto	l582
  4453  001118                     u2910:
  4454  001118  500E               	movf	___aomod@divisor,w,c
  4455  00111A  5C06               	subwf	___aomod@dividend,w,c
  4456  00111C  500F               	movf	___aomod@divisor+1,w,c
  4457  00111E  5807               	subwfb	___aomod@dividend+1,w,c
  4458  001120  5010               	movf	___aomod@divisor+2,w,c
  4459  001122  5808               	subwfb	___aomod@dividend+2,w,c
  4460  001124  5011               	movf	___aomod@divisor+3,w,c
  4461  001126  5809               	subwfb	___aomod@dividend+3,w,c
  4462  001128  5012               	movf	___aomod@divisor+4,w,c
  4463  00112A  580A               	subwfb	___aomod@dividend+4,w,c
  4464  00112C  5013               	movf	___aomod@divisor+5,w,c
  4465  00112E  580B               	subwfb	___aomod@dividend+5,w,c
  4466  001130  5014               	movf	___aomod@divisor+6,w,c
  4467  001132  580C               	subwfb	___aomod@dividend+6,w,c
  4468  001134  5015               	movf	___aomod@divisor+7,w,c
  4469  001136  580D               	subwfb	___aomod@dividend+7,w,c
  4470  001138  A0D8               	btfss	status,0,c
  4471  00113A  D010               	goto	l585
  4472  00113C  500E               	movf	___aomod@divisor,w,c
  4473  00113E  5E06               	subwf	___aomod@dividend,f,c
  4474  001140  500F               	movf	___aomod@divisor+1,w,c
  4475  001142  5A07               	subwfb	___aomod@dividend+1,f,c
  4476  001144  5010               	movf	___aomod@divisor+2,w,c
  4477  001146  5A08               	subwfb	___aomod@dividend+2,f,c
  4478  001148  5011               	movf	___aomod@divisor+3,w,c
  4479  00114A  5A09               	subwfb	___aomod@dividend+3,f,c
  4480  00114C  5012               	movf	___aomod@divisor+4,w,c
  4481  00114E  5A0A               	subwfb	___aomod@dividend+4,f,c
  4482  001150  5013               	movf	___aomod@divisor+5,w,c
  4483  001152  5A0B               	subwfb	___aomod@dividend+5,f,c
  4484  001154  5014               	movf	___aomod@divisor+6,w,c
  4485  001156  5A0C               	subwfb	___aomod@dividend+6,f,c
  4486  001158  5015               	movf	___aomod@divisor+7,w,c
  4487  00115A  5A0D               	subwfb	___aomod@dividend+7,f,c
  4488  00115C                     l585:
  4489  00115C  90D8               	bcf	status,0,c
  4490  00115E  3215               	rrcf	___aomod@divisor+7,f,c
  4491  001160  3214               	rrcf	___aomod@divisor+6,f,c
  4492  001162  3213               	rrcf	___aomod@divisor+5,f,c
  4493  001164  3212               	rrcf	___aomod@divisor+4,f,c
  4494  001166  3211               	rrcf	___aomod@divisor+3,f,c
  4495  001168  3210               	rrcf	___aomod@divisor+2,f,c
  4496  00116A  320F               	rrcf	___aomod@divisor+1,f,c
  4497  00116C  320E               	rrcf	___aomod@divisor,f,c
  4498  00116E  2E16               	decfsz	___aomod@counter,f,c
  4499  001170  D7D3               	goto	u2910
  4500  001172                     l586:
  4501  001172  5017               	movf	___aomod@sign,w,c
  4502  001174  B4D8               	btfsc	status,2,c
  4503  001176  D010               	goto	l587
  4504  001178  1E0D               	comf	___aomod@dividend+7,f,c
  4505  00117A  1E0C               	comf	___aomod@dividend+6,f,c
  4506  00117C  1E0B               	comf	___aomod@dividend+5,f,c
  4507  00117E  1E0A               	comf	___aomod@dividend+4,f,c
  4508  001180  1E09               	comf	___aomod@dividend+3,f,c
  4509  001182  1E08               	comf	___aomod@dividend+2,f,c
  4510  001184  1E07               	comf	___aomod@dividend+1,f,c
  4511  001186  6C06               	negf	___aomod@dividend,c
  4512  001188  0E00               	movlw	0
  4513  00118A  2207               	addwfc	___aomod@dividend+1,f,c
  4514  00118C  2208               	addwfc	___aomod@dividend+2,f,c
  4515  00118E  2209               	addwfc	___aomod@dividend+3,f,c
  4516  001190  220A               	addwfc	___aomod@dividend+4,f,c
  4517  001192  220B               	addwfc	___aomod@dividend+5,f,c
  4518  001194  220C               	addwfc	___aomod@dividend+6,f,c
  4519  001196  220D               	addwfc	___aomod@dividend+7,f,c
  4520  001198                     l587:
  4521  001198  C006  F006         	movff	___aomod@dividend,?___aomod
  4522  00119C  C007  F007         	movff	___aomod@dividend+1,?___aomod+1
  4523  0011A0  C008  F008         	movff	___aomod@dividend+2,?___aomod+2
  4524  0011A4  C009  F009         	movff	___aomod@dividend+3,?___aomod+3
  4525  0011A8  C00A  F00A         	movff	___aomod@dividend+4,?___aomod+4
  4526  0011AC  C00B  F00B         	movff	___aomod@dividend+5,?___aomod+5
  4527  0011B0  C00C  F00C         	movff	___aomod@dividend+6,?___aomod+6
  4528  0011B4  C00D  F00D         	movff	___aomod@dividend+7,?___aomod+7
  4529  0011B8  0012               	return	
  4530  0011BA                     __end_of___aomod:
  4531                           	opt stack 0
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           postinc1	equ	0xFE6
  4539                           postdec1	equ	0xFE5
  4540                           fsr1h	equ	0xFE2
  4541                           fsr1l	equ	0xFE1
  4542                           indf2	equ	0xFDF
  4543                           postinc2	equ	0xFDE
  4544                           postdec2	equ	0xFDD
  4545                           plusw2	equ	0xFDB
  4546                           fsr2h	equ	0xFDA
  4547                           fsr2l	equ	0xFD9
  4548                           status	equ	0xFD8
  4549                           
  4550 ;; *************** function ___aodiv *****************
  4551 ;; Defined at:
  4552 ;;		line 9 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/aodiv.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  dividend        8    5[COMRAM] long long 
  4555 ;;  divisor         8   13[COMRAM] long long 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  quotient        8   23[COMRAM] long long 
  4558 ;;  sign            1   22[COMRAM] unsigned char 
  4559 ;;  counter         1   21[COMRAM] unsigned char 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  8    5[COMRAM] long long 
  4562 ;; Registers used:
  4563 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4569 ;;      Params:        16       0       0       0
  4570 ;;      Locals:        10       0       0       0
  4571 ;;      Temps:          0       0       0       0
  4572 ;;      Totals:        26       0       0       0
  4573 ;;Total ram usage:       26 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    1
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_dtoa
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text21
  4584  000F4E                     __ptext21:
  4585                           	opt stack 0
  4586  000F4E                     ___aodiv:
  4587                           	opt stack 24
  4588                           
  4589                           ;incstack = 0
  4590  000F4E  0E00               	movlw	0
  4591  000F50  6E17               	movwf	___aodiv@sign,c
  4592  000F52  AE15               	btfss	___aodiv@divisor+7,7,c
  4593  000F54  D012               	goto	l565
  4594  000F56  1E15               	comf	___aodiv@divisor+7,f,c
  4595  000F58  1E14               	comf	___aodiv@divisor+6,f,c
  4596  000F5A  1E13               	comf	___aodiv@divisor+5,f,c
  4597  000F5C  1E12               	comf	___aodiv@divisor+4,f,c
  4598  000F5E  1E11               	comf	___aodiv@divisor+3,f,c
  4599  000F60  1E10               	comf	___aodiv@divisor+2,f,c
  4600  000F62  1E0F               	comf	___aodiv@divisor+1,f,c
  4601  000F64  6C0E               	negf	___aodiv@divisor,c
  4602  000F66  0E00               	movlw	0
  4603  000F68  220F               	addwfc	___aodiv@divisor+1,f,c
  4604  000F6A  2210               	addwfc	___aodiv@divisor+2,f,c
  4605  000F6C  2211               	addwfc	___aodiv@divisor+3,f,c
  4606  000F6E  2212               	addwfc	___aodiv@divisor+4,f,c
  4607  000F70  2213               	addwfc	___aodiv@divisor+5,f,c
  4608  000F72  2214               	addwfc	___aodiv@divisor+6,f,c
  4609  000F74  2215               	addwfc	___aodiv@divisor+7,f,c
  4610  000F76  0E01               	movlw	1
  4611  000F78  6E17               	movwf	___aodiv@sign,c
  4612  000F7A                     l565:
  4613  000F7A  AE0D               	btfss	___aodiv@dividend+7,7,c
  4614  000F7C  D012               	goto	l566
  4615  000F7E  1E0D               	comf	___aodiv@dividend+7,f,c
  4616  000F80  1E0C               	comf	___aodiv@dividend+6,f,c
  4617  000F82  1E0B               	comf	___aodiv@dividend+5,f,c
  4618  000F84  1E0A               	comf	___aodiv@dividend+4,f,c
  4619  000F86  1E09               	comf	___aodiv@dividend+3,f,c
  4620  000F88  1E08               	comf	___aodiv@dividend+2,f,c
  4621  000F8A  1E07               	comf	___aodiv@dividend+1,f,c
  4622  000F8C  6C06               	negf	___aodiv@dividend,c
  4623  000F8E  0E00               	movlw	0
  4624  000F90  2207               	addwfc	___aodiv@dividend+1,f,c
  4625  000F92  2208               	addwfc	___aodiv@dividend+2,f,c
  4626  000F94  2209               	addwfc	___aodiv@dividend+3,f,c
  4627  000F96  220A               	addwfc	___aodiv@dividend+4,f,c
  4628  000F98  220B               	addwfc	___aodiv@dividend+5,f,c
  4629  000F9A  220C               	addwfc	___aodiv@dividend+6,f,c
  4630  000F9C  220D               	addwfc	___aodiv@dividend+7,f,c
  4631  000F9E  0E01               	movlw	1
  4632  000FA0  1A17               	xorwf	___aodiv@sign,f,c
  4633  000FA2                     l566:
  4634  000FA2  EE20  F018         	lfsr	2,___aodiv@quotient
  4635  000FA6  0E07               	movlw	7
  4636  000FA8                     u2831:
  4637  000FA8  6ADE               	clrf	postinc2,c
  4638  000FAA  06E8               	decf	wreg,f,c
  4639  000FAC  E2FD               	bc	u2831
  4640  000FAE  500E               	movf	___aodiv@divisor,w,c
  4641  000FB0  100F               	iorwf	___aodiv@divisor+1,w,c
  4642  000FB2  1010               	iorwf	___aodiv@divisor+2,w,c
  4643  000FB4  1011               	iorwf	___aodiv@divisor+3,w,c
  4644  000FB6  1012               	iorwf	___aodiv@divisor+4,w,c
  4645  000FB8  1013               	iorwf	___aodiv@divisor+5,w,c
  4646  000FBA  1014               	iorwf	___aodiv@divisor+6,w,c
  4647  000FBC  1015               	iorwf	___aodiv@divisor+7,w,c
  4648  000FBE  B4D8               	btfsc	status,2,c
  4649  000FC0  D046               	goto	l573
  4650  000FC2  0E01               	movlw	1
  4651  000FC4  6E16               	movwf	___aodiv@counter,c
  4652  000FC6  D00A               	goto	l568
  4653  000FC8  90D8               	bcf	status,0,c
  4654  000FCA  360E               	rlcf	___aodiv@divisor,f,c
  4655  000FCC  360F               	rlcf	___aodiv@divisor+1,f,c
  4656  000FCE  3610               	rlcf	___aodiv@divisor+2,f,c
  4657  000FD0  3611               	rlcf	___aodiv@divisor+3,f,c
  4658  000FD2  3612               	rlcf	___aodiv@divisor+4,f,c
  4659  000FD4  3613               	rlcf	___aodiv@divisor+5,f,c
  4660  000FD6  3614               	rlcf	___aodiv@divisor+6,f,c
  4661  000FD8  3615               	rlcf	___aodiv@divisor+7,f,c
  4662  000FDA  2A16               	incf	___aodiv@counter,f,c
  4663  000FDC                     l568:
  4664  000FDC  AE15               	btfss	___aodiv@divisor+7,7,c
  4665  000FDE  D7F4               	goto	l569
  4666  000FE0                     u2850:
  4667  000FE0  90D8               	bcf	status,0,c
  4668  000FE2  3618               	rlcf	___aodiv@quotient,f,c
  4669  000FE4  3619               	rlcf	___aodiv@quotient+1,f,c
  4670  000FE6  361A               	rlcf	___aodiv@quotient+2,f,c
  4671  000FE8  361B               	rlcf	___aodiv@quotient+3,f,c
  4672  000FEA  361C               	rlcf	___aodiv@quotient+4,f,c
  4673  000FEC  361D               	rlcf	___aodiv@quotient+5,f,c
  4674  000FEE  361E               	rlcf	___aodiv@quotient+6,f,c
  4675  000FF0  361F               	rlcf	___aodiv@quotient+7,f,c
  4676  000FF2  500E               	movf	___aodiv@divisor,w,c
  4677  000FF4  5C06               	subwf	___aodiv@dividend,w,c
  4678  000FF6  500F               	movf	___aodiv@divisor+1,w,c
  4679  000FF8  5807               	subwfb	___aodiv@dividend+1,w,c
  4680  000FFA  5010               	movf	___aodiv@divisor+2,w,c
  4681  000FFC  5808               	subwfb	___aodiv@dividend+2,w,c
  4682  000FFE  5011               	movf	___aodiv@divisor+3,w,c
  4683  001000  5809               	subwfb	___aodiv@dividend+3,w,c
  4684  001002  5012               	movf	___aodiv@divisor+4,w,c
  4685  001004  580A               	subwfb	___aodiv@dividend+4,w,c
  4686  001006  5013               	movf	___aodiv@divisor+5,w,c
  4687  001008  580B               	subwfb	___aodiv@dividend+5,w,c
  4688  00100A  5014               	movf	___aodiv@divisor+6,w,c
  4689  00100C  580C               	subwfb	___aodiv@dividend+6,w,c
  4690  00100E  5015               	movf	___aodiv@divisor+7,w,c
  4691  001010  580D               	subwfb	___aodiv@dividend+7,w,c
  4692  001012  A0D8               	btfss	status,0,c
  4693  001014  D011               	goto	l572
  4694  001016  500E               	movf	___aodiv@divisor,w,c
  4695  001018  5E06               	subwf	___aodiv@dividend,f,c
  4696  00101A  500F               	movf	___aodiv@divisor+1,w,c
  4697  00101C  5A07               	subwfb	___aodiv@dividend+1,f,c
  4698  00101E  5010               	movf	___aodiv@divisor+2,w,c
  4699  001020  5A08               	subwfb	___aodiv@dividend+2,f,c
  4700  001022  5011               	movf	___aodiv@divisor+3,w,c
  4701  001024  5A09               	subwfb	___aodiv@dividend+3,f,c
  4702  001026  5012               	movf	___aodiv@divisor+4,w,c
  4703  001028  5A0A               	subwfb	___aodiv@dividend+4,f,c
  4704  00102A  5013               	movf	___aodiv@divisor+5,w,c
  4705  00102C  5A0B               	subwfb	___aodiv@dividend+5,f,c
  4706  00102E  5014               	movf	___aodiv@divisor+6,w,c
  4707  001030  5A0C               	subwfb	___aodiv@dividend+6,f,c
  4708  001032  5015               	movf	___aodiv@divisor+7,w,c
  4709  001034  5A0D               	subwfb	___aodiv@dividend+7,f,c
  4710  001036  8018               	bsf	___aodiv@quotient,0,c
  4711  001038                     l572:
  4712  001038  90D8               	bcf	status,0,c
  4713  00103A  3215               	rrcf	___aodiv@divisor+7,f,c
  4714  00103C  3214               	rrcf	___aodiv@divisor+6,f,c
  4715  00103E  3213               	rrcf	___aodiv@divisor+5,f,c
  4716  001040  3212               	rrcf	___aodiv@divisor+4,f,c
  4717  001042  3211               	rrcf	___aodiv@divisor+3,f,c
  4718  001044  3210               	rrcf	___aodiv@divisor+2,f,c
  4719  001046  320F               	rrcf	___aodiv@divisor+1,f,c
  4720  001048  320E               	rrcf	___aodiv@divisor,f,c
  4721  00104A  2E16               	decfsz	___aodiv@counter,f,c
  4722  00104C  D7C9               	goto	u2850
  4723  00104E                     l573:
  4724  00104E  5017               	movf	___aodiv@sign,w,c
  4725  001050  B4D8               	btfsc	status,2,c
  4726  001052  D010               	goto	l574
  4727  001054  1E1F               	comf	___aodiv@quotient+7,f,c
  4728  001056  1E1E               	comf	___aodiv@quotient+6,f,c
  4729  001058  1E1D               	comf	___aodiv@quotient+5,f,c
  4730  00105A  1E1C               	comf	___aodiv@quotient+4,f,c
  4731  00105C  1E1B               	comf	___aodiv@quotient+3,f,c
  4732  00105E  1E1A               	comf	___aodiv@quotient+2,f,c
  4733  001060  1E19               	comf	___aodiv@quotient+1,f,c
  4734  001062  6C18               	negf	___aodiv@quotient,c
  4735  001064  0E00               	movlw	0
  4736  001066  2219               	addwfc	___aodiv@quotient+1,f,c
  4737  001068  221A               	addwfc	___aodiv@quotient+2,f,c
  4738  00106A  221B               	addwfc	___aodiv@quotient+3,f,c
  4739  00106C  221C               	addwfc	___aodiv@quotient+4,f,c
  4740  00106E  221D               	addwfc	___aodiv@quotient+5,f,c
  4741  001070  221E               	addwfc	___aodiv@quotient+6,f,c
  4742  001072  221F               	addwfc	___aodiv@quotient+7,f,c
  4743  001074                     l574:
  4744  001074  C018  F006         	movff	___aodiv@quotient,?___aodiv
  4745  001078  C019  F007         	movff	___aodiv@quotient+1,?___aodiv+1
  4746  00107C  C01A  F008         	movff	___aodiv@quotient+2,?___aodiv+2
  4747  001080  C01B  F009         	movff	___aodiv@quotient+3,?___aodiv+3
  4748  001084  C01C  F00A         	movff	___aodiv@quotient+4,?___aodiv+4
  4749  001088  C01D  F00B         	movff	___aodiv@quotient+5,?___aodiv+5
  4750  00108C  C01E  F00C         	movff	___aodiv@quotient+6,?___aodiv+6
  4751  001090  C01F  F00D         	movff	___aodiv@quotient+7,?___aodiv+7
  4752  001094  0012               	return	
  4753  001096                     __end_of___aodiv:
  4754                           	opt stack 0
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           postinc0	equ	0xFEE
  4760                           wreg	equ	0xFE8
  4761                           postinc1	equ	0xFE6
  4762                           postdec1	equ	0xFE5
  4763                           fsr1h	equ	0xFE2
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           plusw2	equ	0xFDB
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _LCD_string *****************
  4774 ;; Defined at:
  4775 ;;		line 101 in file "lcd.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  string          2    9[COMRAM] PTR unsigned char 
  4778 ;;		 -> check_sum@buf_cs(16), print_IR@buf(16), 
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;		None
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      void 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4790 ;;      Params:         2       0       0       0
  4791 ;;      Locals:         0       0       0       0
  4792 ;;      Temps:          0       0       0       0
  4793 ;;      Totals:         2       0       0       0
  4794 ;;Total ram usage:        2 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    4
  4797 ;; This function calls:
  4798 ;;		_LCD_send
  4799 ;; This function is called by:
  4800 ;;		_print_IR
  4801 ;;		_check_sum
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text22
  4806  001BA0                     __ptext22:
  4807                           	opt stack 0
  4808  001BA0                     _LCD_string:
  4809                           	opt stack 25
  4810                           
  4811                           ;lcd.c: 102:     while (*string != 0) {
  4812                           
  4813                           ;incstack = 0
  4814  001BA0  D00F               	goto	l49
  4815  001BA2                     
  4816                           ;lcd.c: 105:         LCD_send(*string++, 1);
  4817  001BA2  0E01               	movlw	1
  4818  001BA4  6E08               	movwf	LCD_send@type,c
  4819  001BA6  C00A  FFD9         	movff	LCD_string@string,fsr2l
  4820  001BAA  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  4821  001BAE  50DF               	movf	indf2,w,c
  4822  001BB0  EC00  F00E         	call	_LCD_send
  4823  001BB4  4A0A               	infsnz	LCD_string@string,f,c
  4824  001BB6  2A0B               	incf	LCD_string@string+1,f,c
  4825                           
  4826                           ;lcd.c: 106:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  4827  001BB8  0E21               	movlw	33
  4828  001BBA                     u3587:
  4829  001BBA  2EE8               	decfsz	wreg,f,c
  4830  001BBC  D7FE               	bra	u3587
  4831  001BBE  F000               	nop	
  4832  001BC0                     l49:
  4833                           
  4834                           ;lcd.c: 102:     while (*string != 0) {
  4835  001BC0  C00A  FFD9         	movff	LCD_string@string,fsr2l
  4836  001BC4  C00B  FFDA         	movff	LCD_string@string+1,fsr2h
  4837  001BC8  50DF               	movf	indf2,w,c
  4838  001BCA  B4D8               	btfsc	status,2,c
  4839  001BCC  0012               	return	
  4840  001BCE  D7E9               	goto	l50
  4841  001BD0                     __end_of_LCD_string:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           postinc1	equ	0xFE6
  4850                           postdec1	equ	0xFE5
  4851                           fsr1h	equ	0xFE2
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           plusw2	equ	0xFDB
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function _LCD_line *****************
  4862 ;; Defined at:
  4863 ;;		line 89 in file "lcd.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  line            1    wreg     unsigned char 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  line            1    9[COMRAM] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4877 ;;      Params:         0       0       0       0
  4878 ;;      Locals:         1       0       0       0
  4879 ;;      Temps:          0       0       0       0
  4880 ;;      Totals:         1       0       0       0
  4881 ;;Total ram usage:        1 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    4
  4884 ;; This function calls:
  4885 ;;		_LCD_send
  4886 ;; This function is called by:
  4887 ;;		_print_IR
  4888 ;;		_print_RFID
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text23
  4893  001BD0                     __ptext23:
  4894                           	opt stack 0
  4895  001BD0                     _LCD_line:
  4896                           	opt stack 25
  4897                           
  4898                           ;incstack = 0
  4899                           ;LCD_line@line stored from wreg
  4900  001BD0  6E0A               	movwf	LCD_line@line,c
  4901                           
  4902                           ;lcd.c: 90:     if (line == 1) {
  4903  001BD2  040A               	decf	LCD_line@line,w,c
  4904  001BD4  A4D8               	btfss	status,2,c
  4905  001BD6  D006               	goto	l43
  4906                           
  4907                           ;lcd.c: 91:         LCD_send(0x80, 0);
  4908  001BD8  0E00               	movlw	0
  4909  001BDA  6E08               	movwf	LCD_send@type,c
  4910  001BDC  0E80               	movlw	128
  4911  001BDE  EC00  F00E         	call	_LCD_send
  4912                           
  4913                           ;lcd.c: 92:     } else if (line == 2) {
  4914  001BE2  D009               	goto	l45
  4915  001BE4                     l43:
  4916  001BE4  0E02               	movlw	2
  4917  001BE6  180A               	xorwf	LCD_line@line,w,c
  4918  001BE8  A4D8               	btfss	status,2,c
  4919  001BEA  D005               	goto	l45
  4920                           
  4921                           ;lcd.c: 93:         LCD_send(0xC0, 0);
  4922  001BEC  0E00               	movlw	0
  4923  001BEE  6E08               	movwf	LCD_send@type,c
  4924  001BF0  0EC0               	movlw	192
  4925  001BF2  EC00  F00E         	call	_LCD_send
  4926  001BF6                     l45:
  4927                           
  4928                           ;lcd.c: 95:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  4929  001BF6  0E21               	movlw	33
  4930  001BF8                     u3597:
  4931  001BF8  2EE8               	decfsz	wreg,f,c
  4932  001BFA  D7FE               	bra	u3597
  4933  001BFC  F000               	nop	
  4934  001BFE  0012               	return		;funcret
  4935  001C00                     __end_of_LCD_line:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           postinc1	equ	0xFE6
  4944                           postdec1	equ	0xFE5
  4945                           fsr1h	equ	0xFE2
  4946                           fsr1l	equ	0xFE1
  4947                           indf2	equ	0xFDF
  4948                           postinc2	equ	0xFDE
  4949                           postdec2	equ	0xFDD
  4950                           plusw2	equ	0xFDB
  4951                           fsr2h	equ	0xFDA
  4952                           fsr2l	equ	0xFD9
  4953                           status	equ	0xFD8
  4954                           
  4955 ;; *************** function _LCD_clear *****************
  4956 ;; Defined at:
  4957 ;;		line 115 in file "lcd.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;		None
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4971 ;;      Params:         0       0       0       0
  4972 ;;      Locals:         0       0       0       0
  4973 ;;      Temps:          1       0       0       0
  4974 ;;      Totals:         1       0       0       0
  4975 ;;Total ram usage:        1 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    4
  4978 ;; This function calls:
  4979 ;;		_LCD_send
  4980 ;; This function is called by:
  4981 ;;		_print_IR
  4982 ;;		_print_RFID
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text24
  4987  001C98                     __ptext24:
  4988                           	opt stack 0
  4989  001C98                     _LCD_clear:
  4990                           	opt stack 25
  4991                           
  4992                           ;lcd.c: 116:     LCD_send(0b00000001, 0);
  4993                           
  4994                           ;incstack = 0
  4995  001C98  0E00               	movlw	0
  4996  001C9A  6E08               	movwf	LCD_send@type,c
  4997  001C9C  0E01               	movlw	1
  4998  001C9E  EC00  F00E         	call	_LCD_send
  4999                           
  5000                           ;lcd.c: 117:     _delay((unsigned long)((2)*(8000000/4000.0)));
  5001  001CA2  0E06               	movlw	6
  5002  001CA4  6E0A               	movwf	??_LCD_clear& (0+255),c
  5003  001CA6  0E30               	movlw	48
  5004  001CA8                     u3607:
  5005  001CA8  2EE8               	decfsz	wreg,f,c
  5006  001CAA  D7FE               	bra	u3607
  5007  001CAC  2E0A               	decfsz	??_LCD_clear& (0+255),f,c
  5008  001CAE  D7FC               	bra	u3607
  5009  001CB0  D000               	nop2	
  5010  001CB2  0012               	return		;funcret
  5011  001CB4                     __end_of_LCD_clear:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           postinc1	equ	0xFE6
  5020                           postdec1	equ	0xFE5
  5021                           fsr1h	equ	0xFE2
  5022                           fsr1l	equ	0xFE1
  5023                           indf2	equ	0xFDF
  5024                           postinc2	equ	0xFDE
  5025                           postdec2	equ	0xFDD
  5026                           plusw2	equ	0xFDB
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _interrupt_EUSART *****************
  5032 ;; Defined at:
  5033 ;;		line 14 in file "rfid.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;		None
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5047 ;;      Params:         0       0       0       0
  5048 ;;      Locals:         0       0       0       0
  5049 ;;      Temps:          0       0       0       0
  5050 ;;      Totals:         0       0       0       0
  5051 ;;Total ram usage:        0 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    1
  5054 ;; This function calls:
  5055 ;;		Nothing
  5056 ;; This function is called by:
  5057 ;;		_main
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text25
  5062  001D18                     __ptext25:
  5063                           	opt stack 0
  5064  001D18                     _interrupt_EUSART:
  5065                           	opt stack 29
  5066                           
  5067                           ;rfid.c: 15:     RCREG;
  5068                           
  5069                           ;incstack = 0
  5070  001D18  50AE               	movf	4014,w,c	;volatile
  5071                           
  5072                           ;rfid.c: 16:     RCREG;
  5073  001D1A  50AE               	movf	4014,w,c	;volatile
  5074                           
  5075                           ;rfid.c: 17:     RCREG;
  5076  001D1C  50AE               	movf	4014,w,c	;volatile
  5077                           
  5078                           ;rfid.c: 18:     PIE1bits.RCIE = 1;
  5079  001D1E  8A9D               	bsf	3997,5,c	;volatile
  5080                           
  5081                           ;rfid.c: 19:     INTCONbits.GIEL = 1;
  5082  001D20  8CF2               	bsf	intcon,6,c	;volatile
  5083                           
  5084                           ;rfid.c: 20:     INTCONbits.GIEH = 1;
  5085  001D22  8EF2               	bsf	intcon,7,c	;volatile
  5086                           
  5087                           ;rfid.c: 21:     INTCON3bits.INT2IE = 1;
  5088  001D24  88F0               	bsf	intcon3,4,c	;volatile
  5089  001D26  0012               	return		;funcret
  5090  001D28                     __end_of_interrupt_EUSART:
  5091                           	opt stack 0
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           intcon	equ	0xFF2
  5097                           intcon3	equ	0xFF0
  5098                           postinc0	equ	0xFEE
  5099                           wreg	equ	0xFE8
  5100                           postinc1	equ	0xFE6
  5101                           postdec1	equ	0xFE5
  5102                           fsr1h	equ	0xFE2
  5103                           fsr1l	equ	0xFE1
  5104                           indf2	equ	0xFDF
  5105                           postinc2	equ	0xFDE
  5106                           postdec2	equ	0xFDD
  5107                           plusw2	equ	0xFDB
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _init_capture *****************
  5113 ;; Defined at:
  5114 ;;		line 25 in file "ir.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;		None
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5128 ;;      Params:         0       0       0       0
  5129 ;;      Locals:         0       0       0       0
  5130 ;;      Temps:          0       0       0       0
  5131 ;;      Totals:         0       0       0       0
  5132 ;;Total ram usage:        0 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    1
  5135 ;; This function calls:
  5136 ;;		Nothing
  5137 ;; This function is called by:
  5138 ;;		_main
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text26
  5143  001CB4                     __ptext26:
  5144                           	opt stack 0
  5145  001CB4                     _init_capture:
  5146                           	opt stack 29
  5147                           
  5148                           ;ir.c: 27:     LATA = 0;
  5149                           
  5150                           ;incstack = 0
  5151  001CB4  0E00               	movlw	0
  5152  001CB6  6E89               	movwf	3977,c	;volatile
  5153                           
  5154                           ;ir.c: 28:     TRISA = 0b00001100;
  5155  001CB8  0E0C               	movlw	12
  5156  001CBA  6E92               	movwf	3986,c	;volatile
  5157                           
  5158                           ;ir.c: 29:     CAP1CON = 0b01000110;
  5159  001CBC  0E46               	movlw	70
  5160  001CBE  6E63               	movwf	3939,c	;volatile
  5161                           
  5162                           ;ir.c: 30:     CAP2CON = 0b01000110;
  5163  001CC0  0E46               	movlw	70
  5164  001CC2  6E62               	movwf	3938,c	;volatile
  5165                           
  5166                           ;ir.c: 31:     T5CON = 0b00001001;
  5167  001CC4  0E09               	movlw	9
  5168  001CC6  6EB7               	movwf	4023,c	;volatile
  5169                           
  5170                           ;ir.c: 32:     DFLTCON = 0b00011000;
  5171  001CC8  0E18               	movlw	24
  5172  001CCA  6E60               	movwf	3936,c	;volatile
  5173  001CCC  0012               	return		;funcret
  5174  001CCE                     __end_of_init_capture:
  5175                           	opt stack 0
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           intcon	equ	0xFF2
  5181                           intcon3	equ	0xFF0
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           postinc1	equ	0xFE6
  5185                           postdec1	equ	0xFE5
  5186                           fsr1h	equ	0xFE2
  5187                           fsr1l	equ	0xFE1
  5188                           indf2	equ	0xFDF
  5189                           postinc2	equ	0xFDE
  5190                           postdec2	equ	0xFDD
  5191                           plusw2	equ	0xFDB
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function _init_TIMER5 *****************
  5197 ;; Defined at:
  5198 ;;		line 6 in file "ir.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;		None
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;		None
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  1    wreg      void 
  5205 ;; Registers used:
  5206 ;;		wreg, status,2
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5212 ;;      Params:         0       0       0       0
  5213 ;;      Locals:         0       0       0       0
  5214 ;;      Temps:          0       0       0       0
  5215 ;;      Totals:         0       0       0       0
  5216 ;;Total ram usage:        0 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:    1
  5219 ;; This function calls:
  5220 ;;		Nothing
  5221 ;; This function is called by:
  5222 ;;		_main
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text27
  5227  001CCE                     __ptext27:
  5228                           	opt stack 0
  5229  001CCE                     _init_TIMER5:
  5230                           	opt stack 29
  5231                           
  5232                           ;ir.c: 11:     T5CON = 0;
  5233                           
  5234                           ;incstack = 0
  5235  001CCE  0E00               	movlw	0
  5236  001CD0  6EB7               	movwf	4023,c	;volatile
  5237                           
  5238                           ;ir.c: 12:     T5CONbits.T5SEN = 0;
  5239  001CD2  9EB7               	bcf	4023,7,c	;volatile
  5240                           
  5241                           ;ir.c: 13:     T5CONbits.RESEN = 0;
  5242  001CD4  9CB7               	bcf	4023,6,c	;volatile
  5243                           
  5244                           ;ir.c: 14:     T5CONbits.T5PS = 0b10;
  5245  001CD6  50B7               	movf	4023,w,c	;volatile
  5246  001CD8  0BE7               	andlw	-25
  5247  001CDA  0910               	iorlw	16
  5248  001CDC  6EB7               	movwf	4023,c	;volatile
  5249                           
  5250                           ;ir.c: 15:     T5CONbits.T5MOD = 0;
  5251  001CDE  9AB7               	bcf	4023,5,c	;volatile
  5252                           
  5253                           ;ir.c: 16:     T5CONbits.T5SYNC = 0;
  5254  001CE0  94B7               	bcf	4023,2,c	;volatile
  5255                           
  5256                           ;ir.c: 17:     T5CONbits.TMR5CS = 0;
  5257  001CE2  92B7               	bcf	4023,1,c	;volatile
  5258                           
  5259                           ;ir.c: 18:     T5CONbits.TMR5ON = 1;
  5260  001CE4  80B7               	bsf	4023,0,c	;volatile
  5261  001CE6  0012               	return		;funcret
  5262  001CE8                     __end_of_init_TIMER5:
  5263                           	opt stack 0
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           intcon	equ	0xFF2
  5269                           intcon3	equ	0xFF0
  5270                           postinc0	equ	0xFEE
  5271                           wreg	equ	0xFE8
  5272                           postinc1	equ	0xFE6
  5273                           postdec1	equ	0xFE5
  5274                           fsr1h	equ	0xFE2
  5275                           fsr1l	equ	0xFE1
  5276                           indf2	equ	0xFDF
  5277                           postinc2	equ	0xFDE
  5278                           postdec2	equ	0xFDD
  5279                           plusw2	equ	0xFDB
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function _init_RFID *****************
  5285 ;; Defined at:
  5286 ;;		line 3 in file "rfid.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;		None
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;		None
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, status,2, status,0
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5300 ;;      Params:         0       0       0       0
  5301 ;;      Locals:         0       0       0       0
  5302 ;;      Temps:          0       0       0       0
  5303 ;;      Totals:         0       0       0       0
  5304 ;;Total ram usage:        0 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    1
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_main
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text28
  5315  001CE8                     __ptext28:
  5316                           	opt stack 0
  5317  001CE8                     _init_RFID:
  5318                           	opt stack 29
  5319                           
  5320                           ;rfid.c: 4:     TRISC = TRISC | 0b11000000;
  5321                           
  5322                           ;incstack = 0
  5323  001CE8  5094               	movf	3988,w,c	;volatile
  5324  001CEA  09C0               	iorlw	192
  5325  001CEC  6E94               	movwf	3988,c	;volatile
  5326                           
  5327                           ;rfid.c: 5:     SPBRG = 204;
  5328  001CEE  0ECC               	movlw	204
  5329  001CF0  6EAF               	movwf	4015,c	;volatile
  5330                           
  5331                           ;rfid.c: 6:     SPBRGH = 0;
  5332  001CF2  0E00               	movlw	0
  5333  001CF4  6EB0               	movwf	4016,c	;volatile
  5334                           
  5335                           ;rfid.c: 7:     BAUDCONbits.BRG16 = 1;
  5336  001CF6  86AA               	bsf	4010,3,c	;volatile
  5337                           
  5338                           ;rfid.c: 8:     TXSTAbits.BRGH = 1;
  5339  001CF8  84AC               	bsf	4012,2,c	;volatile
  5340                           
  5341                           ;rfid.c: 9:     RCSTAbits.CREN = 1;
  5342  001CFA  88AB               	bsf	4011,4,c	;volatile
  5343                           
  5344                           ;rfid.c: 10:     RCSTAbits.SPEN = 1;
  5345  001CFC  8EAB               	bsf	4011,7,c	;volatile
  5346                           
  5347                           ;rfid.c: 11:     TXSTAbits.TXEN = 1;
  5348  001CFE  8AAC               	bsf	4012,5,c	;volatile
  5349  001D00  0012               	return		;funcret
  5350  001D02                     __end_of_init_RFID:
  5351                           	opt stack 0
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           intcon	equ	0xFF2
  5357                           intcon3	equ	0xFF0
  5358                           postinc0	equ	0xFEE
  5359                           wreg	equ	0xFE8
  5360                           postinc1	equ	0xFE6
  5361                           postdec1	equ	0xFE5
  5362                           fsr1h	equ	0xFE2
  5363                           fsr1l	equ	0xFE1
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           plusw2	equ	0xFDB
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _initPWM *****************
  5373 ;; Defined at:
  5374 ;;		line 11 in file "motor.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;		None
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;		None
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      void 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5388 ;;      Params:         0       0       0       0
  5389 ;;      Locals:         0       0       0       0
  5390 ;;      Temps:          0       0       0       0
  5391 ;;      Totals:         0       0       0       0
  5392 ;;Total ram usage:        0 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    1
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_main
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text29
  5403  001C7A                     __ptext29:
  5404                           	opt stack 0
  5405  001C7A                     _initPWM:
  5406                           	opt stack 29
  5407                           
  5408                           ;motor.c: 12:     TRISB = 0;
  5409                           
  5410                           ;incstack = 0
  5411  001C7A  0E00               	movlw	0
  5412  001C7C  6E93               	movwf	3987,c	;volatile
  5413                           
  5414                           ;motor.c: 14:     PTCON0 = 0b00000000;
  5415  001C7E  0E00               	movlw	0
  5416  001C80  6E7F               	movwf	3967,c	;volatile
  5417                           
  5418                           ;motor.c: 15:     PTCON1 = 0b10000000;
  5419  001C82  0E80               	movlw	128
  5420  001C84  6E7E               	movwf	3966,c	;volatile
  5421                           
  5422                           ;motor.c: 17:     PWMCON0 = 0b01111111;
  5423  001C86  0E7F               	movlw	127
  5424  001C88  6E6F               	movwf	3951,c	;volatile
  5425                           
  5426                           ;motor.c: 18:     PWMCON1 = 0x00;
  5427  001C8A  0E00               	movlw	0
  5428  001C8C  6E6E               	movwf	3950,c	;volatile
  5429                           
  5430                           ;motor.c: 21:     PTPERL = 0b11000111;
  5431  001C8E  0EC7               	movlw	199
  5432  001C90  6E7B               	movwf	3963,c	;volatile
  5433                           
  5434                           ;motor.c: 22:     PTPERH = 0b0000;
  5435  001C92  0E00               	movlw	0
  5436  001C94  6E7A               	movwf	3962,c	;volatile
  5437  001C96  0012               	return		;funcret
  5438  001C98                     __end_of_initPWM:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           intcon	equ	0xFF2
  5445                           intcon3	equ	0xFF0
  5446                           postinc0	equ	0xFEE
  5447                           wreg	equ	0xFE8
  5448                           postinc1	equ	0xFE6
  5449                           postdec1	equ	0xFE5
  5450                           fsr1h	equ	0xFE2
  5451                           fsr1l	equ	0xFE1
  5452                           indf2	equ	0xFDF
  5453                           postinc2	equ	0xFDE
  5454                           postdec2	equ	0xFDD
  5455                           plusw2	equ	0xFDB
  5456                           fsr2h	equ	0xFDA
  5457                           fsr2l	equ	0xFD9
  5458                           status	equ	0xFD8
  5459                           
  5460 ;; *************** function _initEncoder *****************
  5461 ;; Defined at:
  5462 ;;		line 16 in file "reverse.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		None
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5476 ;;      Params:         0       0       0       0
  5477 ;;      Locals:         0       0       0       0
  5478 ;;      Temps:          0       0       0       0
  5479 ;;      Totals:         0       0       0       0
  5480 ;;Total ram usage:        0 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    1
  5483 ;; This function calls:
  5484 ;;		Nothing
  5485 ;; This function is called by:
  5486 ;;		_main
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           	psect	text30
  5491  001D28                     __ptext30:
  5492                           	opt stack 0
  5493  001D28                     _initEncoder:
  5494                           	opt stack 29
  5495                           
  5496                           ;reverse.c: 20:     INTCON3bits.INT2IE = 1;
  5497                           
  5498                           ;incstack = 0
  5499  001D28  88F0               	bsf	intcon3,4,c	;volatile
  5500                           
  5501                           ;reverse.c: 21:     INTCON3bits.INT2IP = 1;
  5502  001D2A  8EF0               	bsf	intcon3,7,c	;volatile
  5503                           
  5504                           ;reverse.c: 22:     INTCON2bits.INTEDG2 = 1;
  5505  001D2C  88F1               	bsf	intcon2,4,c	;volatile
  5506                           
  5507                           ;reverse.c: 23:     INTCON3bits.INT2IF = 0;
  5508  001D2E  92F0               	bcf	intcon3,1,c	;volatile
  5509                           
  5510                           ;reverse.c: 27:     LATCbits.LATC5 = 0;
  5511  001D30  9A8B               	bcf	3979,5,c	;volatile
  5512                           
  5513                           ;reverse.c: 28:     TRISCbits.RC5 = 0;
  5514  001D32  9A94               	bcf	3988,5,c	;volatile
  5515  001D34  0012               	return		;funcret
  5516  001D36                     __end_of_initEncoder:
  5517                           	opt stack 0
  5518                           tblptru	equ	0xFF8
  5519                           tblptrh	equ	0xFF7
  5520                           tblptrl	equ	0xFF6
  5521                           tablat	equ	0xFF5
  5522                           intcon	equ	0xFF2
  5523                           intcon2	equ	0xFF1
  5524                           intcon3	equ	0xFF0
  5525                           postinc0	equ	0xFEE
  5526                           wreg	equ	0xFE8
  5527                           postinc1	equ	0xFE6
  5528                           postdec1	equ	0xFE5
  5529                           fsr1h	equ	0xFE2
  5530                           fsr1l	equ	0xFE1
  5531                           indf2	equ	0xFDF
  5532                           postinc2	equ	0xFDE
  5533                           postdec2	equ	0xFDD
  5534                           plusw2	equ	0xFDB
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function _forwards *****************
  5540 ;; Defined at:
  5541 ;;		line 144 in file "motor.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  mL              2   26[COMRAM] PTR struct Motor
  5544 ;;		 -> main@mL(9), 
  5545 ;;  mR              2   28[COMRAM] PTR struct Motor
  5546 ;;		 -> main@mR(9), 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5558 ;;      Params:         4       0       0       0
  5559 ;;      Locals:         0       0       0       0
  5560 ;;      Temps:          1       0       0       0
  5561 ;;      Totals:         5       0       0       0
  5562 ;;Total ram usage:        5 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    3
  5565 ;; This function calls:
  5566 ;;		_setMotorPWM
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           	psect	text31
  5573  0011BA                     __ptext31:
  5574                           	opt stack 0
  5575  0011BA                     _forwards:
  5576                           	opt stack 27
  5577                           
  5578                           ;motor.c: 145:     mL->direction = 0;
  5579                           
  5580                           ;incstack = 0
  5581  0011BA  EE20 F001          	lfsr	2,1
  5582  0011BE  501B               	movf	forwards@mL,w,c
  5583  0011C0  26D9               	addwf	fsr2l,f,c
  5584  0011C2  501C               	movf	forwards@mL+1,w,c
  5585  0011C4  22DA               	addwfc	fsr2h,f,c
  5586  0011C6  0E00               	movlw	0
  5587  0011C8  6EDF               	movwf	indf2,c
  5588                           
  5589                           ;motor.c: 146:     mR->direction = 0;
  5590  0011CA  EE20 F001          	lfsr	2,1
  5591  0011CE  501D               	movf	forwards@mR,w,c
  5592  0011D0  26D9               	addwf	fsr2l,f,c
  5593  0011D2  501E               	movf	forwards@mR+1,w,c
  5594  0011D4  22DA               	addwfc	fsr2h,f,c
  5595  0011D6  0E00               	movlw	0
  5596  0011D8  6EDF               	movwf	indf2,c
  5597                           
  5598                           ;motor.c: 147:     while (mL->power < 100 || mR->power < 100) {
  5599  0011DA  D02B               	goto	l279
  5600  0011DC                     
  5601                           ;motor.c: 148:         if (mL->power < 100) {
  5602  0011DC  C01B  FFD9         	movff	forwards@mL,fsr2l
  5603  0011E0  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5604  0011E4  0E64               	movlw	100
  5605  0011E6  60DF               	cpfslt	indf2,c
  5606  0011E8  D005               	goto	l281
  5607                           
  5608                           ;motor.c: 149:             mL->power++;
  5609  0011EA  C01B  FFD9         	movff	forwards@mL,fsr2l
  5610  0011EE  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5611  0011F2  2ADF               	incf	indf2,f,c
  5612  0011F4                     l281:
  5613                           
  5614                           ;motor.c: 151:         if (mR->power < 100) {
  5615  0011F4  C01D  FFD9         	movff	forwards@mR,fsr2l
  5616  0011F8  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5617  0011FC  0E64               	movlw	100
  5618  0011FE  60DF               	cpfslt	indf2,c
  5619  001200  D005               	goto	l282
  5620                           
  5621                           ;motor.c: 152:             mR->power++;
  5622  001202  C01D  FFD9         	movff	forwards@mR,fsr2l
  5623  001206  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5624  00120A  2ADF               	incf	indf2,f,c
  5625  00120C                     l282:
  5626                           
  5627                           ;motor.c: 154:         setMotorPWM(mL);
  5628  00120C  C01B  F014         	movff	forwards@mL,setMotorPWM@m
  5629  001210  C01C  F015         	movff	forwards@mL+1,setMotorPWM@m+1
  5630  001214  ECE6  F006         	call	_setMotorPWM	;wreg free
  5631                           
  5632                           ;motor.c: 155:         setMotorPWM(mR);
  5633  001218  C01D  F014         	movff	forwards@mR,setMotorPWM@m
  5634  00121C  C01E  F015         	movff	forwards@mR+1,setMotorPWM@m+1
  5635  001220  ECE6  F006         	call	_setMotorPWM	;wreg free
  5636                           
  5637                           ;motor.c: 156:         _delay((unsigned long)((5)*(8000000/4000.0)));
  5638  001224  0E0D               	movlw	13
  5639  001226  6E1F               	movwf	??_forwards& (0+255),c
  5640  001228  0EFC               	movlw	252
  5641  00122A                     u3617:
  5642  00122A  2EE8               	decfsz	wreg,f,c
  5643  00122C  D7FE               	bra	u3617
  5644  00122E  2E1F               	decfsz	??_forwards& (0+255),f,c
  5645  001230  D7FC               	bra	u3617
  5646  001232                     l279:
  5647                           
  5648                           ;motor.c: 147:     while (mL->power < 100 || mR->power < 100) {
  5649  001232  C01B  FFD9         	movff	forwards@mL,fsr2l
  5650  001236  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5651  00123A  0E63               	movlw	99
  5652  00123C  64DF               	cpfsgt	indf2,c
  5653  00123E  D7CE               	goto	l280
  5654  001240  C01D  FFD9         	movff	forwards@mR,fsr2l
  5655  001244  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5656  001248  0E63               	movlw	99
  5657  00124A  64DF               	cpfsgt	indf2,c
  5658  00124C  D7C7               	goto	l280
  5659                           
  5660                           ;motor.c: 158:         mR->direction = 0;
  5661  00124E  EE20 F001          	lfsr	2,1
  5662  001252  501D               	movf	forwards@mR,w,c
  5663  001254  26D9               	addwf	fsr2l,f,c
  5664  001256  501E               	movf	forwards@mR+1,w,c
  5665  001258  22DA               	addwfc	fsr2h,f,c
  5666  00125A  0E00               	movlw	0
  5667  00125C  6EDF               	movwf	indf2,c
  5668                           
  5669                           ;motor.c: 159:         while (mL->power < 60 || mR->power < 60) {
  5670  00125E  D02B               	goto	l284
  5671  001260                     
  5672                           ;motor.c: 160:             if (mL->power < 60) {
  5673  001260  C01B  FFD9         	movff	forwards@mL,fsr2l
  5674  001264  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5675  001268  0E3C               	movlw	60
  5676  00126A  60DF               	cpfslt	indf2,c
  5677  00126C  D005               	goto	l286
  5678                           
  5679                           ;motor.c: 161:                 mL->power++;
  5680  00126E  C01B  FFD9         	movff	forwards@mL,fsr2l
  5681  001272  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5682  001276  2ADF               	incf	indf2,f,c
  5683  001278                     l286:
  5684                           
  5685                           ;motor.c: 163:             if (mR->power < 60) {
  5686  001278  C01D  FFD9         	movff	forwards@mR,fsr2l
  5687  00127C  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5688  001280  0E3C               	movlw	60
  5689  001282  60DF               	cpfslt	indf2,c
  5690  001284  D005               	goto	l287
  5691                           
  5692                           ;motor.c: 164:                 mR->power++;
  5693  001286  C01D  FFD9         	movff	forwards@mR,fsr2l
  5694  00128A  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5695  00128E  2ADF               	incf	indf2,f,c
  5696  001290                     l287:
  5697                           
  5698                           ;motor.c: 166:             setMotorPWM(mL);
  5699  001290  C01B  F014         	movff	forwards@mL,setMotorPWM@m
  5700  001294  C01C  F015         	movff	forwards@mL+1,setMotorPWM@m+1
  5701  001298  ECE6  F006         	call	_setMotorPWM	;wreg free
  5702                           
  5703                           ;motor.c: 167:             setMotorPWM(mR);
  5704  00129C  C01D  F014         	movff	forwards@mR,setMotorPWM@m
  5705  0012A0  C01E  F015         	movff	forwards@mR+1,setMotorPWM@m+1
  5706  0012A4  ECE6  F006         	call	_setMotorPWM	;wreg free
  5707                           
  5708                           ;motor.c: 168:             _delay((unsigned long)((5)*(8000000/4000.0)));
  5709  0012A8  0E0D               	movlw	13
  5710  0012AA  6E1F               	movwf	??_forwards& (0+255),c
  5711  0012AC  0EFC               	movlw	252
  5712  0012AE                     u3627:
  5713  0012AE  2EE8               	decfsz	wreg,f,c
  5714  0012B0  D7FE               	bra	u3627
  5715  0012B2  2E1F               	decfsz	??_forwards& (0+255),f,c
  5716  0012B4  D7FC               	bra	u3627
  5717  0012B6                     l284:
  5718                           
  5719                           ;motor.c: 159:         while (mL->power < 60 || mR->power < 60) {
  5720  0012B6  C01B  FFD9         	movff	forwards@mL,fsr2l
  5721  0012BA  C01C  FFDA         	movff	forwards@mL+1,fsr2h
  5722  0012BE  0E3B               	movlw	59
  5723  0012C0  64DF               	cpfsgt	indf2,c
  5724  0012C2  D7CE               	goto	l285
  5725  0012C4  C01D  FFD9         	movff	forwards@mR,fsr2l
  5726  0012C8  C01E  FFDA         	movff	forwards@mR+1,fsr2h
  5727  0012CC  0E3B               	movlw	59
  5728  0012CE  64DF               	cpfsgt	indf2,c
  5729  0012D0  D7C7               	goto	l285
  5730  0012D2  0012               	return	
  5731  0012D4                     __end_of_forwards:
  5732                           	opt stack 0
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           intcon	equ	0xFF2
  5738                           intcon2	equ	0xFF1
  5739                           intcon3	equ	0xFF0
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           postinc1	equ	0xFE6
  5743                           postdec1	equ	0xFE5
  5744                           fsr1h	equ	0xFE2
  5745                           fsr1l	equ	0xFE1
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           plusw2	equ	0xFDB
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _setMotorPWM *****************
  5755 ;; Defined at:
  5756 ;;		line 25 in file "motor.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;  m               2   19[COMRAM] PTR struct Motor
  5759 ;;		 -> main@mR(9), main@mL(9), 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  PWMduty         2   24[COMRAM] int 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      void 
  5764 ;; Registers used:
  5765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5771 ;;      Params:         2       0       0       0
  5772 ;;      Locals:         2       0       0       0
  5773 ;;      Temps:          3       0       0       0
  5774 ;;      Totals:         7       0       0       0
  5775 ;;Total ram usage:        7 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    2
  5778 ;; This function calls:
  5779 ;;		___awdiv
  5780 ;;		___wmul
  5781 ;; This function is called by:
  5782 ;;		_stop
  5783 ;;		_turnLeft
  5784 ;;		_turnRight
  5785 ;;		_forwards
  5786 ;;		_accelerate
  5787 ;;		_accelerate2
  5788 ;;		_decelerate
  5789 ;;		_turnRightSlow
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text32
  5794  000DCC                     __ptext32:
  5795                           	opt stack 0
  5796  000DCC                     _setMotorPWM:
  5797                           	opt stack 27
  5798                           
  5799                           ;motor.c: 26:     int PWMduty;;motor.c: 27:     if (m->direction) {
  5800                           
  5801                           ;incstack = 0
  5802  000DCC  EE20 F001          	lfsr	2,1
  5803  000DD0  5014               	movf	setMotorPWM@m,w,c
  5804  000DD2  26D9               	addwf	fsr2l,f,c
  5805  000DD4  5015               	movf	setMotorPWM@m+1,w,c
  5806  000DD6  22DA               	addwfc	fsr2h,f,c
  5807  000DD8  50DF               	movf	indf2,w,c
  5808  000DDA  B4D8               	btfsc	status,2,c
  5809  000DDC  D034               	goto	l222
  5810                           
  5811                           ;motor.c: 29:         PWMduty = m->period - ((int) (m->power)*(m->period)) / 100;
  5812  000DDE  EE20 F007          	lfsr	2,7
  5813  000DE2  5014               	movf	setMotorPWM@m,w,c
  5814  000DE4  26D9               	addwf	fsr2l,f,c
  5815  000DE6  5015               	movf	setMotorPWM@m+1,w,c
  5816  000DE8  22DA               	addwfc	fsr2h,f,c
  5817  000DEA  CFDE F016          	movff	postinc2,??_setMotorPWM
  5818  000DEE  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  5819  000DF2  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  5820  000DF6  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5821  000DFA  50DF               	movf	indf2,w,c
  5822  000DFC  6E18               	movwf	(??_setMotorPWM+2)& (0+255),c
  5823  000DFE  5018               	movf	??_setMotorPWM+2,w,c
  5824  000E00  6E06               	movwf	___wmul@multiplier,c
  5825  000E02  6A07               	clrf	___wmul@multiplier+1,c
  5826  000E04  EE20 F007          	lfsr	2,7
  5827  000E08  5014               	movf	setMotorPWM@m,w,c
  5828  000E0A  26D9               	addwf	fsr2l,f,c
  5829  000E0C  5015               	movf	setMotorPWM@m+1,w,c
  5830  000E0E  22DA               	addwfc	fsr2h,f,c
  5831  000E10  CFDE F008          	movff	postinc2,___wmul@multiplicand
  5832  000E14  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  5833  000E18  EC2A  F00E         	call	___wmul	;wreg free
  5834  000E1C  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5835  000E20  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5836  000E24  0E00               	movlw	0
  5837  000E26  6E0F               	movwf	___awdiv@divisor+1,c
  5838  000E28  0E64               	movlw	100
  5839  000E2A  6E0E               	movwf	___awdiv@divisor,c
  5840  000E2C  EC2F  F00C         	call	___awdiv	;wreg free
  5841  000E30  1E0C               	comf	?___awdiv,f,c
  5842  000E32  1E0D               	comf	?___awdiv+1,f,c
  5843  000E34  4A0C               	infsnz	?___awdiv,f,c
  5844  000E36  2A0D               	incf	?___awdiv+1,f,c
  5845  000E38  5016               	movf	??_setMotorPWM,w,c
  5846  000E3A  240C               	addwf	?___awdiv,w,c
  5847  000E3C  6E19               	movwf	setMotorPWM@PWMduty,c
  5848  000E3E  5017               	movf	??_setMotorPWM+1,w,c
  5849  000E40  200D               	addwfc	?___awdiv+1,w,c
  5850  000E42  6E1A               	movwf	setMotorPWM@PWMduty+1,c
  5851                           
  5852                           ;motor.c: 30:     } else {
  5853  000E44  D023               	goto	l223
  5854  000E46                     l222:
  5855                           
  5856                           ;motor.c: 32:         PWMduty = ((int) (m->power)*(m->period)) / 100;
  5857  000E46  C014  FFD9         	movff	setMotorPWM@m,fsr2l
  5858  000E4A  C015  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5859  000E4E  50DF               	movf	indf2,w,c
  5860  000E50  6E16               	movwf	??_setMotorPWM& (0+255),c
  5861  000E52  5016               	movf	??_setMotorPWM,w,c
  5862  000E54  6E06               	movwf	___wmul@multiplier,c
  5863  000E56  6A07               	clrf	___wmul@multiplier+1,c
  5864  000E58  EE20 F007          	lfsr	2,7
  5865  000E5C  5014               	movf	setMotorPWM@m,w,c
  5866  000E5E  26D9               	addwf	fsr2l,f,c
  5867  000E60  5015               	movf	setMotorPWM@m+1,w,c
  5868  000E62  22DA               	addwfc	fsr2h,f,c
  5869  000E64  CFDE F008          	movff	postinc2,___wmul@multiplicand
  5870  000E68  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  5871  000E6C  EC2A  F00E         	call	___wmul	;wreg free
  5872  000E70  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5873  000E74  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5874  000E78  0E00               	movlw	0
  5875  000E7A  6E0F               	movwf	___awdiv@divisor+1,c
  5876  000E7C  0E64               	movlw	100
  5877  000E7E  6E0E               	movwf	___awdiv@divisor,c
  5878  000E80  EC2F  F00C         	call	___awdiv	;wreg free
  5879  000E84  C00C  F019         	movff	?___awdiv,setMotorPWM@PWMduty
  5880  000E88  C00D  F01A         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5881  000E8C                     l223:
  5882                           
  5883                           ;motor.c: 34:     PWMduty = (PWMduty << 2);
  5884  000E8C  C019  F016         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  5885  000E90  C01A  F017         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  5886  000E94  90D8               	bcf	status,0,c
  5887  000E96  3616               	rlcf	??_setMotorPWM,f,c
  5888  000E98  3617               	rlcf	??_setMotorPWM+1,f,c
  5889  000E9A  90D8               	bcf	status,0,c
  5890  000E9C  3616               	rlcf	??_setMotorPWM,f,c
  5891  000E9E  3617               	rlcf	??_setMotorPWM+1,f,c
  5892  000EA0  C016  F019         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  5893  000EA4  C017  F01A         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  5894                           
  5895                           ;motor.c: 35:     *(m->duty_low) = PWMduty & 0xFF;
  5896  000EA8  EE20 F002          	lfsr	2,2
  5897  000EAC  5014               	movf	setMotorPWM@m,w,c
  5898  000EAE  26D9               	addwf	fsr2l,f,c
  5899  000EB0  5015               	movf	setMotorPWM@m+1,w,c
  5900  000EB2  22DA               	addwfc	fsr2h,f,c
  5901  000EB4  CFDE F016          	movff	postinc2,??_setMotorPWM
  5902  000EB8  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  5903  000EBC  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  5904  000EC0  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5905  000EC4  C019  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5906                           
  5907                           ;motor.c: 36:     *(m->duty_high) = (PWMduty >> 8) & 0x3F;
  5908  000EC8  EE20 F004          	lfsr	2,4
  5909  000ECC  5014               	movf	setMotorPWM@m,w,c
  5910  000ECE  26D9               	addwf	fsr2l,f,c
  5911  000ED0  5015               	movf	setMotorPWM@m+1,w,c
  5912  000ED2  22DA               	addwfc	fsr2h,f,c
  5913  000ED4  CFDE F016          	movff	postinc2,??_setMotorPWM
  5914  000ED8  CFDD F017          	movff	postdec2,??_setMotorPWM+1
  5915  000EDC  C016  FFD9         	movff	??_setMotorPWM,fsr2l
  5916  000EE0  C017  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5917  000EE4  501A               	movf	setMotorPWM@PWMduty+1,w,c
  5918  000EE6  0B3F               	andlw	63
  5919  000EE8  6EDF               	movwf	indf2,c
  5920                           
  5921                           ;motor.c: 38:     if (m->direction) {
  5922  000EEA  EE20 F001          	lfsr	2,1
  5923  000EEE  5014               	movf	setMotorPWM@m,w,c
  5924  000EF0  26D9               	addwf	fsr2l,f,c
  5925  000EF2  5015               	movf	setMotorPWM@m+1,w,c
  5926  000EF4  22DA               	addwfc	fsr2h,f,c
  5927  000EF6  50DF               	movf	indf2,w,c
  5928  000EF8  B4D8               	btfsc	status,2,c
  5929  000EFA  D014               	goto	l224
  5930                           
  5931                           ;motor.c: 39:         LATB = LATB | (1 << (m->dir_pin));
  5932  000EFC  EE20 F006          	lfsr	2,6
  5933  000F00  5014               	movf	setMotorPWM@m,w,c
  5934  000F02  26D9               	addwf	fsr2l,f,c
  5935  000F04  5015               	movf	setMotorPWM@m+1,w,c
  5936  000F06  22DA               	addwfc	fsr2h,f,c
  5937  000F08  50DF               	movf	indf2,w,c
  5938  000F0A  6E16               	movwf	??_setMotorPWM& (0+255),c
  5939  000F0C  0E01               	movlw	1
  5940  000F0E  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  5941  000F10  2A16               	incf	??_setMotorPWM,f,c
  5942  000F12  D002               	goto	u2074
  5943  000F14                     u2075:
  5944  000F14  90D8               	bcf	status,0,c
  5945  000F16  3617               	rlcf	??_setMotorPWM+1,f,c
  5946  000F18                     u2074:
  5947  000F18  2E16               	decfsz	??_setMotorPWM,f,c
  5948  000F1A  D7FC               	goto	u2075
  5949  000F1C  5017               	movf	??_setMotorPWM+1,w,c
  5950  000F1E  108A               	iorwf	3978,w,c	;volatile
  5951  000F20  6E8A               	movwf	3978,c	;volatile
  5952                           
  5953                           ;motor.c: 40:     } else {
  5954  000F22  0012               	return	
  5955  000F24                     l224:
  5956                           
  5957                           ;motor.c: 41:         LATB = LATB & (~(1 << (m->dir_pin)));
  5958  000F24  EE20 F006          	lfsr	2,6
  5959  000F28  5014               	movf	setMotorPWM@m,w,c
  5960  000F2A  26D9               	addwf	fsr2l,f,c
  5961  000F2C  5015               	movf	setMotorPWM@m+1,w,c
  5962  000F2E  22DA               	addwfc	fsr2h,f,c
  5963  000F30  50DF               	movf	indf2,w,c
  5964  000F32  6E16               	movwf	??_setMotorPWM& (0+255),c
  5965  000F34  0E01               	movlw	1
  5966  000F36  6E17               	movwf	(??_setMotorPWM+1)& (0+255),c
  5967  000F38  2A16               	incf	??_setMotorPWM,f,c
  5968  000F3A  D002               	goto	u2084
  5969  000F3C                     u2085:
  5970  000F3C  90D8               	bcf	status,0,c
  5971  000F3E  3617               	rlcf	??_setMotorPWM+1,f,c
  5972  000F40                     u2084:
  5973  000F40  2E16               	decfsz	??_setMotorPWM,f,c
  5974  000F42  D7FC               	goto	u2085
  5975  000F44  5017               	movf	??_setMotorPWM+1,w,c
  5976  000F46  0AFF               	xorlw	255
  5977  000F48  148A               	andwf	3978,w,c	;volatile
  5978  000F4A  6E8A               	movwf	3978,c	;volatile
  5979  000F4C  0012               	return	
  5980  000F4E                     __end_of_setMotorPWM:
  5981                           	opt stack 0
  5982                           tblptru	equ	0xFF8
  5983                           tblptrh	equ	0xFF7
  5984                           tblptrl	equ	0xFF6
  5985                           tablat	equ	0xFF5
  5986                           intcon	equ	0xFF2
  5987                           intcon2	equ	0xFF1
  5988                           intcon3	equ	0xFF0
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           postinc1	equ	0xFE6
  5992                           postdec1	equ	0xFE5
  5993                           fsr1h	equ	0xFE2
  5994                           fsr1l	equ	0xFE1
  5995                           indf2	equ	0xFDF
  5996                           postinc2	equ	0xFDE
  5997                           postdec2	equ	0xFDD
  5998                           plusw2	equ	0xFDB
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function ___wmul *****************
  6004 ;; Defined at:
  6005 ;;		line 15 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/Umul16.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  multiplier      2    5[COMRAM] unsigned int 
  6008 ;;  multiplicand    2    7[COMRAM] unsigned int 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  product         2    9[COMRAM] unsigned int 
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  2    5[COMRAM] unsigned int 
  6013 ;; Registers used:
  6014 ;;		wreg, status,2, status,0, prodl, prodh
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6020 ;;      Params:         4       0       0       0
  6021 ;;      Locals:         2       0       0       0
  6022 ;;      Temps:          0       0       0       0
  6023 ;;      Totals:         6       0       0       0
  6024 ;;Total ram usage:        6 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    1
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_setMotorPWM
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text33
  6035  001C54                     __ptext33:
  6036                           	opt stack 0
  6037  001C54                     ___wmul:
  6038                           	opt stack 27
  6039                           
  6040                           ;incstack = 0
  6041  001C54  5006               	movf	___wmul@multiplier,w,c
  6042  001C56  0208               	mulwf	___wmul@multiplicand,c
  6043  001C58  CFF3 F00A          	movff	prodl,___wmul@product
  6044  001C5C  CFF4 F00B          	movff	prodh,___wmul@product+1
  6045  001C60  5006               	movf	___wmul@multiplier,w,c
  6046  001C62  0209               	mulwf	___wmul@multiplicand+1,c
  6047  001C64  50F3               	movf	prodl,w,c
  6048  001C66  260B               	addwf	___wmul@product+1,f,c
  6049  001C68  5007               	movf	___wmul@multiplier+1,w,c
  6050  001C6A  0208               	mulwf	___wmul@multiplicand,c
  6051  001C6C  50F3               	movf	prodl,w,c
  6052  001C6E  260B               	addwf	___wmul@product+1,f,c
  6053  001C70  C00A  F006         	movff	___wmul@product,?___wmul
  6054  001C74  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  6055  001C78  0012               	return	
  6056  001C7A                     __end_of___wmul:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           intcon	equ	0xFF2
  6065                           intcon2	equ	0xFF1
  6066                           intcon3	equ	0xFF0
  6067                           postinc0	equ	0xFEE
  6068                           wreg	equ	0xFE8
  6069                           postinc1	equ	0xFE6
  6070                           postdec1	equ	0xFE5
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           plusw2	equ	0xFDB
  6077                           fsr2h	equ	0xFDA
  6078                           fsr2l	equ	0xFD9
  6079                           status	equ	0xFD8
  6080                           
  6081 ;; *************** function ___awdiv *****************
  6082 ;; Defined at:
  6083 ;;		line 7 in file "/Applications/microchip/xc8/v2.00/pic/sources/c99/common/awdiv.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  dividend        2   11[COMRAM] int 
  6086 ;;  divisor         2   13[COMRAM] int 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  quotient        2   17[COMRAM] int 
  6089 ;;  sign            1   16[COMRAM] unsigned char 
  6090 ;;  counter         1   15[COMRAM] unsigned char 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  2   11[COMRAM] int 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6100 ;;      Params:         4       0       0       0
  6101 ;;      Locals:         4       0       0       0
  6102 ;;      Temps:          0       0       0       0
  6103 ;;      Totals:         8       0       0       0
  6104 ;;Total ram usage:        8 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    1
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_setMotorPWM
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text34
  6115  00185E                     __ptext34:
  6116                           	opt stack 0
  6117  00185E                     ___awdiv:
  6118                           	opt stack 27
  6119                           
  6120                           ;incstack = 0
  6121  00185E  0E00               	movlw	0
  6122  001860  6E11               	movwf	___awdiv@sign,c
  6123  001862  AE0F               	btfss	___awdiv@divisor+1,7,c
  6124  001864  D006               	goto	l682
  6125  001866  6C0E               	negf	___awdiv@divisor,c
  6126  001868  1E0F               	comf	___awdiv@divisor+1,f,c
  6127  00186A  B0D8               	btfsc	status,0,c
  6128  00186C  2A0F               	incf	___awdiv@divisor+1,f,c
  6129  00186E  0E01               	movlw	1
  6130  001870  6E11               	movwf	___awdiv@sign,c
  6131  001872                     l682:
  6132  001872  AE0D               	btfss	___awdiv@dividend+1,7,c
  6133  001874  D006               	goto	l683
  6134  001876  6C0C               	negf	___awdiv@dividend,c
  6135  001878  1E0D               	comf	___awdiv@dividend+1,f,c
  6136  00187A  B0D8               	btfsc	status,0,c
  6137  00187C  2A0D               	incf	___awdiv@dividend+1,f,c
  6138  00187E  0E01               	movlw	1
  6139  001880  1A11               	xorwf	___awdiv@sign,f,c
  6140  001882                     l683:
  6141  001882  0E00               	movlw	0
  6142  001884  6E13               	movwf	___awdiv@quotient+1,c
  6143  001886  0E00               	movlw	0
  6144  001888  6E12               	movwf	___awdiv@quotient,c
  6145  00188A  500E               	movf	___awdiv@divisor,w,c
  6146  00188C  100F               	iorwf	___awdiv@divisor+1,w,c
  6147  00188E  B4D8               	btfsc	status,2,c
  6148  001890  D01C               	goto	l690
  6149  001892  0E01               	movlw	1
  6150  001894  6E10               	movwf	___awdiv@counter,c
  6151  001896  D004               	goto	l685
  6152  001898  90D8               	bcf	status,0,c
  6153  00189A  360E               	rlcf	___awdiv@divisor,f,c
  6154  00189C  360F               	rlcf	___awdiv@divisor+1,f,c
  6155  00189E  2A10               	incf	___awdiv@counter,f,c
  6156  0018A0                     l685:
  6157  0018A0  AE0F               	btfss	___awdiv@divisor+1,7,c
  6158  0018A2  D7FA               	goto	l686
  6159  0018A4                     u1990:
  6160  0018A4  90D8               	bcf	status,0,c
  6161  0018A6  3612               	rlcf	___awdiv@quotient,f,c
  6162  0018A8  3613               	rlcf	___awdiv@quotient+1,f,c
  6163  0018AA  500E               	movf	___awdiv@divisor,w,c
  6164  0018AC  5C0C               	subwf	___awdiv@dividend,w,c
  6165  0018AE  500F               	movf	___awdiv@divisor+1,w,c
  6166  0018B0  580D               	subwfb	___awdiv@dividend+1,w,c
  6167  0018B2  A0D8               	btfss	status,0,c
  6168  0018B4  D005               	goto	l689
  6169  0018B6  500E               	movf	___awdiv@divisor,w,c
  6170  0018B8  5E0C               	subwf	___awdiv@dividend,f,c
  6171  0018BA  500F               	movf	___awdiv@divisor+1,w,c
  6172  0018BC  5A0D               	subwfb	___awdiv@dividend+1,f,c
  6173  0018BE  8012               	bsf	___awdiv@quotient,0,c
  6174  0018C0                     l689:
  6175  0018C0  90D8               	bcf	status,0,c
  6176  0018C2  320F               	rrcf	___awdiv@divisor+1,f,c
  6177  0018C4  320E               	rrcf	___awdiv@divisor,f,c
  6178  0018C6  2E10               	decfsz	___awdiv@counter,f,c
  6179  0018C8  D7ED               	goto	u1990
  6180  0018CA                     l690:
  6181  0018CA  5011               	movf	___awdiv@sign,w,c
  6182  0018CC  B4D8               	btfsc	status,2,c
  6183  0018CE  D004               	goto	l691
  6184  0018D0  6C12               	negf	___awdiv@quotient,c
  6185  0018D2  1E13               	comf	___awdiv@quotient+1,f,c
  6186  0018D4  B0D8               	btfsc	status,0,c
  6187  0018D6  2A13               	incf	___awdiv@quotient+1,f,c
  6188  0018D8                     l691:
  6189  0018D8  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  6190  0018DC  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  6191  0018E0  0012               	return	
  6192  0018E2                     __end_of___awdiv:
  6193                           	opt stack 0
  6194                           tblptru	equ	0xFF8
  6195                           tblptrh	equ	0xFF7
  6196                           tblptrl	equ	0xFF6
  6197                           tablat	equ	0xFF5
  6198                           prodh	equ	0xFF4
  6199                           prodl	equ	0xFF3
  6200                           intcon	equ	0xFF2
  6201                           intcon2	equ	0xFF1
  6202                           intcon3	equ	0xFF0
  6203                           postinc0	equ	0xFEE
  6204                           wreg	equ	0xFE8
  6205                           postinc1	equ	0xFE6
  6206                           postdec1	equ	0xFE5
  6207                           fsr1h	equ	0xFE2
  6208                           fsr1l	equ	0xFE1
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           plusw2	equ	0xFDB
  6213                           fsr2h	equ	0xFDA
  6214                           fsr2l	equ	0xFD9
  6215                           status	equ	0xFD8
  6216                           
  6217 ;; *************** function _LCD_init *****************
  6218 ;; Defined at:
  6219 ;;		line 49 in file "lcd.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;		None
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;		None
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      void 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6233 ;;      Params:         0       0       0       0
  6234 ;;      Locals:         0       0       0       0
  6235 ;;      Temps:          1       0       0       0
  6236 ;;      Totals:         1       0       0       0
  6237 ;;Total ram usage:        1 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    4
  6240 ;; This function calls:
  6241 ;;		_LCD_out
  6242 ;;		_LCD_send
  6243 ;; This function is called by:
  6244 ;;		_main
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text35
  6249  0012D4                     __ptext35:
  6250                           	opt stack 0
  6251  0012D4                     _LCD_init:
  6252                           	opt stack 26
  6253                           
  6254                           ;lcd.c: 52:     LATA = 0;
  6255                           
  6256                           ;incstack = 0
  6257  0012D4  0E00               	movlw	0
  6258  0012D6  6E89               	movwf	3977,c	;volatile
  6259                           
  6260                           ;lcd.c: 53:     LATC = 0;
  6261  0012D8  0E00               	movlw	0
  6262  0012DA  6E8B               	movwf	3979,c	;volatile
  6263                           
  6264                           ;lcd.c: 54:     LATD = 0;
  6265  0012DC  0E00               	movlw	0
  6266  0012DE  6E8C               	movwf	3980,c	;volatile
  6267                           
  6268                           ;lcd.c: 57:     TRISA = 0;
  6269  0012E0  0E00               	movlw	0
  6270  0012E2  6E92               	movwf	3986,c	;volatile
  6271                           
  6272                           ;lcd.c: 58:     TRISC = 0;
  6273  0012E4  0E00               	movlw	0
  6274  0012E6  6E94               	movwf	3988,c	;volatile
  6275                           
  6276                           ;lcd.c: 59:     TRISD = 0;
  6277  0012E8  0E00               	movlw	0
  6278  0012EA  6E95               	movwf	3989,c	;volatile
  6279                           
  6280                           ;lcd.c: 63:     _delay((unsigned long)((15)*(8000000/4000.0)));
  6281  0012EC  0E27               	movlw	39
  6282  0012EE  6E0A               	movwf	??_LCD_init& (0+255),c
  6283  0012F0  0EF5               	movlw	245
  6284  0012F2                     u3637:
  6285  0012F2  2EE8               	decfsz	wreg,f,c
  6286  0012F4  D7FE               	bra	u3637
  6287  0012F6  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6288  0012F8  D7FC               	bra	u3637
  6289  0012FA  F000               	nop	
  6290                           
  6291                           ;lcd.c: 64:     LCD_out(0b0011);
  6292  0012FC  0E03               	movlw	3
  6293  0012FE  ECAF  F00C         	call	_LCD_out
  6294                           
  6295                           ;lcd.c: 65:     _delay((unsigned long)((5)*(8000000/4000.0)));
  6296  001302  0E0D               	movlw	13
  6297  001304  6E0A               	movwf	??_LCD_init& (0+255),c
  6298  001306  0EFC               	movlw	252
  6299  001308                     u3647:
  6300  001308  2EE8               	decfsz	wreg,f,c
  6301  00130A  D7FE               	bra	u3647
  6302  00130C  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6303  00130E  D7FC               	bra	u3647
  6304                           
  6305                           ;lcd.c: 66:     LCD_out(0b0011);
  6306  001310  0E03               	movlw	3
  6307  001312  ECAF  F00C         	call	_LCD_out
  6308                           
  6309                           ;lcd.c: 67:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  6310  001316  0E85               	movlw	133
  6311  001318                     u3657:
  6312  001318  2EE8               	decfsz	wreg,f,c
  6313  00131A  D7FE               	bra	u3657
  6314  00131C  F000               	nop	
  6315                           
  6316                           ;lcd.c: 68:     LCD_out(0b0011);
  6317  00131E  0E03               	movlw	3
  6318  001320  ECAF  F00C         	call	_LCD_out
  6319                           
  6320                           ;lcd.c: 69:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  6321  001324  0E21               	movlw	33
  6322  001326                     u3667:
  6323  001326  2EE8               	decfsz	wreg,f,c
  6324  001328  D7FE               	bra	u3667
  6325  00132A  F000               	nop	
  6326                           
  6327                           ;lcd.c: 70:     LCD_out(0b0010);
  6328  00132C  0E02               	movlw	2
  6329  00132E  ECAF  F00C         	call	_LCD_out
  6330                           
  6331                           ;lcd.c: 71:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  6332  001332  0E21               	movlw	33
  6333  001334                     u3677:
  6334  001334  2EE8               	decfsz	wreg,f,c
  6335  001336  D7FE               	bra	u3677
  6336  001338  F000               	nop	
  6337                           
  6338                           ;lcd.c: 73:     LCD_send(0b00101000, 0);
  6339  00133A  0E00               	movlw	0
  6340  00133C  6E08               	movwf	LCD_send@type,c
  6341  00133E  0E28               	movlw	40
  6342  001340  EC00  F00E         	call	_LCD_send
  6343                           
  6344                           ;lcd.c: 74:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6345  001344  0E06               	movlw	6
  6346  001346  6E0A               	movwf	??_LCD_init& (0+255),c
  6347  001348  0E30               	movlw	48
  6348  00134A                     u3687:
  6349  00134A  2EE8               	decfsz	wreg,f,c
  6350  00134C  D7FE               	bra	u3687
  6351  00134E  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6352  001350  D7FC               	bra	u3687
  6353  001352  D000               	nop2	
  6354                           
  6355                           ;lcd.c: 75:     LCD_send(0b00001000, 0);
  6356  001354  0E00               	movlw	0
  6357  001356  6E08               	movwf	LCD_send@type,c
  6358  001358  0E08               	movlw	8
  6359  00135A  EC00  F00E         	call	_LCD_send
  6360                           
  6361                           ;lcd.c: 76:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6362  00135E  0E06               	movlw	6
  6363  001360  6E0A               	movwf	??_LCD_init& (0+255),c
  6364  001362  0E30               	movlw	48
  6365  001364                     u3697:
  6366  001364  2EE8               	decfsz	wreg,f,c
  6367  001366  D7FE               	bra	u3697
  6368  001368  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6369  00136A  D7FC               	bra	u3697
  6370  00136C  D000               	nop2	
  6371                           
  6372                           ;lcd.c: 77:     LCD_send(0b00000001, 0);
  6373  00136E  0E00               	movlw	0
  6374  001370  6E08               	movwf	LCD_send@type,c
  6375  001372  0E01               	movlw	1
  6376  001374  EC00  F00E         	call	_LCD_send
  6377                           
  6378                           ;lcd.c: 78:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6379  001378  0E06               	movlw	6
  6380  00137A  6E0A               	movwf	??_LCD_init& (0+255),c
  6381  00137C  0E30               	movlw	48
  6382  00137E                     u3707:
  6383  00137E  2EE8               	decfsz	wreg,f,c
  6384  001380  D7FE               	bra	u3707
  6385  001382  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6386  001384  D7FC               	bra	u3707
  6387  001386  D000               	nop2	
  6388                           
  6389                           ;lcd.c: 79:     LCD_send(0b00000110, 0);
  6390  001388  0E00               	movlw	0
  6391  00138A  6E08               	movwf	LCD_send@type,c
  6392  00138C  0E06               	movlw	6
  6393  00138E  EC00  F00E         	call	_LCD_send
  6394                           
  6395                           ;lcd.c: 80:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6396  001392  0E06               	movlw	6
  6397  001394  6E0A               	movwf	??_LCD_init& (0+255),c
  6398  001396  0E30               	movlw	48
  6399  001398                     u3717:
  6400  001398  2EE8               	decfsz	wreg,f,c
  6401  00139A  D7FE               	bra	u3717
  6402  00139C  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6403  00139E  D7FC               	bra	u3717
  6404  0013A0  D000               	nop2	
  6405                           
  6406                           ;lcd.c: 81:     LCD_send(0b00001100, 0);
  6407  0013A2  0E00               	movlw	0
  6408  0013A4  6E08               	movwf	LCD_send@type,c
  6409  0013A6  0E0C               	movlw	12
  6410  0013A8  EC00  F00E         	call	_LCD_send
  6411                           
  6412                           ;lcd.c: 82:     _delay((unsigned long)((2)*(8000000/4000.0)));
  6413  0013AC  0E06               	movlw	6
  6414  0013AE  6E0A               	movwf	??_LCD_init& (0+255),c
  6415  0013B0  0E30               	movlw	48
  6416  0013B2                     u3727:
  6417  0013B2  2EE8               	decfsz	wreg,f,c
  6418  0013B4  D7FE               	bra	u3727
  6419  0013B6  2E0A               	decfsz	??_LCD_init& (0+255),f,c
  6420  0013B8  D7FC               	bra	u3727
  6421  0013BA  D000               	nop2	
  6422  0013BC  0012               	return		;funcret
  6423  0013BE                     __end_of_LCD_init:
  6424                           	opt stack 0
  6425                           tblptru	equ	0xFF8
  6426                           tblptrh	equ	0xFF7
  6427                           tblptrl	equ	0xFF6
  6428                           tablat	equ	0xFF5
  6429                           prodh	equ	0xFF4
  6430                           prodl	equ	0xFF3
  6431                           intcon	equ	0xFF2
  6432                           intcon2	equ	0xFF1
  6433                           intcon3	equ	0xFF0
  6434                           postinc0	equ	0xFEE
  6435                           wreg	equ	0xFE8
  6436                           postinc1	equ	0xFE6
  6437                           postdec1	equ	0xFE5
  6438                           fsr1h	equ	0xFE2
  6439                           fsr1l	equ	0xFE1
  6440                           indf2	equ	0xFDF
  6441                           postinc2	equ	0xFDE
  6442                           postdec2	equ	0xFDD
  6443                           plusw2	equ	0xFDB
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function _LCD_send *****************
  6449 ;; Defined at:
  6450 ;;		line 34 in file "lcd.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  Byte            1    wreg     unsigned char 
  6453 ;;  type            1    7[COMRAM] unsigned char 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  Byte            1    8[COMRAM] unsigned char 
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  1    wreg      void 
  6458 ;; Registers used:
  6459 ;;		wreg, status,2, status,0, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6465 ;;      Params:         1       0       0       0
  6466 ;;      Locals:         1       0       0       0
  6467 ;;      Temps:          0       0       0       0
  6468 ;;      Totals:         2       0       0       0
  6469 ;;Total ram usage:        2 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    3
  6472 ;; This function calls:
  6473 ;;		_LCD_out
  6474 ;; This function is called by:
  6475 ;;		_LCD_init
  6476 ;;		_LCD_line
  6477 ;;		_LCD_string
  6478 ;;		_LCD_clear
  6479 ;;		_print_RFID
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text36
  6484  001C00                     __ptext36:
  6485                           	opt stack 0
  6486  001C00                     _LCD_send:
  6487                           	opt stack 26
  6488                           
  6489                           ;incstack = 0
  6490                           ;LCD_send@Byte stored from wreg
  6491  001C00  6E09               	movwf	LCD_send@Byte,c
  6492                           
  6493                           ;lcd.c: 38:     PORTAbits.RA6 = type;
  6494  001C02  B008               	btfsc	LCD_send@type,0,c
  6495  001C04  D002               	bra	u1945
  6496  001C06  9C80               	bcf	3968,6,c	;volatile
  6497  001C08  D001               	bra	u1946
  6498  001C0A                     u1945:
  6499  001C0A  8C80               	bsf	3968,6,c	;volatile
  6500  001C0C                     u1946:
  6501                           
  6502                           ;lcd.c: 41:     LCD_out(Byte >> 4);
  6503  001C0C  3809               	swapf	LCD_send@Byte,w,c
  6504  001C0E  0B0F               	andlw	15
  6505  001C10  ECAF  F00C         	call	_LCD_out
  6506                           
  6507                           ;lcd.c: 42:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  6508  001C14  0E06               	movlw	6
  6509  001C16                     u3737:
  6510  001C16  2EE8               	decfsz	wreg,f,c
  6511  001C18  D7FE               	bra	u3737
  6512  001C1A  D000               	nop2	
  6513                           
  6514                           ;lcd.c: 44:     LCD_out(Byte);
  6515  001C1C  5009               	movf	LCD_send@Byte,w,c
  6516  001C1E  ECAF  F00C         	call	_LCD_out
  6517                           
  6518                           ;lcd.c: 45:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  6519  001C22  0E21               	movlw	33
  6520  001C24                     u3747:
  6521  001C24  2EE8               	decfsz	wreg,f,c
  6522  001C26  D7FE               	bra	u3747
  6523  001C28  F000               	nop	
  6524  001C2A  0012               	return		;funcret
  6525  001C2C                     __end_of_LCD_send:
  6526                           	opt stack 0
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           intcon2	equ	0xFF1
  6535                           intcon3	equ	0xFF0
  6536                           postinc0	equ	0xFEE
  6537                           wreg	equ	0xFE8
  6538                           postinc1	equ	0xFE6
  6539                           postdec1	equ	0xFE5
  6540                           fsr1h	equ	0xFE2
  6541                           fsr1l	equ	0xFE1
  6542                           indf2	equ	0xFDF
  6543                           postinc2	equ	0xFDE
  6544                           postdec2	equ	0xFDD
  6545                           plusw2	equ	0xFDB
  6546                           fsr2h	equ	0xFDA
  6547                           fsr2l	equ	0xFD9
  6548                           status	equ	0xFD8
  6549                           
  6550 ;; *************** function _LCD_out *****************
  6551 ;; Defined at:
  6552 ;;		line 19 in file "lcd.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  number          1    wreg     unsigned char 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  number          1    6[COMRAM] unsigned char 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  1    wreg      void 
  6559 ;; Registers used:
  6560 ;;		wreg, status,2, status,0, cstack
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6566 ;;      Params:         0       0       0       0
  6567 ;;      Locals:         1       0       0       0
  6568 ;;      Temps:          1       0       0       0
  6569 ;;      Totals:         2       0       0       0
  6570 ;;Total ram usage:        2 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    2
  6573 ;; This function calls:
  6574 ;;		_E_TOG
  6575 ;; This function is called by:
  6576 ;;		_LCD_send
  6577 ;;		_LCD_init
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text37
  6582  00195E                     __ptext37:
  6583                           	opt stack 0
  6584  00195E                     _LCD_out:
  6585                           	opt stack 26
  6586                           
  6587                           ;incstack = 0
  6588                           ;LCD_out@number stored from wreg
  6589  00195E  6E07               	movwf	LCD_out@number,c
  6590                           
  6591                           ;lcd.c: 19: void LCD_out(unsigned char number);lcd.c: 20:  {;lcd.c: 22:     PORTCbits.RC
      +                          1 = (number & 0b0001);
  6592  001960  C007  F006         	movff	LCD_out@number,??_LCD_out
  6593  001964  0E01               	movlw	1
  6594  001966  1606               	andwf	??_LCD_out,f,c
  6595  001968  4606               	rlncf	??_LCD_out,f,c
  6596  00196A  5082               	movf	3970,w,c	;volatile
  6597  00196C  1806               	xorwf	??_LCD_out,w,c
  6598  00196E  0BFD               	andlw	-3
  6599  001970  1806               	xorwf	??_LCD_out,w,c
  6600  001972  6E82               	movwf	3970,c	;volatile
  6601                           
  6602                           ;lcd.c: 23:     PORTCbits.RC2 = (number & 0b0010) >> 1;
  6603  001974  C007  F006         	movff	LCD_out@number,??_LCD_out
  6604  001978  90D8               	bcf	status,0,c
  6605  00197A  3206               	rrcf	??_LCD_out,f,c
  6606  00197C  0E01               	movlw	1
  6607  00197E  1606               	andwf	??_LCD_out,f,c
  6608  001980  4606               	rlncf	??_LCD_out,f,c
  6609  001982  4606               	rlncf	??_LCD_out,f,c
  6610  001984  5082               	movf	3970,w,c	;volatile
  6611  001986  1806               	xorwf	??_LCD_out,w,c
  6612  001988  0BFB               	andlw	-5
  6613  00198A  1806               	xorwf	??_LCD_out,w,c
  6614  00198C  6E82               	movwf	3970,c	;volatile
  6615                           
  6616                           ;lcd.c: 24:     PORTDbits.RD0 = (number & 0b0100) >> 2;
  6617  00198E  C007  F006         	movff	LCD_out@number,??_LCD_out
  6618  001992  90D8               	bcf	status,0,c
  6619  001994  3206               	rrcf	??_LCD_out,f,c
  6620  001996  90D8               	bcf	status,0,c
  6621  001998  3206               	rrcf	??_LCD_out,f,c
  6622  00199A  0E01               	movlw	1
  6623  00199C  1606               	andwf	??_LCD_out,f,c
  6624  00199E  5083               	movf	3971,w,c	;volatile
  6625  0019A0  1806               	xorwf	??_LCD_out,w,c
  6626  0019A2  0BFE               	andlw	-2
  6627  0019A4  1806               	xorwf	??_LCD_out,w,c
  6628  0019A6  6E83               	movwf	3971,c	;volatile
  6629                           
  6630                           ;lcd.c: 25:     PORTDbits.RD1 = (number & 0b1000) >> 3;
  6631  0019A8  C007  F006         	movff	LCD_out@number,??_LCD_out
  6632  0019AC  90D8               	bcf	status,0,c
  6633  0019AE  3206               	rrcf	??_LCD_out,f,c
  6634  0019B0  90D8               	bcf	status,0,c
  6635  0019B2  3206               	rrcf	??_LCD_out,f,c
  6636  0019B4  90D8               	bcf	status,0,c
  6637  0019B6  3206               	rrcf	??_LCD_out,f,c
  6638  0019B8  0E01               	movlw	1
  6639  0019BA  1606               	andwf	??_LCD_out,f,c
  6640  0019BC  4606               	rlncf	??_LCD_out,f,c
  6641  0019BE  5083               	movf	3971,w,c	;volatile
  6642  0019C0  1806               	xorwf	??_LCD_out,w,c
  6643  0019C2  0BFD               	andlw	-3
  6644  0019C4  1806               	xorwf	??_LCD_out,w,c
  6645  0019C6  6E83               	movwf	3971,c	;volatile
  6646                           
  6647                           ;lcd.c: 27:     E_TOG();
  6648  0019C8  EC81  F00E         	call	_E_TOG	;wreg free
  6649                           
  6650                           ;lcd.c: 28:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6651  0019CC  0E03               	movlw	3
  6652  0019CE                     u3757:
  6653  0019CE  2EE8               	decfsz	wreg,f,c
  6654  0019D0  D7FE               	bra	u3757
  6655  0019D2  F000               	nop	
  6656  0019D4  0012               	return		;funcret
  6657  0019D6                     __end_of_LCD_out:
  6658                           	opt stack 0
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           intcon	equ	0xFF2
  6666                           intcon2	equ	0xFF1
  6667                           intcon3	equ	0xFF0
  6668                           postinc0	equ	0xFEE
  6669                           wreg	equ	0xFE8
  6670                           postinc1	equ	0xFE6
  6671                           postdec1	equ	0xFE5
  6672                           fsr1h	equ	0xFE2
  6673                           fsr1l	equ	0xFE1
  6674                           indf2	equ	0xFDF
  6675                           postinc2	equ	0xFDE
  6676                           postdec2	equ	0xFDD
  6677                           plusw2	equ	0xFDB
  6678                           fsr2h	equ	0xFDA
  6679                           fsr2l	equ	0xFD9
  6680                           status	equ	0xFD8
  6681                           
  6682 ;; *************** function _E_TOG *****************
  6683 ;; Defined at:
  6684 ;;		line 4 in file "lcd.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      void 
  6691 ;; Registers used:
  6692 ;;		wreg
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6698 ;;      Params:         0       0       0       0
  6699 ;;      Locals:         0       0       0       0
  6700 ;;      Temps:          0       0       0       0
  6701 ;;      Totals:         0       0       0       0
  6702 ;;Total ram usage:        0 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    1
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_LCD_out
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text38
  6713  001D02                     __ptext38:
  6714                           	opt stack 0
  6715  001D02                     _E_TOG:
  6716                           	opt stack 26
  6717                           
  6718                           ;lcd.c: 5:     PORTCbits.RC0 = 1;
  6719                           
  6720                           ;incstack = 0
  6721  001D02  8082               	bsf	3970,0,c	;volatile
  6722                           
  6723                           ;lcd.c: 6:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6724  001D04  0E03               	movlw	3
  6725  001D06                     u3767:
  6726  001D06  2EE8               	decfsz	wreg,f,c
  6727  001D08  D7FE               	bra	u3767
  6728  001D0A  F000               	nop	
  6729                           
  6730                           ;lcd.c: 7:     PORTCbits.RC0 = 0;
  6731  001D0C  9082               	bcf	3970,0,c	;volatile
  6732                           
  6733                           ;lcd.c: 8:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6734  001D0E  0E03               	movlw	3
  6735  001D10                     u3777:
  6736  001D10  2EE8               	decfsz	wreg,f,c
  6737  001D12  D7FE               	bra	u3777
  6738  001D14  F000               	nop	
  6739  001D16  0012               	return		;funcret
  6740  001D18                     __end_of_E_TOG:
  6741                           	opt stack 0
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           intcon2	equ	0xFF1
  6750                           intcon3	equ	0xFF0
  6751                           postinc0	equ	0xFEE
  6752                           wreg	equ	0xFE8
  6753                           postinc1	equ	0xFE6
  6754                           postdec1	equ	0xFE5
  6755                           fsr1h	equ	0xFE2
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           plusw2	equ	0xFDB
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function _InterruptHandlerHigh *****************
  6766 ;; Defined at:
  6767 ;;		line 20 in file "main.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;		None
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;  rx_char         1    4[COMRAM] unsigned char 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6781 ;;      Params:         0       0       0       0
  6782 ;;      Locals:         1       0       0       0
  6783 ;;      Temps:          4       0       0       0
  6784 ;;      Totals:         5       0       0       0
  6785 ;;Total ram usage:        5 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		Interrupt level 2
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	intcode
  6795  000008                     __pintcode:
  6796                           	opt stack 0
  6797  000008                     _InterruptHandlerHigh:
  6798                           	opt stack 21
  6799                           
  6800                           ;incstack = 0
  6801  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6802  00000A  CFD9 F001          	movff	fsr2l,??_InterruptHandlerHigh
  6803  00000E  CFDA F002          	movff	fsr2h,??_InterruptHandlerHigh+1
  6804  000012  CFF3 F003          	movff	prodl,??_InterruptHandlerHigh+2
  6805  000016  CFF4 F004          	movff	prodh,??_InterruptHandlerHigh+3
  6806                           
  6807                           ;main.c: 23:     static char count = 0;;main.c: 24:     char rx_char;;main.c: 26:     if
      +                           (PIR1bits.RCIF) {
  6808  00001A  AA9E               	btfss	3998,5,c	;volatile
  6809  00001C  D01A               	goto	i2l127
  6810                           
  6811                           ;main.c: 27:         rx_char = RCREG;
  6812  00001E  CFAE F005          	movff	4014,InterruptHandlerHigh@rx_char	;volatile
  6813                           
  6814                           ;main.c: 28:         if (rx_char == 0x02) {
  6815  000022  0E02               	movlw	2
  6816  000024  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  6817  000026  A4D8               	btfss	status,2,c
  6818  000028  D002               	goto	i2l128
  6819                           
  6820                           ;main.c: 29:             count = 0;
  6821  00002A  0E00               	movlw	0
  6822  00002C  6E59               	movwf	InterruptHandlerHigh@count,c
  6823  00002E                     i2l128:
  6824                           
  6825                           ;main.c: 31:         if (rx_char == 0x03) {
  6826  00002E  0E03               	movlw	3
  6827  000030  1805               	xorwf	InterruptHandlerHigh@rx_char,w,c
  6828  000032  A4D8               	btfss	status,2,c
  6829  000034  D003               	goto	i2l129
  6830                           
  6831                           ;main.c: 32:             card_read = 1;
  6832  000036  0E01               	movlw	1
  6833  000038  0100               	movlb	0	; () banked
  6834  00003A  6FBF               	movwf	_card_read& (0+255),b	;volatile
  6835  00003C                     i2l129:
  6836                           
  6837                           ;main.c: 34:         string_rfid[count] = rx_char;
  6838                           
  6839                           ; BSR set to: 0
  6840  00003C  5059               	movf	InterruptHandlerHigh@count,w,c
  6841  00003E  0D01               	mullw	1
  6842  000040  0EE1               	movlw	low _string_rfid
  6843  000042  24F3               	addwf	prodl,w,c
  6844  000044  6ED9               	movwf	fsr2l,c
  6845  000046  0E00               	movlw	high _string_rfid
  6846  000048  20F4               	addwfc	prodh,w,c
  6847  00004A  6EDA               	movwf	fsr2h,c
  6848  00004C  C005  FFDF         	movff	InterruptHandlerHigh@rx_char,indf2
  6849                           
  6850                           ;main.c: 35:         count++;
  6851  000050  2A59               	incf	InterruptHandlerHigh@count,f,c
  6852  000052                     i2l127:
  6853                           
  6854                           ;main.c: 38:     if (INTCON3bits.INT2IF) {
  6855  000052  A2F0               	btfss	intcon3,1,c	;volatile
  6856  000054  D003               	goto	i2l130
  6857                           
  6858                           ;main.c: 39:         count_encoder++;
  6859  000056  0100               	movlb	0	; () banked
  6860  000058  2BBE               	incf	_count_encoder& (0+255),f,b	;volatile
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;main.c: 41:         INTCON3bits.INT2IF = 0;
  6864  00005A  92F0               	bcf	intcon3,1,c	;volatile
  6865  00005C                     i2l130:
  6866                           
  6867                           ;main.c: 44:     if (INTCON3bits.INT2IF) {
  6868                           
  6869                           ; BSR set to: 0
  6870  00005C  A2F0               	btfss	intcon3,1,c	;volatile
  6871  00005E  D00A               	goto	i2l131
  6872                           
  6873                           ;main.c: 45:         if (PORTCbits.RC5 == 1) {
  6874  000060  BA82               	btfsc	3970,5,c	;volatile
  6875                           
  6876                           ;main.c: 46:             if (PORTCbits.RC5 == 1) {
  6877  000062  AA82               	btfss	3970,5,c	;volatile
  6878  000064  D006               	goto	i2l135
  6879                           
  6880                           ;main.c: 47:                 if (PORTCbits.RC5 == 1) {
  6881  000066  BA82               	btfsc	3970,5,c	;volatile
  6882                           
  6883                           ;main.c: 48:                     if (PORTCbits.RC5 == 1) {
  6884  000068  AA82               	btfss	3970,5,c	;volatile
  6885  00006A  D003               	goto	i2l135
  6886                           
  6887                           ;main.c: 49:                         card_read = 0;
  6888  00006C  0E00               	movlw	0
  6889  00006E  0100               	movlb	0	; () banked
  6890  000070  6FBF               	movwf	_card_read& (0+255),b	;volatile
  6891  000072                     i2l135:
  6892                           
  6893                           ;main.c: 54:         INTCON3bits.INT2IF = 0;
  6894                           
  6895                           ; BSR set to: 0
  6896                           
  6897                           ;main.c: 53:         }
  6898                           
  6899                           ; BSR set to: 0
  6900                           
  6901                           ;main.c: 52:             }
  6902                           
  6903                           ; BSR set to: 0
  6904                           
  6905                           ;main.c: 51:                 }
  6906                           
  6907                           ; BSR set to: 0
  6908  000072  92F0               	bcf	intcon3,1,c	;volatile
  6909  000074                     i2l131:
  6910  000074  C004  FFF4         	movff	??_InterruptHandlerHigh+3,prodh
  6911  000078  C003  FFF3         	movff	??_InterruptHandlerHigh+2,prodl
  6912  00007C  C002  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  6913  000080  C001  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  6914  000084  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6915  000086  0011               	retfie		f
  6916  000088                     __end_of_InterruptHandlerHigh:
  6917                           	opt stack 0
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodh	equ	0xFF4
  6923                           prodl	equ	0xFF3
  6924                           intcon	equ	0xFF2
  6925                           intcon2	equ	0xFF1
  6926                           intcon3	equ	0xFF0
  6927                           postinc0	equ	0xFEE
  6928                           wreg	equ	0xFE8
  6929                           postinc1	equ	0xFE6
  6930                           postdec1	equ	0xFE5
  6931                           fsr1h	equ	0xFE2
  6932                           fsr1l	equ	0xFE1
  6933                           indf2	equ	0xFDF
  6934                           postinc2	equ	0xFDE
  6935                           postdec2	equ	0xFDD
  6936                           plusw2	equ	0xFDB
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           intcon	equ	0xFF2
  6947                           intcon2	equ	0xFF1
  6948                           intcon3	equ	0xFF0
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           postinc1	equ	0xFE6
  6952                           postdec1	equ	0xFE5
  6953                           fsr1h	equ	0xFE2
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           plusw2	equ	0xFDB
  6959                           fsr2h	equ	0xFDA
  6960                           fsr2l	equ	0xFD9
  6961                           status	equ	0xFD8
  6962                           
  6963                           	psect	rparam
  6964  0000                     tblptru	equ	0xFF8
  6965                           tblptrh	equ	0xFF7
  6966                           tblptrl	equ	0xFF6
  6967                           tablat	equ	0xFF5
  6968                           prodh	equ	0xFF4
  6969                           prodl	equ	0xFF3
  6970                           intcon	equ	0xFF2
  6971                           intcon2	equ	0xFF1
  6972                           intcon3	equ	0xFF0
  6973                           postinc0	equ	0xFEE
  6974                           wreg	equ	0xFE8
  6975                           postinc1	equ	0xFE6
  6976                           postdec1	equ	0xFE5
  6977                           fsr1h	equ	0xFE2
  6978                           fsr1l	equ	0xFE1
  6979                           indf2	equ	0xFDF
  6980                           postinc2	equ	0xFDE
  6981                           postdec2	equ	0xFDD
  6982                           plusw2	equ	0xFDB
  6983                           fsr2h	equ	0xFDA
  6984                           fsr2l	equ	0xFD9
  6985                           status	equ	0xFD8
  6986                           
  6987                           	psect	temp
  6988  00005A                     btemp:
  6989                           	opt stack 0
  6990  00005A                     	ds	1
  6991  0000                     int$flags	set	btemp
  6992  0000                     wtemp8	set	btemp+1
  6993  0000                     ttemp5	set	btemp+1
  6994  0000                     ttemp6	set	btemp+4
  6995  0000                     ttemp7	set	btemp+8
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           intcon2	equ	0xFF1
  7004                           intcon3	equ	0xFF0
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           postinc1	equ	0xFE6
  7008                           postdec1	equ	0xFE5
  7009                           fsr1h	equ	0xFE2
  7010                           fsr1l	equ	0xFE1
  7011                           indf2	equ	0xFDF
  7012                           postinc2	equ	0xFDE
  7013                           postdec2	equ	0xFDD
  7014                           plusw2	equ	0xFDB
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8


Data Sizes:
    Strings     49
    Constant    0
    Data        0
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     84      89
    BANK0           160     90     146
    BANK1           256      0       0
    BANK2           244      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[10]), STR_1(CODE[9]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1910_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[10]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[10]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    print_RFID@dis	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(BANK0[17]), 

    print_RFID@pa	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(BANK0[17]), 

    forwards@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    forwards@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRightSlow@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRightSlow@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRightSlow@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRightSlow@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct Motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    decelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    decelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    accelerate2@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    accelerate2@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    accelerate@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    accelerate@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct Motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    read_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    mR.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S532Motor$duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.duty_high	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S532Motor$duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.duty_low	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    print_IR@Values	PTR struct Sensor_ir size(2) Largest target is 8
		 -> main@Values(BANK0[8]), 

    LCD_string@string	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(COMRAM[16]), print_IR@buf(BANK0[16]), 


Critical Paths under _main in COMRAM

    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _print_RFID->_LCD_clear
    _print_RFID->_LCD_line
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _utoa->_pad
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_string->_LCD_send
    _LCD_line->_LCD_send
    _LCD_clear->_LCD_send
    _forwards->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _LCD_init->_LCD_send
    _LCD_send->_LCD_out

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_print_IR
    _print_IR->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   36913
                                             53 BANK0     37    37      0
                           _LCD_init
                           _forwards
                        _initEncoder
                            _initPWM
                          _init_RFID
                        _init_TIMER5
                       _init_capture
                   _interrupt_EUSART
                           _print_IR
                         _print_RFID
                            _read_IR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     1      4    3126
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     1      4    2974
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    3386
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              6     4      2     560
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _print_RFID                                          10     6      4    3028
                                             10 COMRAM    10     6      4
                          _LCD_clear
                           _LCD_line
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _print_IR                                            19    17      2   17928
                                             34 BANK0     19    17      2
                          _LCD_clear
                           _LCD_line
                         _LCD_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             16    10      6   14499
                                             18 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   13467
                                             78 COMRAM     6     0      6
                                             16 BANK0      2     2      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           44    38      6   12985
                                             68 COMRAM    10     4      6
                                              0 BANK0     16    16      0
                               _dtoa
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                32    22     10    5099
                                             32 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (6) ___lomod                                             17     1     16     412
                                              5 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (6) ___lodiv                                             25     9     16     421
                                              5 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    5953
                                             32 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3687
                                             21 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     220
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1537
                                             14 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4    1037
                                              5 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              5 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              5 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           2     0      2    1263
                                              9 COMRAM     2     0      2
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_line                                             1     1      0     958
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            1     1      0     914
                                              9 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _interrupt_EUSART                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_capture                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initEncoder                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _forwards                                             5     1      4    3172
                                             26 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    2602
                                             19 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     655
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             11 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0    1002
                                              9 COMRAM     1     1      0
                            _LCD_out
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_send                                             2     1      1     914
                                              7 COMRAM     2     1      1
                            _LCD_out
 ---------------------------------------------------------------------------------
 (3) _LCD_out                                              2     2      0      88
                                              5 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InterruptHandlerHigh                                5     5      0      67
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _LCD_out
       _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _forwards
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initEncoder
   _initPWM
   _init_RFID
   _init_TIMER5
   _init_capture
   _interrupt_EUSART
   _print_IR
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_string
       _LCD_send
         _LCD_out
           _E_TOG
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
   _print_RFID
     _LCD_clear
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_line
       _LCD_send
         _LCD_out
           _E_TOG
     _LCD_send
       _LCD_out
         _E_TOG
   _read_IR
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F3      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            F4      0       0       8        0.0%
BANK2               F4      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5A      92       4       91.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     54      59       1       94.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EB       5        0.0%
DATA                 0      0      EB      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Dec  5 09:55:06 2018

                 print_RFID@pa 000B                             l50 1BA2                             l43 1BE4  
                           l45 1BF6                             l49 1BC0                   ___awdiv@sign 0011  
                print_RFID@dis 000D            ___wmul@multiplicand 0008                            l222 0E46  
                          l142 0340                            l223 0E8C                            l151 048C  
                          l224 0F24                            l401 1844                            l153 04EA  
                          l410 063E                            l330 18F2                            l250 1A08  
                          l146 03B4                            l411 0658                            l331 18EE  
                          l155 052A                            l147 0414                            l156 051E  
                          l421 07E6                            l405 061A                            l333 1926  
                          l414 076A                            l334 1904                            l158 057A  
                          l415 0672                            l247 1A2E                            l255 17AA  
                          l263 1714                            l280 11DC                            l408 0636  
                          l248 19D8                            l256 1754                            l264 16BE  
                          l281 11F4                            l425 07CE                            l433 0C30  
                          l249 19F0                            l257 176C                            l265 16D6  
                          l282 120C                            l194 0B06                            l258 1784  
                          l266 16EE                            l435 0C38                            l451 099C  
                          l195 0B5A                            l284 12B6                            l436 0D66  
                          l452 09E2                            l196 0BAE                            l285 1260  
                          l437 0C7A                            l286 1278                            l446 09FA  
                          l287 1290                            l279 1232                            l447 0900  
                          l455 1AE0                            l456 1ABA                            l393 17E0  
                          l395 17EE                            l572 1038                            l900 13F8  
                          l573 104E                            l565 0F7A                            l581 1114  
                          l397 17F6                            l901 13E4                            l574 1074  
                          l566 0FA2                            l582 1100                            l398 1818  
                          l910 157C                            l399 1800                            l911 1568  
                          l568 0FDC                            l904 1454                            l569 0FC8  
                          l585 115C                            l905 146A                            l690 18CA  
                          l682 1872                            l586 1172                            l578 10C2  
                          l914 15C4                            l691 18D8                            l683 1882  
                          l587 1198                            l579 10E6                            l915 15DA  
                          l685 18A0                            l686 1898                            l689 18C0  
               print_IR@Values 0082                            _abs 1B6E                            _pad 17C8  
                          prod 000FF3                            wreg 000FE8                    ?_LCD_string 000A  
                 __CFG_LVP$OFF 000000                __end_of_LCD_out 19D6                           ?_abs 0018  
                         l1136 1B96                           l1144 1614                           l1156 1B56  
                         l1172 1B0A                           l1157 1B40                           l1173 1B06  
                         l2661 0B06                           ?_pad 0016                           STR_1 0329  
                         STR_2 031F                           STR_3 0311                           STR_4 0301  
                         u3010 05EC                           u3100 079A                           u3020 05EE  
                         u2140 0B9E                           u3101 0798                           _LATA 000F89  
                         u3110 07A8                           _LATB 000F8A                           u2135 0B6E  
                         _LATC 000F8B                           u3120 07AC                           u3200 0D90  
                         u2160 0BFE                           _LATD 000F8C                           u3201 0D8E  
                         u2074 0F18                           u3050 062C                           u3210 0D9E  
                         u2075 0F14                           u2155 0BC6                           u2084 0F40  
                         u3140 07B8                           u3220 0DA2                           u2085 0F3C  
                         u3070 0652                           u3310 040C                           u3080 0778  
                         u3170 0C26                           u3250 0882                           u3340 04F6  
                         u2710 160C                           u3350 0502                           u2800 1B7C  
                         u2730 1654                           u3507 170C                           u3517 17A2  
                         u2910 1118                           u3607 1CA8                           u2831 0FA8  
                         u3527 1A26                           u1945 1C0A                           u3617 122A  
                         u3537 191C                           u1946 1C0C                           u2850 0FE0  
                         u3707 137E                           u3627 12AE                           u3547 150C  
                         u3467 0474                           u3717 1398                           u3637 12F2  
                         u2941 13C4                           u3557 151E                           u3477 04D4  
                         u1990 18A4                           u3727 13B2                           u3647 1308  
                         u3567 1530                           u3487 056C                           u2960 13FC  
                         u3737 1C16                           u3657 1318                           u3577 1542  
                         u3497 05B8                           u3747 1C24                           u3667 1326  
                         u3587 1BBA                           u3757 19CE                           u3677 1334  
                         u3597 1BF8                           u2990 1580                           u3767 1D06  
                         u3687 134A                           u3777 1D10                           u3697 1364  
     __end_of_interrupt_EUSART 1D28                           abs@a 0018                           _dbuf 00C1  
                         _main 0334                           _dtoa 05C4                           _prec 0055  
                         _nout 00BA                           pad@i 001D                           pad@p 001A  
                         fsr1h 000FE2                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 001F                           fsr2l 000FD9  
                         btemp 005A                           _stop 19D6                           _utoa 0C14  
                         prodh 000FF4                           prodl 000FF3                           start 0088  
           __size_of_LCD_clear 001C                   ?_init_TIMER5 0001                   ?_initEncoder 0001  
                 ___param_bank 000000                    _string_rfid 00E1                          ??_abs 001A  
                        ??_pad 001C               __end_of_LCD_line 1C00               __end_of_LCD_init 13BE  
             __end_of_LCD_send 1C2C                __end_of___aodiv 1096                          ?_main 0001  
                        ?_dtoa 0021                __end_of___aomod 11BA                __end_of___awdiv 18E2  
                        ?_stop 001B                          ?_utoa 0021                __end_of___lodiv 148C  
              ___awdiv@divisor 000E                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                __end_of___lomod 15FC                          _PDC1L 000F77  
                        _T5CON 000FB7                          i2l130 005C                          i2l131 0074  
                        i2l135 0072                          i2l127 0052                          i2l128 002E  
                        i2l129 003C                ___awdiv@counter 0010                          _RCREG 000FAE  
                        _E_TOG 1D02                   vfpfcnvrt@fmt 0047                          _TMR0H 000FD7  
                 vfpfcnvrt@llu 0068                          _TMR0L 000FD6                          _SPBRG 000FAF  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                __end_of_initPWM 1C98                          _flags 0057  
              __end_of_read_IR 0C14                          _fputc 15FC                          _fputs 1B36  
                        pad@fp 0016                          _width 00BC                          _putch 1D36  
                        dtoa@d 0023                          dtoa@i 0043                          dtoa@n 003B  
                        dtoa@p 0035                          dtoa@s 0039                          dtoa@w 0037  
                        tablat 000FF5                          plusw2 000FDB                          ttemp5 005B  
                        ttemp6 005E                          ttemp7 0062                          utoa@d 0023  
                        utoa@i 003F                          utoa@n 0037                          utoa@p 0033  
                        utoa@w 0035                          status 000FD8                          wtemp8 005B  
              __end_of_sprintf 1AA6               ___lodiv@dividend 0006                 __CFG_MCLRE$OFF 000000  
              __initialization 1C2C            __size_of_LCD_string 0030                   __end_of_main 05C4  
                 __end_of_dtoa 0810                   __end_of_stop 1A4C                   __end_of_utoa 0DCC  
               __CFG_OSC$IRCIO 000000                  _count_encoder 00BE                         ??_main 0095  
                       ??_dtoa 002B                         ??_stop 001F                         ??_utoa 002B  
                __activetblptr 000001                         ?_E_TOG 0001                      ??_LCD_out 0006  
                main@direction 009E               ___lodiv@quotient 0016              __end_of_LCD_clear 1CB4  
                 ?_setMotorPWM 0014                         ?_fputc 0006                         ?_fputs 000F  
             ___awdiv@dividend 000C                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       ?_putch 0001                  ?_init_capture 0001                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                   vfprintf@cfmt 0070  
                    ??___aodiv 0016                      ??___aomod 0016                         ___wmul 1C54  
                    ??___awdiv 0010                      ??___lodiv 0016                      ??___lomod 0016  
                       clear_0 1C32               __end_of_forwards 12D4               ___awdiv@quotient 0012  
                       pad@buf 0018                         main@mL 00A8                         main@mR 00B1  
                       dtoa@fp 0021                         _strlen 1AFC                      ??_initPWM 0006  
                       fputc@c 0006                      ??_read_IR 0008                         fputs@c 0013  
                       fputs@i 0014                         fputs@s 000F                  main@threshold 009C  
                 __mediumconst 0000               __end_of_print_IR 154E                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         putch@c 0001  
             __end_of_vfprintf 1AFC                         stop@mL 001B                         stop@mR 001D  
                       utoa@fp 0021                      ??_sprintf 0055                 ??_init_capture 0006  
             __end_of_turnLeft 17C8                     __accesstop 0060        __end_of__initialization 1C42  
                    ?_LCD_line 0001                      ?_LCD_init 0001                      ?_LCD_send 0008  
                ___rparam_used 000001                  __end_of_E_TOG 1D18                   LCD_line@line 000A  
               __pcstackCOMRAM 0001           __size_of_init_TIMER5 001A           __size_of_initEncoder 000E  
                __end_of_fputc 169C                  __end_of_fputs 1B6E                  __end_of_putch 1D38  
                 LCD_send@Byte 0009                   LCD_send@type 0008                        ??_E_TOG 0006  
__size_of_InterruptHandlerHigh 0080                   ??_LCD_string 000C                        ??_fputc 000A  
                      ??_fputs 0013                        ??_putch 0006                     __pbssBANK0 00BA  
             LCD_string@string 000A             __size_of_init_RFID 001A              ?_interrupt_EUSART 0001  
                   ??_LCD_line 000A                     ??_LCD_init 000A                     ??_LCD_send 0009  
           ??_interrupt_EUSART 0006                        ?___wmul 0006             __end_of_LCD_string 1BD0  
                      _CAP1CON 000F63                        _CAP2CON 000F62                        _DFLTCON 000F60  
                      ?_strlen 0006                        _LCD_out 195E             __size_of_vfpfcnvrt 0226  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E               ___lomod@dividend 0006  
         __size_of_setMotorPWM 0182                      ?_forwards 001B             __size_of_turnRight 0096  
                      __Hparam 0000                        __Lparam 0000                      ?_print_IR 0082  
                      ___aodiv 0F4E                        ___aomod 1096                        ___awdiv 185E  
              __size_of___wmul 0026                        ___lodiv 13BE                        ___lomod 154E  
         __end_of_init_capture 1CCE                      ?_vfprintf 004F                   __psmallconst 0300  
                      __pcinit 1C2C                        __ramtop 0300                      ?_turnLeft 001B  
                      __ptext0 0334                        __ptext1 169C                        __ptext2 1732  
                      __ptext3 19D6                        __ptext4 0A36                        __ptext5 18E2  
                      __ptext6 148C                        __ptext7 1A4C                        __ptext8 1AA6  
                      __ptext9 0810              __end_of_init_RFID 1D02                      _T0CONbits 000FD5  
              __size_of_strlen 003A                        _initPWM 1C7A                        _read_IR 0A36  
                 __size_of_abs 0032                   __size_of_pad 0096                      _T5CONbits 000FB7  
                      _sprintf 1A4C                      _LCD_clear 1C98           end_of_initialization 1C42  
           setMotorPWM@PWMduty 0019                        fputc@fp 0008                        fputs@fp 0011  
                   ??_forwards 001F              __end_of_vfpfcnvrt 0A36                      _RCSTAbits 000FAB  
                   ??_print_IR 0084                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                   ??_vfprintf 0055                        strlen@a 000A                        strlen@s 0006  
                   ??_turnLeft 001F                     _print_RFID 18E2                      _PORTAbits 000F80  
                    _PORTCbits 000F82                      _PORTDbits 000F83              __end_of_turnRight 1732  
                    _TRISCbits 000F94                    print_IR@buf 0085                     ?_LCD_clear 0001  
                   main@Values 00A0                      _TXSTAbits 000FAC              __size_of_LCD_line 0030  
            __size_of_LCD_init 00EA              __size_of_LCD_send 002C                      _Direction 00C0  
                  vfpfcnvrt@ap 0049                    vfpfcnvrt@fp 0045                    vfpfcnvrt@ll 0060  
               __end_of___wmul 1C7A                    _BAUDCONbits 000FAA                 __end_of_strlen 1B36  
          start_initialization 1C2C                ___lodiv@divisor 000E                ___lodiv@counter 001E  
                  __end_of_abs 1BA0                    __end_of_pad 185E      InterruptHandlerHigh@count 0059  
 __end_of_InterruptHandlerHigh 0088                  ??_init_TIMER5 0006          __size_of_init_capture 001A  
                ??_initEncoder 0006                    vfprintf@fmt 0051                  LCD_out@number 0007  
                     ??___wmul 000A                     forwards@mL 001B                     forwards@mR 001D  
    __size_of_interrupt_EUSART 0010                    ?_print_RFID 000B                       ??_strlen 0008  
                     ?_LCD_out 0001                    __pbssCOMRAM 0055                  __pcstackBANK0 0060  
             ___aodiv@dividend 0006                    ??_LCD_clear 000A                   _init_capture 1CB4  
                    _card_read 00BF              __size_of_forwards 011A                      _dtoa$1441 0033  
                    __pintcode 0008                       ?___aodiv 0006                       ?___aomod 0006  
                     ?___awdiv 000C               ___aodiv@quotient 0018                       ?___lodiv 0006  
                     ?___lomod 0006              __size_of_print_IR 00C2            __end_of_init_TIMER5 1CE8  
          __end_of_initEncoder 1D36              __size_of_vfprintf 0056                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       _CAP2BUFH 000F67                       _CAP2BUFL 000F66  
              ___lomod@divisor 000E                       ?_initPWM 0001                    __smallconst 0300  
              ___lomod@counter 0016                       ?_read_IR 0006                 __size_of_E_TOG 0016  
            __size_of_turnLeft 0096                      _init_RFID 1CE8                  ??_setMotorPWM 0016  
                     ?_sprintf 0072                  read_IR@Values 0006                 __size_of_fputc 00A0  
               __size_of_fputs 0038                 __size_of_putch 0002                 ___wmul@product 000A  
                     _LATCbits 000F8B            __size_of_print_RFID 007C                       _LCD_line 1BD0  
                     _LCD_init 12D4                       _LCD_send 1C00                       _PIE1bits 000F9D  
                  turnRight@mL 001B                    turnRight@mR 001D                       _PIR1bits 000F9E  
                    _vfpfcnvrt 0810              ___wmul@multiplier 0006                   setMotorPWM@m 0014  
         _InterruptHandlerHigh 0008                     ?_init_RFID 0001               __size_of_LCD_out 0078  
                    _turnRight 169C                    _INTCON2bits 000FF1                    _INTCON3bits 000FF0  
          __end_of_setMotorPWM 0F4E                       __Hrparam 0000                    _init_TIMER5 1CCE  
                  _initEncoder 1D28                     vfprintf@ap 0053                       __Lrparam 0000  
                   vfprintf@fp 004F                   __Lsmallconst 0300               __size_of___aodiv 0148  
             __size_of___aomod 0124               __size_of___awdiv 0084               __size_of___lodiv 00CE  
             __size_of___lomod 00AE                     ?_vfpfcnvrt 0045               _interrupt_EUSART 1D18  
              ___aodiv@divisor 000E                ___aodiv@counter 0016          ?_InterruptHandlerHigh 0001  
                   sprintf@fmt 0074                     sprintf@ret 0078               __size_of_initPWM 001E  
             __size_of_read_IR 01DE                     ?_turnRight 001B                       __ptext10 0C14  
                     __ptext11 154E                       __ptext20 1096                       __ptext12 13BE  
                     __ptext21 0F4E                       __ptext13 05C4                       __ptext30 1D28  
                     __ptext22 1BA0                       __ptext14 17C8                       __ptext31 11BA  
                     __ptext23 1BD0                       __ptext15 1AFC                       __ptext32 0DCC  
                     __ptext24 1C98                       __ptext16 1B36                       __ptext33 1C54  
                     __ptext25 1D18                       __ptext17 15FC                       __ptext34 185E  
                     __ptext26 1CB4                       __ptext18 1D36                       __ptext35 12D4  
                     __ptext27 1CCE                       __ptext19 1B6E                       __ptext36 1C00  
                     __ptext28 1CE8                       __ptext37 195E                       __ptext29 1C7A  
                     __ptext38 1D02               __size_of_sprintf 005A                  __size_of_main 0290  
                __size_of_dtoa 024C                       _forwards 11BA                  __size_of_stop 0076  
                __size_of_utoa 01B8                     turnLeft@mL 001B                     turnLeft@mR 001D  
                     _print_IR 148C                       int$flags 005A                       _vfprintf 1AA6  
                     main@diff 009A                   ??_print_RFID 000F                       _turnLeft 1732  
             ___aomod@dividend 0006                     _INTCONbits 000FF2                    ??_init_RFID 0006  
                   _LCD_string 1BA0                    _setMotorPWM 0DCC                       intlevel2 0000  
                    sprintf@ap 007A    InterruptHandlerHigh@rx_char 0005             __end_of_print_RFID 195E  
                   _OSCCONbits 000FD3                ___aomod@divisor 000E                    ??_vfpfcnvrt 004B  
              ___aomod@counter 0016         ??_InterruptHandlerHigh 0001                       sprintf@f 007C  
                     sprintf@s 0072                    ??_turnRight 001F                   ___aodiv@sign 0017  
                 ___aomod@sign 0017                   main@PWMcycle 0098  
